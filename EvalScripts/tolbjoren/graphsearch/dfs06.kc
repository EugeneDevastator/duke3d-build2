enum{MAX_NODER = 500};
static naboer[MAX_NODER][MAX_NODER];
static nodex[MAX_NODER];
static nodey[MAX_NODER];
static nodecol[MAX_NODER];
static numnodes = 0;
static nodeRadi = 20;

static nodeheight[MAX_NODER];
static maxdist = 0;

enum{white=0,gray=1,black=2};
static vertexstate[MAX_NODER];

static clickedNode = -1;
static time = 0;

static nodeClosed[MAX_NODER*MAX_NODER];

static openList[MAX_NODER*MAX_NODER];
static numopen = 0;
static maxopen = 0;



enum{MAX_STACKS=10, MAX_ELEMENTS=5000}
static stackarray[MAX_STACKS][MAX_ELEMENTS];
static stackcount[MAX_STACKS];
static activestack = 0;

static path[MAX_NODER];
static pathlength = 0;

static predecessor[MAX_NODER];
static foundgoal = 0;
static startnode = 0;
static goalnode = 1;

static grabbedNode = -1;
()
{
   if(numframes==0){
      setfont(12,16);
      for(i=0; i<MAX_NODER; i++) vertexstate[i] = WHITE;

 
     
      for(y=0; y<10; y++)
      for(x=0; x<10; x++)
      {
         makeNode( (xres/2-nodeRadi*6*3)+x*nodeRadi*4, (yres/2-nodeRadi*6*3)+y*nodeRadi*4);
      }
      
      x = 0;
      y = 0;    
      for(i=0; i<numnodes;i++)
      {
         // naboer[fra][til]
         if(x < 9) naboer[y*10+x][(x+1)+y*10] = 1; // venstre
         if(x < 9) naboer[y*10+x][(x+1)+(y+1)*10] = 1; // venstre og ned
         if(x < 10) naboer[y*10+x][(x)+(y+1)*10] = 1; // ned
         
         if( (x != y) && x > 1 ) naboer[y*10+x][(x-1)+y*10] = 1; // hoyre
         if(x < 10 && x > 0) naboer[y*10+x][(x-1)+(y+1)*10] = 1; // venstre og ned
         if(x < 10 && y > 1) naboer[y*10+x][(x)+(y-1)*10] = 1; // opp
         
         x++;
         if(x>9){
            x=0;
            y++;
         }
         
      }  
      
      x = 4; y = 4;
      goalnode = y*10+x;

      calcHeight();
   }
   
   
   // Lage noder DONE
   // flytte noder DONE
   // lage connections DONE
   // gjore sok. BFS og DFS er DONE
   // vise rute DONE
   // regne ut hoyde paa node for hillclimbing. DONE. bruker avstand fra maal noden.
   // vise hoyde DONE
   // gjore hillclimbing algoritmen. DONE

   time = klock(0);
   
   // sjekk kollisjon mus -> node
   if(bstatus==1)
   {
      collided = 0;
      for(i = 0; i<numnodes; i++)
      {
      if( ((mousx-nodex[i])^2 + (mousy-nodey[i])^2 ) < nodeRadi^2 )
           {
              //nodecol[i] = rgb(rnd*255, rnd*255, rnd*255);
              collided = 1;
              if(clickedNode != -1)
              {
                 //naboer[i][clickedNode] = 1; // make neighbours
                 naboer[clickedNode][i] = 1;
                 clickedNode = -1;
              }
              else
              {
                 clickedNode = i;
              }
           }
      }
      if(collided == 0 && numnodes < MAX_NODER)
      {
          nodex[numnodes] = mousx;
          nodey[numnodes] = mousy;   
          nodeCol[numnodes] = 0xffffff;
          numnodes++;
      }
      bstatus = 0;
   }
   if(grabbedNode > -1)
   {
       nodex[grabbedNode] = mousx;
       nodey[grabbedNode] = mousy; 
   }   

   if(bstatus==2 && grabbedNode ==-1)
   {
      if( clickedNode > -1 ) {clickedNode = -1; bstatus = 0; return; } // deselect on mouse2
      closest = nodeClosestToMouse();
      
      if(closest > -1)
      {         
          nodex[closest] = mousx;
          nodey[closest] = mousy; 
          grabbedNode = closest;
      }
   }
   if(bstatus==0)
   {
      grabbedNode = -1;
   }

   updateGfx();
   
   
   if(keystatus[32] == 1 )
   {
      keystatus[32] = 0;
      res = dfs(startnode,goalnode);
      if(res==goalnode) foundgoal=1; 
   }
   if(keystatus[48] == 1 )
   {
      keystatus[48] = 0;
      res = bfs(startnode,goalnode);  
      if(res==goalnode) foundgoal=1;
   }
   
   if(keystatus[34] == 1 ) // g
   {
      keystatus[34] = 0;
      resetGraph();
   }
   
   if(keystatus[35] == 1 ) // h
   {
      keystatus[35] = 0;
      res = hillclimbing();
      if(res==goalnode) foundgoal=1;
   }
    

   if(keystatus[31] == 1 ) // s
   {
      keystatus[31] = 0;
      resetSearch();
   }

   if(keystatus[2] == 1 ) //1
   {
      resetSearch();
      node = nodeClosestToMouse();
      startnode = node;
      calcHeight();
   }
   
   if(keystatus[3] == 1 ) //2
   {
      resetSearch();
      node = nodeClosestToMouse();
      goalnode = node;
      calcHeight();
   }
   

   
}

nodeClosestToMouse()
{
   minDist = 1e32;
   closest = -1;
   
   for(i = 0; i<numnodes; i++)
   {
      dist = ((mousx-nodex[i])^2 + (mousy-nodey[i])^2 ); // < nodeRadi^2;
      if( dist < minDist )
      {
         minDist = dist;
         closest = i;  
      }

   }
   return closest;
}

makeNode(x,y)
{
   nodex[numnodes] = x; nodey[numnodes] = y; numnodes++; return numnodes-1;
}

resetGraph(){
   foundGoal = 0;
   numnodes = 0;
   for(i=0; i<MAX_NODER; i++)
   {
      vertexstate[i] = WHITE; // reset
      for(j=0; j<MAX_NODER; j++) 
      {
         naboer[i][j] = 0;
      }
   }

}
resetSearch()
{      
   foundGoal = 0;
   numopen = 0; maxopen = 0;
   for(i=0; i<MAX_NODER*MAX_NODER; i++)
   {
      openList[i] = -1; // todo MAX^2
      if(i<MAX_NODER){ 
      nodeClosed[i] = 0; 
      vertexstate[i] = WHITE; }
       
   }
   
   for(i=0; i<MAX_STACKS; i++)
   while(stackCount[i] > 0) pop(); // clear stack

   calcHeight();
}

calcHeight(){
   // Set hight of all nodes
   maxdist = 0;
   for(i=0; i<numnodes; i++){
      dist = sqrt( ( nodex[i]-nodex[goalnode] )^2 + ( nodey[i]-nodey[goalnode] )^2 );
      nodeheight[i] = dist;
      if(dist > maxdist) maxdist = dist;
   }
   for(i=0; i<numnodes;i++)
   {
      nodeheight[i] = 255-255*nodeheight[i]/maxdist;
   }

}

bfs(x,goal)
{
   search(x);
   while(stackCount[0] > -1)
   {
      
      w = popFront();
      
      if( nodeClosed[w] == 0 )
      {      
         search(w);
      }
      
      vertexstate[w] = BLACK; // done
      if(w==goal) return w;
   }
}

dfs(x,goal)
{
   search(x);
   while(stackCount[0] > -1)
   {
      w = pop();     
      if(w==goal){ vertexstate[w]=BLACK; return goal; }      

      if( nodeClosed[w] == 0 )
      {
         search(w);
      }
      vertexstate[w] = BLACK; // done
   }
}

eval(x) // used by hillclimbing
{
   return nodeheight[x];
}

//@returns index to best node found.
hillclimbing()
{
   
   currentNode = startNode;
   do{
      search(currentNode); // find neighbours. add to openlist
      nextEval = -1e32; //-INF
      nextNode = -1; // null, use to look forward 1 step
      
      while(stackCount[0] > 0) // for all neighbours
      {
         x = pop(); // get
         if(x==goalnode){ vertexstate[x]=BLACK; return goalnode; }    // got what we came for.       

         // simple hillclimbing. 
         if( eval(x) > nextEval ){ // find best node so far.
            nextNode = x;
            nextEval = eval(x);
         }
         vertexstate[x] = BLACK; // done
      } 
      if(nextEval <= eval(currentNode)){
         return currentNode; // no better neighbour exists.
      }
      currentNode = nextNode;
   
   }while(1) 
}

/*
hillclimbing() // simple hillclimbing. 
{
   
   currentNode = startNode;
   do{
      search(currentNode); // find neighbours. add to openlist
      nextEval = -1e32; //-INF
      nextNode = -1; // null, use to look forward 1 step
      
      while(stackCount[0] > 0) // for all neighbours
      {
         x = pop(); // get
         if(x==goalnode){ vertexstate[x]=BLACK; return goalnode; }    // got what we came for.       
         if( eval(x) > nextEval ){ // find best node so far.
            nextNode = x;
            nextEval = eval(x);
         }
         vertexstate[x] = BLACK; // done
      } 
      if(nextEval <= eval(currentNode)){
         return currentNode; // no better neighbour exists.
      }
      currentNode = nextNode;
   
   }while(1) 
}
*/
search(v)
{
   nodeClosed[v] = 1;
   vertexstate[v] = GRAY; // visited
   
   updateGfx();
   sleep(25);
   
   for(i=0; i<numnodes; i++) // find v's neighbours, add them to open
   {
      //if(v != i) //dont push self //hm. if graph is correctly made, shouldnt happen
      if(naboer[v][i] == 1 || naboer[i][v] == 1)
      { 
         push(i); 
         if(nodeClosed[i] == 0) predecessor[i] = v;
      }
   }
}

recurseDFS(u)
{
   vertexstate[u] = GRAY;
   updateGfx();
   sleep(150);
   
   for(i=0; i<numnodes; i++)
   {
      if( naboer[u][i]==1 && vertexstate[i] == WHITE )
      {       
         recurseDFS(i);
      }
   }
   
   vertexstate[u] = BLACK;
   updateGfx();
   sleep(150);
}

/*
drawArrow(sx,sy,ex,ey,thick,l,angle)
{
   //angle = atan2(ey-sy,ex-sx);
   ofs=PI*1.2;
   drawcone(sx,sy,thick,ex,ey,thick);
   drawcone(sx,sy,thick,ex+cos(angle+ofs)*l, ey+sin(angle+ofs)*l,thick);
   drawcone(sx,sy,thick,ex+cos(angle-ofs)*l, ey+sin(angle-ofs)*l,thick);
}
*/

updateGfx()
{
   cls(0);

   if(foundGoal==1)
   {
      printf("\nfound goal");
      showPath();
   }   

   setcol(0x777777); 
   
   for(i = 0; i<numnodes; i++){
   for(j=0; j<numnodes;j++){
         if(naboer[i][j] == 1) drawcone( nodex[i], nodey[i],-1, nodex[j], nodey[j], -1);   
      }
   }

   for(i = 0; i<numnodes; i++){
      drawNode(i);
      if(i==clickedNode)
      {
         ang = atan2(  nodey[i]-mousy, nodex[i]-mousx );
         ants(nodex[i]-cos(ang)*nodeRadi,nodey[i]-sin(ang)*nodeRadi,mousx,mousy,time);
      }
      for(j=0; j<numnodes;j++)
      {
         // kunne ha tegnet paa det under alt annet og sluppet atan2
         if(naboer[i][j] == 1){
         ang = atan2(  nodey[i]-nodey[j], nodex[i]-nodex[j] ); // find angle from node i to node j
         setcol(0x999999);
         // use the angle, size of a node to draw a arrow just touching the node
         drawcone( nodex[j]+cos(ang)*nodeRadi*1.5, nodey[j]+sin(ang)*nodeRadi*1.5, -5, 
         nodex[j]+cos(ang)*nodeRadi*0.9, nodey[j] + sin(ang)*nodeRadi*0.9, 0.01);
         
         //drawArrow( nodex[j]+cos(ang)*nodeRadi*1.0, nodey[j]+sin(ang)*nodeRadi*1.0, nodex[j]+cos(ang)*nodeRadi*2, nodey[j]+sin(ang)*nodeRadi*2, 1, 10, ang );
         }
         
      }
      
   }
   
   if(foundgoal) 
   showStack();   

   moveto(0,0); 
   printf("%g / %g nodes used",numnodes,MAX_NODER);
   //printf("\nopen %g", numopen);
   //printf("\nmax %g", maxopen);
   printf("\nGoal node: %g",goalnode);

   setfont(6,8); moveto(xres-180,0); setcol(0xffffff); 
   printf("\nHow to use. \n\nUse following keys");
   printf("\n[B]fs \n[D]fs \nReset [s]earch\nReset [g]raph");
   printf("\n\nClick to add new node.");
   printf("\n\nClick 1 node, then\nsome other node to make\nconnection.\n\nRightclick to move.");
   printf("\n\nHold X down and move mouse \nto set goal node.");
   
   moveto(xres/2, yres/2); 
   refresh();
}

showStack()
{
   setcol(0xffffff);
   moveto(0,100);
   printf("stackdata:");
   for(i=0; i<=stackCount[0]; i++)
   {
      data = stackarray[0][i];
      setcol(0xffffff); printf("\n[%g] = %g", i, data );
      setcol(0xff0000); drawsph(nodex[data], nodey[data], -nodeRadi-3);
   }
}

showPath()
{   
   node = goalnode;
   ox = nodex[node];
   oy = nodey[node];
   moveto(0,yres/2);
   printf("\nSti mellom start og maal tilstand:");
   while(node != startnode)
   {
      pred = predecessor[node];
      setcol(0xffffff); printf("\nforgjenger[%g] = %g",node,pred);
      node = pred;
      setcol(0x00ff00); drawcone(ox,oy,6,nodex[pred],nodey[pred],6);
      ox = nodex[node];
      oy = nodey[node];
   }
}

drawNode(i){
   if( i < 10 ){moveto( nodex[i]-5, nodey[i]-10 );} else{moveto( nodex[i]-14, nodey[i]-12 );} 
   
   if(vertexstate[i] == BLACK ){
      setcol(0xffffff); drawsph( nodex[i], nodey[i], -nodeRadi); setcol(0xffffff); printf("#%g",i); printf("\n%.1f",nodeheight[i]);} // printchar(i+64)

   if(vertexstate[i] == GRAY ){
      setcol(0x777777); drawsph( nodex[i], nodey[i], nodeRadi); setcol(0xffffff); printf("#%g",i); printf("\n%.1f",nodeheight[i]);}
   
   if(vertexstate[i] == WHITE ){
      setcol(0xffffff); setcol(nodeheight[i],nodeheight[i],0); drawsph( nodex[i], nodey[i], nodeRadi); setcol(0x000000); printf("#%g",i); printf("\n%.1f",nodeheight[i]);}   

   if(i==clickedNode){ setcol(0xffffff); antwheel(nodex[i], nodey[i],nodeRadi+1); }
   if(i==goalNode){ setcol(0xb33122); moveto(nodex[i]-15,nodey[i]-15+sin(time)*30 );printf("GOAL!"); }
   if(i==startNode){ setcol(0xb33122); moveto(nodex[i]-15,nodey[i]-15+sin(time)*30 );printf("START!"); }
   
   
}

antwheel(tx,ty,r)
{
   segs = 18;
   segsm1 = segs-1;
   ox = tx + r*sin(0*2*PI/segsm1);
   oy = ty + r*cos(0*2*PI/segsm1);
   for(i=1; i<segs; i++)
   {
      x = tx + r*sin(time+i*2*PI/segsm1);
      y = ty + r*cos(time+i*2*PI/segsm1);
      //setcol(0xffffff); 
      drawsph(x,y,2);
      ox = x; oy = y;
   }
}

ants(x1,y1,x2,y2,t)
{
   mv = 0;
   xdist = x1-x2; ydist=y1-y2;
   if(xdist < 0) xdist=-xdist;
   if(ydist < 0) ydist=-ydist;
   
   if(ydist > xdist)
   {
      mv = ydist;
   }
   else
   {
      mv = xdist;
   }
   
   x = x1;
   y = y1;
   
   stepx = xdist/mv;
   if(x1 > x2) stepx = -stepx;
   stepy = ydist/mv;
   if(y1 > y2) stepy = -stepy;
   
   // makes ants move, start val is det by time
   // ant speed is time in millis taken for 1 move
   antspeed = 10;
   antsize = 10;
   antcounter = abs( (t*1000/antspeed) % antsize);
   
   for(nc=0; nc<floor(mv); nc++)
   {   
      if( (abs(antcounter) % antsize) < (antsize/2) ){
         setcol(0); setpix(x,y);
      }
      else{
         setcol(0xffffff); setpix(x,y);
      }
   
      x+=stepx; y+=stepy;
      antcounter -= 1;
   }
      
}

push(x)
{
   stackarray[activestack][stackcount[activestack]] = x;
   stackcount[activestack]++;
}

popFront()
{
   val = stackarray[activestack][0];
   for(i=0; i<stackcount[activestack]; i++)
   {
      stackarray[activestack][i] = stackarray[activestack][i+1]; //overwrite current with next
   }
   stackcount[activestack]--;
   return val;
}

pop()
{
   stackcount[activestack]--;
   return stackarray[activestack][stackcount[activestack]];
}