enum{MAX_NODER = 99};
static naboer[MAX_NODER][MAX_NODER];
static nodex[MAX_NODER];
static nodey[MAX_NODER];
static nodecol[MAX_NODER];
static numnodes = 0;
static nodeRadi = 20;

enum{white=0,gray=1,black=2};
static vertexstate[MAX_NODER];

static clickedNode = -1;
static time = 0;

static nodeClosed[MAX_NODER*MAX_NODER];

static openList[MAX_NODER*MAX_NODER];
static numopen = 0;
static maxopen = 0;



enum{MAX_STACKS=10, MAX_ELEMENTS=1000}
static stackarray[MAX_STACKS][MAX_ELEMENTS];
static stackcount[MAX_STACKS];
static activestack = 0;

static path[MAX_NODER];
static pathlength = 0;

static predecessor[MAX_NODER];
static foundgoal = 0;
static goalnode = 15;
()
{
   if(numframes==0){
      setfont(12,16);
      for(i=0; i<MAX_NODER; i++) vertexstate[i] = WHITE;
      //genGraph(); //fail
      
      x = xres/2;
      makeNode(x, nodeRadi);
      makeNode(x-nodeRadi*10, nodeRadi*3); naboer[0][1] = 1;
      makeNode(x+nodeRadi*10, nodeRadi*3); naboer[0][2] = 1;
      makeNode(x-nodeRadi*16, nodeRadi*6); naboer[1][3] = 1;
      makeNode(x-nodeRadi*4, nodeRadi*6); naboer[1][4] = 1;
      
      makeNode(x+nodeRadi*16, nodeRadi*6); naboer[2][6] = 1;
      makeNode(x+nodeRadi*4, nodeRadi*6); naboer[2][5] = 1;

      makeNode(x+nodeRadi*18, nodeRadi*9); naboer[5][8] = 1;
      makeNode(x+nodeRadi*14, nodeRadi*9); naboer[5][7] = 1;
      
      makeNode(x-nodeRadi*2, nodeRadi*9); naboer[4][9] = 1;
      makeNode(x-nodeRadi*4, nodeRadi*9); naboer[4][10] = 1;
      makeNode(x-nodeRadi*6, nodeRadi*9); naboer[4][11] = 1;

      makeNode(x+nodeRadi*2, nodeRadi*9); naboer[6][12] = 1;
      makeNode(x+nodeRadi*4, nodeRadi*9); naboer[6][13] = 1;
      makeNode(x+nodeRadi*6, nodeRadi*9); naboer[6][14] = 1;

      makeNode(x-nodeRadi*4, nodeRadi*12); naboer[11][15] = 1;
      makeNode(x-nodeRadi*6, nodeRadi*12); naboer[11][16] = 1;
      makeNode(x-nodeRadi*8, nodeRadi*12); naboer[11][17] = 1;
   }
   
   
   // Lage noder
   // flytte noder
   // lage connections
   // gjore sok
   // vise rute

   time = klock(0);
   
   // sjekk kollisjon mus -> node
   if(bstatus==1)
   {
      collided = 0;
      for(i = 0; i<numnodes; i++)
      {
      if( ((mousx-nodex[i])^2 + (mousy-nodey[i])^2 ) < nodeRadi^2 )
           {
              //nodecol[i] = rgb(rnd*255, rnd*255, rnd*255);
              collided = 1;
              if(clickedNode != -1)
              {
                 //naboer[i][clickedNode] = 1; // make neighbours
                 naboer[clickedNode][i] = 1;
                 clickedNode = -1;
              }
              else
              {
                 clickedNode = i;
              }
           }
      }
      if(collided == 0 && numnodes < MAX_NODER)
      {
          nodex[numnodes] = mousx;
          nodey[numnodes] = mousy;   
          nodeCol[numnodes] = 0xffffff;
          numnodes++;
      }
      bstatus = 0;
   }
   if(bstatus==2)
   {
      if( clickedNode > -1 ) {clickedNode = -1; bstatus = 0; return; } // deselect on mouse2
      closest = nodeClosestToMouse();
      
      if(closest > -1)
      {         
          nodex[closest] = mousx;
          nodey[closest] = mousy; 
      }
   }

   updateGfx();
   
   
   if(keystatus[32] == 1 )
   {
      keystatus[32] = 0;
      res = dfs(0,goalnode);
      if(res==goalnode) foundgoal=1; 
   }
   if(keystatus[48] == 1 )
   {
      keystatus[48] = 0;
      res = bfs(0,goalnode);  
      if(res==goalnode) foundgoal=1;
   }
   
   if(keystatus[34] == 1 ) // g
   {
      keystatus[34] = 0;
      resetGraph();
   }
   if(keystatus[31] == 1 ) // s
   {
      keystatus[31] = 0;
      resetSearch();
   }
   if(keystatus[45] == 1 ) //x
   {
      node = nodeClosestToMouse();
      goalnode = node;
   }
   
}

nodeClosestToMouse()
{
   minDist = 1e32;
   closest = -1;
   
   for(i = 0; i<numnodes; i++)
   {
      dist = ((mousx-nodex[i])^2 + (mousy-nodey[i])^2 ); // < nodeRadi^2;
      if( dist < minDist )
      {
         minDist = dist;
         closest = i;  
      }

   }
   return closest;
}

makeNode(x,y)
{
   nodex[numnodes] = x; nodey[numnodes] = y; numnodes++; return numnodes-1;
}

resetGraph(){
   foundGoal = 0;
   numnodes = 0;
   for(i=0; i<MAX_NODER; i++)
   {
      vertexstate[i] = WHITE; // reset
      for(j=0; j<MAX_NODER; j++) 
      {
         naboer[i][j] = 0;
      }
   }
}
resetSearch()
{      
   foundGoal = 0;
   numopen = 0; maxopen = 0;
   for(i=0; i<MAX_NODER*MAX_NODER; i++)
   {
      openList[i] = -1; // todo MAX^2
      if(i<MAX_NODER){ 
      nodeClosed[i] = 0; 
      vertexstate[i] = WHITE; }
       
   }
}

bfs(x,goal)
{
   search(x);
   while(stackCount[0] > 0)
   {
      
      w = popFront();
      
      if( nodeClosed[w] == 0 )
      {      
         search(w);
      }
      
      vertexstate[w] = BLACK; // done
      if(w==goal) return w;
   }
}

dfs(x,goal)
{
   search(x);
   while(stackCount[0] > 0)
   {
      w = pop();     
      if(w==goal){ vertexstate[w]=BLACK; return goal; }      

      if( nodeClosed[w] == 0 )
      {
         search(w);
      }
      vertexstate[w] = BLACK; // done
   }
}

search(v)
{
   nodeClosed[v] = 1;
   vertexstate[v] = GRAY; // visited
   
   updateGfx();
   sleep(250);
   
   for(i=0; i<numnodes; i++) // find v's neighbours, add them to open
   {
      if(naboer[v][i] == 1)// || naboer[i][v] == 1)
      { 
         push(i); 
         if(nodeClosed[i] == 0) predecessor[i] = v;
      }
   }
}

recurseDFS(u)
{
   vertexstate[u] = GRAY;
   updateGfx();
   sleep(150);
   
   for(i=0; i<numnodes; i++)
   {
      if( naboer[u][i]==1 && vertexstate[i] == WHITE )
      {       
         recurseDFS(i);
      }
   }
   
   vertexstate[u] = BLACK;
   updateGfx();
   sleep(150);
}

updateGfx()
{
   cls(0);
   for(i = 0; i<numnodes; i++){
      drawNode(i);
      if(i==clickedNode)
      {
         ang = atan2(  nodey[i]-mousy, nodex[i]-mousx );
         ants(nodex[i]-cos(ang)*nodeRadi,nodey[i]-sin(ang)*nodeRadi,mousx,mousy,time);
      }
      for(j=0; j<numnodes;j++)
      {
         // kunne ha tegnet paa det under alt annet og sluppet atan2
         if(naboer[i][j] == 1){
         ang = atan2(  nodey[i]-nodey[j], nodex[i]-nodex[j] );
         setcol(0x777777); 
         drawcone( nodex[i]-cos(ang)*nodeRadi, nodey[i]-sin(ang)*nodeRadi,2,
         nodex[j]+cos(ang)*nodeRadi, nodey[j] + sin(ang)*nodeRadi, 2);
         
         drawcone( nodex[j]+cos(ang)*nodeRadi*2, nodey[j]+sin(ang)*nodeRadi*2, -10,
         nodex[j]+cos(ang)*nodeRadi*0.9, nodey[j] + sin(ang)*nodeRadi*0.9, 0.1);
         }
      }
      
   }
   moveto(0,0); setcol(0xffffff); 
   printf("%g / %g nodes used",numnodes,MAX_NODER);
   //printf("\nopen %g", numopen);
   //printf("\nmax %g", maxopen);
   printf("\nGoal node: %g",goalnode);
   if(foundGoal==1)
   {
      printf("\nfound goal");
      showPath();
   }
   setfont(6,8); moveto(xres-150,0); setcol(0xffffff); 
   printf("\nHow to use. \n\nUse following keys");
   printf("\n[B]fs \n[D]fs \nReset [s]earch\nReset [g]raph");
   printf("\n\nClick to add new node.");
   printf("\n\nClick 1 node, then\nsome other node to make\nconnection.\n\nRightclick to move.");
   printf("\n\nHold X down and click \nto set goal node.");
   
   moveto(xres/2, yres/2); 
   printf("note to self: bruk C++ FFS!");
   printf("\nalso. must draw connection from allready connected verts");
   setfont(12,16);
   refresh();
}

showPath()
{
   /*
   while(stackcount[activestack] > -1)
   {
      path[pathlength] = popfront();
      pathlength++;
   }
   for(i=0; i<pathlength-1; i++)
   {
      printf("\n %g,  %g ",i, path[i]  );
   }
   */
   
   node = goalnode;
   ox = nodex[node];
   oy = nodey[node];
   moveto(0,yres/2);
   printf("\nSti mellom start og maal tilstand:");
   while(node != 0)
   {
      pred = predecessor[node];
      setcol(0xffffff); printf("\nforgjenger[%g] = %g",node,pred);
      node = pred;
      setcol(0x00ff00); drawcone(ox,oy,2,nodex[pred],nodey[pred],2);
      ox = nodex[node];
      oy = nodey[node];
   }
}

drawNode(i){
   if( i < 10 ){moveto( nodex[i]-5, nodey[i]-6 );} else{moveto( nodex[i]-12, nodey[i]-6 );} 
   
   if(vertexstate[i] == BLACK ){
      setcol(0xffffff); drawsph( nodex[i], nodey[i], -nodeRadi); setcol(0xffffff); printchar(i+64);} //printf("%g",i);

   if(vertexstate[i] == GRAY ){
      setcol(0x777777); drawsph( nodex[i], nodey[i], nodeRadi); setcol(0xffffff); printchar(i+64);}
   
   if(vertexstate[i] == WHITE ){
      setcol(0xffffff); drawsph( nodex[i], nodey[i], nodeRadi); setcol(0x000000); printchar(i+64);}   

   if(i==clickedNode){ setcol(0xffffff); antwheel(nodex[i], nodey[i],nodeRadi+1); }
   if(i==goalNode){ setcol(0xb33122); moveto(nodex[i]-15,nodey[i]-15+sin(time)*30 );printf("GOAL!"); }
}

antwheel(tx,ty,r)
{
   segs = 18;
   segsm1 = segs-1;
   ox = tx + r*sin(0*2*PI/segsm1);
   oy = ty + r*cos(0*2*PI/segsm1);
   for(i=1; i<segs; i++)
   {
      x = tx + r*sin(time+i*2*PI/segsm1);
      y = ty + r*cos(time+i*2*PI/segsm1);
      //setcol(0xffffff); 
      drawsph(x,y,2);
      ox = x; oy = y;
   }
}

ants(x1,y1,x2,y2,t)
{
   mv = 0;
   xdist = x1-x2; ydist=y1-y2;
   if(xdist < 0) xdist=-xdist;
   if(ydist < 0) ydist=-ydist;
   
   if(ydist > xdist)
   {
      mv = ydist;
   }
   else
   {
      mv = xdist;
   }
   
   x = x1;
   y = y1;
   
   stepx = xdist/mv;
   if(x1 > x2) stepx = -stepx;
   stepy = ydist/mv;
   if(y1 > y2) stepy = -stepy;
   
   // makes ants move, start val is det by time
   // ant speed is time in millis taken for 1 move
   antspeed = 10;
   antsize = 10;
   antcounter = abs( (t*1000/antspeed) % antsize);
   
   for(nc=0; nc<floor(mv); nc++)
   {   
      if( (abs(antcounter) % antsize) < (antsize/2) ){
         setcol(0); setpix(x,y);
      }
      else{
         setcol(0xffffff); setpix(x,y);
      }
   
      x+=stepx; y+=stepy;
      antcounter -= 1;
   }
      
}

push(x)
{
   stackarray[activestack][stackcount[activestack]] = x;
   stackcount[activestack]++;
}

popFront()
{
   val = stackarray[activestack][0];
   for(i=0; i<stackcount[activestack]; i++)
   {
      stackarray[activestack][i] = stackarray[activestack][i+1]; //overwrite current with next
   }
   stackcount[activestack]--;
   return val;
}

pop()
{
   stackcount[activestack]--;
   return stackarray[activestack][stackcount[activestack]];
}