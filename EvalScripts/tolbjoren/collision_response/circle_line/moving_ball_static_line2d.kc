struct p2d_t{x,y;};

enum{MAX_CIRCLES = 100}
struct circle_t{x, y, vx, vy, mass, radius, color;};
static circle_t circles[MAX_CIRCLES];
static numcircles = 0;



enum{MAX_LINES = 10}
struct line_t{p2d_t start; p2d_t end, p2d_t normal;};
static line_t lines[MAX_LINES];
static numlines = 0;

enum{MAX_POT_COLLS = 100}
struct potentialColl_t{x,y,r;}
static potentialColl_t potColls[MAX_POT_COLLS];
static num_pot_colls;

// resolving collisions correctly
enum{INSIDE = -1, NONE = -2}
enum{CIRCLECIRCLE = -1, CIRCLELINE = -2}; // Collision types.

static dt, time, oldtime;

static running = 1;

static circleCircleCollisions,circleLineColls = 0;

static recursiveCalls, recurseLimit = 100;
()
{
   cls(0);
   time = klock(0);
   if(running)
   {
      dt =  time - oldtime;
   }else{
      dt = 0;
   }  
   oldtime = time; 

   if(numframes == 0)
   {
      poolSetup(); //pool, square, sine, cradle
      createLine(xres * 0.15, yres * 0.10, xres * 0.15, yres * 0.95); //l
      createLine(xres * 0.73, yres * 0.95, xres * 0.73, yres * 0.10); //r
      
      createLine(xres * 0.95, yres * 0.45, xres * 0.05, yres * 0.20); // t
      createLine(xres * 0.05, yres * 0.75, xres * 0.95, yres * 0.65);  //b
   }
   
   display();
   num_pot_colls = 0;

   static flowOfTime = 1;
   recursiveCalls = -1;
   checkCollision(dt * flowOfTime);
   
   if(keystatus[2])
   {
      keystatus[2] =0;
      flowOfTime *= -1;
   }
   
   keys();

   //sleep(16);
   moveto(0,0);
   setcol(0xffffff);
   printf("\nctrl+enter to reset");
   printf("\ncirc circ cols: %g",circleCircleCollisions);
   printf("\ncir lin cols:   %g",circleLineColls);
   printf("\nnum_potential_collisions (circ circ both ways):   %g",num_pot_colls);
   static max_potential_collisions;
   max_potential_collisions = max(max_potential_collisions, num_pot_colls);
   printf("\nhighest num potential_collisions:   %g",max_potential_collisions); 
   printf("\nPRESS 1 TO CONTROL THE FLOW OF THYME"); 
   static maxRecursiveCalls;
   maxRecursiveCalls = max(maxRecursiveCalls,recursiveCalls);
   printf("\nnum recursive steps last dt: %g",recursiveCalls);
   printf("\nmax recursion:  %g / %g",maxRecursiveCalls, recurseLimit);
   printf("\nballs  %g / %g",numcircles, MAX_CIRCLES);
   printf("\nlines  %g / %g",numlines, MAX_LINES);
}

checkCollision( t) // , movable, fixed
{
   recursiveCalls++;
   if( recursiveCalls > recurseLimit) return; // fix calculation of response taking ds innacuracy in account.
   //if(t < 0.0001) return;

   collisionType = NONE;
   p2d_t normal;
   

   // find first collision
   mn = 2.0; // time
   firstColObj1 = -1;
   firstColObj2 = -1;
   obj1 = -1; // null
   obj2 = -1; // null
   
   // Repeat for all moveable objects.
   for( i=0; i<numCircles; i++)
   {
      obj1 = i;
      // find the displacement vector
      
      // search for collisions with other moveableObjs, dont bother with already checked ones.
      for( j=i+1; j<numCircles; j++)
      {
         obj2 = j;
         tm = circleCircleCollision(obj1, obj2, t); // use a generic detectCollision func that takes any type of obj.
         //if(tm == NONE) continue;
         if(tm >= 0 && tm <= 1)
         {
            m = min(mn, tm);
            if(m < mn)
            {
               mn = m;
               firstColObj1 = obj1;
               firstColObj2 = obj2;
               normal.x= circles[obj1].x - circles[obj2].x;
               normal.y = circles[obj1].y - circles[obj2].y;   
               normalize(normal);      
               collisionType = CIRCLECIRCLE;
            }
         }
         
         t2 = circleCircleCollision(obj1, obj2, 1);
         if(t2 >= 0 && t2 <= 1)
         {
         createPotentialCollision(circles[obj1].x+circles[obj1].vx*t2,circles[obj1].y+circles[obj1].vy * t2,circles[obj1].radius+2);
         createPotentialCollision(circles[obj2].x+circles[obj2].vx*t2,circles[obj2].y+circles[obj1].vy * t2,circles[obj2].radius+2);
         }
    
      }
      // Static - dynamic collisions
      for(j=0; j<numLines; j++)
      {
         obj2 = j;

         tm = circleLineCollision( obj1, obj2, t );
         //if(tm==NONE) continue;
         if(tm >= 0 && tm <= 1)
         {
            m = min(mn, tm);
            if(m < mn)
            {
               mn = m;
               // burde lage kollisjonsobj som vet typen
               // line vs circle
               firstColObj1 = obj1;
               firstColObj2 = obj2;
               normal.x = lines[obj2].normal.x;
               normal.y = lines[obj2].normal.y;
               collisionType = CIRCLELINE;
            }
         }
         
         // Check for collision against end of velocity vec
         
         t2 =  circleLineCollision( obj1, obj2, 1);
         if(t2 >= 0 && t2 <= 1) createPotentialCollision(circles[obj1].x+circles[obj1].vx * t2,circles[obj1].y+circles[obj1].vy * t2,circles[obj1].radius+2);     
      }
   }
   
   tmove = 0;
   if( mn >= 2.0 ) tmove = 1; // go all the way. No collisions.
   else tmove = mn * t; // time of collision
   
   // Move all movable objects.
   for(i=0; i<numCircles; i++)
   {
      circles[i].x += circles[i].vx * tmove *t;
      circles[i].y += circles[i].vy * tmove *t;    
   }
   
   // if there was no collisions, finish. end recursion.
   if( mn >= 2.0 ) return;
   // otherwise resolve collision
   resolveCollision( firstColObj1, firstColObj2, collisionType, normal );
   
   checkCollision( t * (1.0 - mn) ); // moveableObjects, fixedObjects
}

// know that obj1 always is a circle.
// should really use a physicsObject.getType()
// or even better. collisionObject.getCollisionType()
// that knows which one is a circle and which one is a line
resolveCollision( obj1, obj2, collisionType, p2d_t normal )
{
   if( collisionType == CIRCLECIRCLE )
   {
      resolveCollisionFree(obj1,obj2,normal);
   }
   else if( collisionType == CIRCLELINE )
   {
      resolveFixedCollision(obj1,normal);
   }
}

resolveCollisionFree(obj1,obj2,p2d_t normal)
{

   r = circles[obj1].mass / circles[obj2].mass;  
   basex = circles[obj2].vx; 
   basey = circles[obj2].vy;
   p2d_t u;
   u.x = circles[obj1].vx - basex; 
   u.y = circles[obj1].vy - basey; 
   static un[2]; 
   componentVector(u,normal,un); // un = componentVec( u, normal )
   
   // ut = u - un
   utx = u.x - un[0]; 
   uty = u.y - un[1]; 
   // vn = un * (r-1) / (r+1)
   vnx = un[0] * (r-1) / (r+1); 
   vny = un[1] * (r-1) / (r+1);
   // wn = un * 2 * r / (r+1)
   wnx = un[0] * 2 * r / (r+1); 
   wny = un[1] * 2 * r / (r+1);
   
   circles[obj1].vx = utx + vnx + basex; 
   circles[obj1].vy = uty + vny + basey;
   circles[obj2].vx = wnx + basex; 
   circles[obj2].vy = wny + basey;   
   circleCircleCollisions++;
   playsound("ppbaltab.wav",100);
}

resolveFixedCollision(obj,p2d_t normal)
{
   /*
   p2d_t u; u.x = circlevx[obj]; u.y = circlevx[obj]; 
   static n[2]; n[0] = normal[0]; n[1] = normal[1]; 
   static c[2]; componentVector(u,n,c); // un = componentVec( u, normal )
   circleVx[obj] = circleVx[obj] - 2 * c[0];
   circleVy[obj] = circleVy[obj] - 2 * c[1];
   circleLineColls++;
   */
   // calc dot product of incident vector and base top normal
   dot = circles[obj].vx * normal.x + circles[obj].vy * normal.y;
   
   
   // calc reflection vector
   circles[obj].vx = circles[obj].vx - 2*normal.x*dot;
   circles[obj].vy = circles[obj].vy - 2*normal.y*dot;
   circleLineColls++;
   
   playsound("tapfloor.flac");
}

// Takes handles of to circles and their displacement vector relative to time; cir1.pos*t - cir2.pos*t
circleCircleCollision(cir1, cir2, t)
{
   r = circles[cir1].radius + circles[cir2].radius;

   p2d_t a;
   a.x = circles[cir1].x - circles[cir2].x;
   a.y = circles[cir1].y - circles[cir2].y;
   
   p2d_t b; // blir som getDS(simtime)
   b.x = circles[cir1].vx*t - circles[cir2].vx*t;
   b.y = circles[cir1].vy*t - circles[cir2].vy*t;
   
   aa = dotProduct(a,a);
   if( aa < r*r ) return INSIDE; // Early escape test.
   bb = dotProduct(b,b);

   ab = dotProduct(a,b);
   
   root = ab*ab - bb * (aa - r*r);
   if(root < 0) return NONE;
   t = (-ab - sqrt(root))/bb;  
   if(t>1 || t<0) return NONE;
   return t;
}

circleLineCollision(cir,line, t)
{
   p2d_t displacement;
   displacement.x = circles[cir].vx * t;
   displacement.y = circles[cir].vy * t;

   p2d_t n; 
   n.x = lines[line].normal.x; 
   n.y = lines[line].normal.y;
   p2d_t a; 
   a.x = lines[line].start.x - circles[cir].x; 
   a.y = lines[line].start.y - circles[cir].y;
   c = dotProduct(a,n);
   if( abs(c) < circles[cir].radius ) return INSIDE;
   rx=0; ry=0;
   
   if(c < 0){
      rx = -n.x * circles[cir].radius; 
      ry = -n.y * circles[cir].radius;
   }else{
      rx = n.x * circles[cir].radius; 
      ry = n.y * circles[cir].radius;
   }
   
   // check if circle is approaching line
   v = dotProduct(displacement, n);
   if( v > 0) return NONE;
   
   // calc vector eq
   static circlePos[2]; 
   circlePos[0] = circles[cir].x+rx; 
   circlePos[1] = circles[cir].y+ry;
   
   static startPoint[2]; 
   startPoint[0] = lines[line].start.x; startPoint[1] = lines[line].start.y;
   
   static lineVector[2]; 
   lineVector[0] = lines[line].end.x - lines[line].start.x; lineVector[1] = lines[line].end.y - lines[line].start.y;
   
   t = intersectionTime( circlePos, displacement, startPoint, lineVector );
   if(t > 1 ) return NONE;
   return t;
}

rotatePoint(p2d_t p, ang) // angle in radians
{
   newx = p.x * cos(ang) - p.y * sin(ang);
   newy = p.x * sin(ang) + p.y * cos(ang);
   p.x = newx; p.y = newy;    
}

rotatePoint(&x,&y,ang) // angle in radians
{
   newx = x * cos(ang) - y * sin(ang);
   newy = x * sin(ang) + y * cos(ang);
   x = newx; y = newy;    
}


dotProduct(p2d_t v1, p2d_t v2)
{
   return v1.x*v2.x + v1.y*v2.y;
}

componentVector(p2d_t vector,p2d_t directionVector, out[2])
{
   normalize(directionVector);
   dpr = dotProduct(vector, directionVector);
   out[0] = dpr * directionVector.x; 
   out[1] = dpr * directionVector.y;
}

normalize(p2d_t vec)
{
   len = sqrt(vec.x^2+vec.y^2); vec.x/=len; vec.y/=len;
}

// What about the Z coordinate for 3D?
intersectionTime(p1[2], p2d_t v1, p2[2], v2[2])
{
   tc1 = v1.x;
   tc2 = v1.y;

   sc1 = v2[0];
   sc2 = v2[1];

   con1 = p2[0] - p1[0];
   con2 = p2[1] - p1[1];
 
   det = tc2*sc1 - tc1 * sc2; // 2x2 determinant.
   if(det==0) return 1e32; // no isec
   con = sc1*con2 - sc2 * con1;
   t = con / det;
   return t;
}

antwheel(tx,ty,r,t)
{
      ox = tx + r*sin(0*2*PI/15);
      oy = ty + r*cos(0*2*PI/15);
      for(i=1; i<16; i++)
      {
         x = tx + r*sin(i*2*PI/15);
         y = ty + r*cos(i*2*PI/15);
         ants(ox,oy,x,y,time);
         ox = x; oy = y;
      }
}

ants(x1,y1,x2,y2,t)
{
   mv = 0;
   xdist = x1-x2; ydist=y1-y2;
   if(xdist < 0) xdist=-xdist;
   if(ydist < 0) ydist=-ydist;
   
   if(ydist > xdist)
   {
      mv = ydist;
   }
   else
   {
      mv = xdist;
   }
   
   x = x1;
   y = y1;
   
   stepx = xdist/mv;
   if(x1 > x2) stepx = -stepx;
   stepy = ydist/mv;
   if(y1 > y2) stepy = -stepy;
   
   // makes ants move, start val is det by time
   // ant speed is time in millis taken for 1 move
   antspeed = 10;
   antsize = 10;
   antcounter = abs( (t*1000/antspeed) % antsize);
   
   for(nc=0; nc<floor(mv); nc++)
   {   
      if( (abs(antcounter) % antsize) < (antsize/2) ){
         setcol(0); setpix(x,y);
      }
      else{
         setcol(0xffffff); setpix(x,y);
      }
   
      x+=stepx; y+=stepy;
      antcounter -= 1;
   }
      
}

display()
{
   for(i=0; i<numcircles; i++)
   {
      setcol(circles[i].color);
      drawsph( circles[i].x, circles[i].y, circles[i].radius);
      setcol(0xffffff);
     // Show velocity vector
      moveto(circles[i].x, circles[i].y); lineto(circles[i].x+circles[i].vx, circles[i].y+circles[i].vy);
   }
   for(i=0; i<numlines; i++)
   {
      setcol(0xffffff);
      sx = lines[i].start.x; sy = lines[i].start.y;
      ex = lines[i].end.x; ey = lines[i].end.y;
      moveto(sx,sy);
      lineto(ex,ey);
      midx = (ex+sx)/2; midy = (ey+sy)/2;
      moveto( midx,midy );
      lineto( midx+lines[i].normal.x*15, midy+lines[i].normal.y*15 );
   }
   for(i=0; i<num_pot_colls; i++)
   {
      x = potColls[i].x;
      y = potColls[i].y;
      r = potColls[i].r;
      antwheel(x,y,r,time);
   }
}

keys()
{
   controllball = numcircles-1;
   if(keystatus[203])
   {
      x = circles[ controllball ].vx; y = circles[ controllball ].vy;
      rotatePoint(x,y, -dt*250*pi/180 );
      circles[ controllball ].vx = x; circles[ controllball ].vy = y;
   }
   if(keystatus[205])
   {
      x = circles[ controllball ].vx; y = circles[ controllball ].vy;
      rotatePoint(x,y, dt*250*pi/180 );
      circles[ controllball ].vx = x; circles[ controllball ].vy = y;
   }
   if(keystatus[200])
   {
      // 10% faster
      // jall.
      circles[controllball].vx += 100*cos(circles[controllball].x-xres-circles[controllball].vx)*dt;
      circles[controllball].vy += 100*sin(circles[controllball].y-yres-circles[controllball].vy)*dt;
   }
   if(keystatus[208])
   {
      circles[controllball].vx *= 0.99 ;
      circles[controllball].vy *= 0.99 ;
   }
   
   if(keystatus[57])
   {
      keystatus[57] = 0;
      if(running) running = 0;
      else running = 1;
   }
   
   if(bstatus == 1)
   {
      bstatus = 0;
      //createBall(mousx,mousy,0,0,15+rnd*5,15,0xff0000);
   }
}

createLine(sx,sy,ex,ey)
{
   lines[numlines].start.x = sx;
   lines[numlines].start.y = sy; 
   lines[numlines].end.x = ex;
   lines[numlines].end.y = ey;  
   normalAngle = (atan2(ey-sy, ex-sx) -PI/2); // TODO
   lines[numlines].normal.x = cos(normalAngle);
   lines[numlines].normal.y = sin(normalAngle);
   numlines++;
}

createBall(x,y,vx,vy,r,m,c)
{
   if(numcircles > MAX_CIRCLES) return;
   circles[numcircles].x = x;
   circles[numcircles].y = y;
   circles[numcircles].vx = vx;
   circles[numcircles].vy = vy;
   circles[numcircles].radius = r;
   circles[numcircles].mass = m;
   circles[numcircles].color = c;
   numcircles++;
}

createPotentialCollision(x,y,r)
{
   if(num_pot_colls < MAX_POT_COLLS)    
   {          
      potColls[num_pot_colls].x = x;
      potColls[num_pot_colls].y = y;
      potColls[num_pot_colls].r = r;
      num_pot_colls++;
   }  
}

poolSetup(){       
      ballTriangleSize=9;
      numballs = 9+8+7+6+5+4+3+2+1;
      for(xloop = ballTriangleSize; xloop>1; xloop--)
      {
         for(yloop = 1; yloop<xloop; yloop++)
         {
         x = xres * 0.35 + (5-xloop)*27; y = yres * 0.5 + yloop*31-(xloop*31)/2.0;
         color = rgb(255-numcircles*255/numballs, numcircles*255/numballs, yloop*255/6);
         createBall(x,y,0,0,15,50,color);
         }
      }
      
      //  Cue ball 1
     createBall(xres * 0.65, yres * 0.5, -50, nrnd*5, 10, 50, 0xffffff);
}

sineSetup()
{
      len = xres*0.5;
      circlesToPlace = 25;
      diam = len / circlesToPlace;
      for(i=0; i<circlesToPlace; i++)
      {
         x = xres*0.2 + i*len/(circlesToPlace-1);
         y = yres*0.5 + 70*sin(i*2*PI/(circlesToPlace-1));
       createBall(x,y,0,0,diam/2-0.5, diam/2, rgb(255-i*255/11, i*255/11, 0) );        
      }  
      circles[0].vx = 50*cos(PI/4); 
      circles[0].vy = 50*sin(PI/4);
}
cradleSetup(){
      // simplified newtons cradle
      diam = 25;   
      for(i=0; i<15; i++)
      {
      createBall(xres * 0.2 +i*diam, yres * 0.5, 0, 0, diam/2-0.000001, diam/2, rgb(255-i*255/11, i*255/11, 0) );
      }      
      circles[3].vx = 150;
}
squareSetup(){
      diam = 20;  
      xpos = 0; 
      ypos = 0;
      for(i=0; i<25; i++)
      {
         createBall(xres * 0.2 + xpos * diam, yres * 0.5 + ypos * diam, 0, 0, diam/2-0.01, diam/2, rgb(255-i*255/11, i*255/11, 0) );
         xpos++;
         if(xpos > 4)
         {
            xpos = 0;
            ypos++;
         }
      }  
      createBall(xres * 0.2 + (xpos+5) * diam, yres * 0.5 + (ypos) * diam, xres * 0.2 + xpos, yres * 0.2 + ypos, 10, 10, rgb(255-i*255/11, i*255/11, 0) );
}