

enum{MAXPOLES = 4}

static worldSiz = 20;
static poleRadi = .5;

static poleX[MAXPOLES];
static poleY[MAXPOLES];
static poleZ[MAXPOLES];
static polarity[MAXPOLES];
static positivePole[MAXPOLES];
static positiveCount = 0;


struct pole
{
   x,y,z;
   polarity;
   magnitude;
   
};


enum {NUMP=1024*4} //8192 4096 2048 1024
static px[NUMP], py[NUMP], pz[NUMP];

static otim;
()
{
  cls(0x503070); clz(1e32);
  
  if(numframes==0)
  {
     for(i=0;i<NUMP;i++) { // position particles   
        px[i] = nrnd * worldSiz;
        py[i] = nrnd * worldSiz;
        pz[i] = nrnd * worldSiz;
        
     }
     for(i=0; i<MAXPOLES; i++){ // position poles
        poleX[i] = random(-worldSiz,worldSiz);
        poleY[i] = random(-worldSiz,worldSiz);
        poleZ[i] = random(-worldSiz,worldSiz);
        polarity[i] = nrnd;
     }
     for(i=0; i<MAXPOLES; i++) { // save poles with +charge
       if(polarity[i] > 0)
       {
         positivePole[positiveCount] = i;
         positiveCount++;
       }
     }
     // If no poles are postive, set pole zero to +... or else all particles eventually get sucked up.
     if( positiveCount == 0 ){ 
        polarity[0]=1; positivePole[positiveCount]=0; positiveCount=1;
     }
  }
  
  // Main loop:
  tim = klock(0); dt = tim-otim; otim = tim;
  setcol(0xffffff);

  for(i=0;i<NUMP;i++)
  {
     x = px[i]; 
     y = py[i];
     z = pz[i];
     
     dead = 0;
     if( x < -worldSiz || x > worldSiz ) dead = 1;
     if( y < -worldSiz || y > worldSiz ) dead = 1;
     if( z < -worldSiz || z > worldSiz ) dead = 1;
     
     vx=0; vy=0; vz=0;
     
     if(dead==0)
     {
        for(j=0; j<MAXPOLES; j++)
        {
           x1 = poleX[j]; y1 = poleY[j]; z1 = poleZ[j];
           // Vector from pole to Particle
           dx = (x-x1); dy = (y-y1); dz = (z-z1);
           distSq = dx^2 + dy^2 + dz^2;
           
           // kill when hit sink...
           if( polarity[j] < 0 && distSq < 2*poleRadi){
              dead = 1;
              break;
           } 
       
           nd = 1.0/distSq;
           vx += dx*nd*polarity[j];
           vy += dy*nd*polarity[j];
           vz += dz*nd*polarity[j];
        }      
        vx /= MAXPOLES;
        vy /= MAXPOLES;
        vz /= MAXPOLES;
     }

     if ( dead ) {
        randPole = positivePole[int(rnd*positiveCount)]; // Choose a positive pole to spawn on.
        rx=0; ry=0; rz=0;
        randPointOnSphere(poleRadi,rx,ry,rz);
        px[i] = polex[randPole] + rx;
        py[i] = poley[randPole] + ry;
        pz[i] = polez[randPole] + rz;
     }        

     mag = sqrt(vx^2 + vy^2 + vz^2);
     len = .125 / mag;
     setcol((i%72)*64+64,(i%80)+128,64);
     //drawsph(x,y,z,len*1e-2);
     moveto( x-vx*len, y-vy*len, z-vz*len); lineto( x+vx*len, y+vy*len, z+vz*len);
     
     // Move
     f = 1000*dt;
     px[i] += vx*f;
     py[i] += vy*f;
     pz[i] += vz*f;
  }
  
  // Draw poles
  for(i=0; i<MAXPOLES; i++)
  {
    if( polarity[i] > 0 ) setcol(255,0,0); else setcol(0,0,255);
    drawsph(poleX[i], poleY[i], poleZ[i], poleRadi);
  }
  
  // A floor of spheres so we can orient ourselves easier...
  setcol(64,64,64);
  for(i=-worldSiz; i<worldSiz; i++)
    for(j=-worldSiz; j<worldSiz; j++)
      drawsph(i,-worldSiz,j,poleRadi);
      
  playercontrols();
}

random(lo,hi)
{
   range = hi-lo;
   return lo + rnd*range;
}

randPointOnSphere(radius,&x,&y,&z) {
  z = random(-radius, radius);
  radius_sq = radius * radius;
  zsq = z * z;
  theta = random(0, 2*PI);
  x = sqrt(radius_sq - zsq) * cos(theta);
  y = sqrt(radius_sq - zsq) * sin(theta);
}

/////////// CAM
// Camera and movement code taken from /games/
//Handle input and player movement
playercontrols()
{
   static posx = 0;
   static posy = 0;
   static posz = -50;
   static posh = 3.14; // left right
   static posv = -3.14;
   static mat[9]; 

   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

   f = .1;
   if (keystatus[0x2a]) f /= 4;
   if (keystatus[0x36]) f *= 4;
   vx = (keystatus[32]-keystatus[30])*f; //D-A
   vy = (keystatus[17]-keystatus[31])*f; //W-S  
   vz = 0;//(keystatus[0x52]-keystatus[0x9d])*f; //KP0-RCtrl
   
   
   ang2mat(posh,posv,mat); // Convert angles to rotation matrix
   
   // find new position
   posx += mat[0]*vx + mat[3]*vz + mat[6]*vy;
   posy += mat[1]*vx + mat[4]*vz + mat[7]*vy;
   posz += mat[2]*vx + mat[5]*vz + mat[8]*vy; 
   // mousespeed values are tweaked for 60 fps
   mouseSpeedX = (mousx - oldMouseX) * 0.01;
   mouseSpeedY = (mousy - oldMouseY) * 0.01;
   oldMouseX = mousx;
   oldMouseY = mousy;
   if(bstatus==1)
   {
      posh -= mouseSpeedX;
      posv += mouseSpeedY;
   }
   // Right,down,forwards unit vectors.
   setcam(posx,posy,posz,
          mat[0],mat[1],mat[2],
          mat[3],mat[4],mat[5],
          mat[6],mat[7],mat[8]);
}
/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}

lerp(a,b,t){ return a*(1-t)+b*t; }