/*
   // LAST UPDATED 22 november 2010, Torbjoern Haugen
   // bug: sometimes start and/or goal are spawned inside a block... even to spawner should find
   // an EMPTY_SPACE place for 'em!?
*/

// Camerea
static posx = 5;
static posy = 25;
static posz = 15;
static posh = 0; // left right
static posv = -2.0;
// eof camera

enum{NODES_WIDE = 15}

enum{white=0,gray=1,black=2}; // vertex states 
struct Node{
   x,y,z,xInt,yInt,zInt,closed,state,cost;
};
enum{MAX_NODER = NODES_WIDE*NODES_WIDE*NODES_WIDE }
static GRAPH[MAX_NODER][MAX_NODER]; // countains NxN indexes into nodeList[]

static Node nodeList[MAX_NODER];
static nodeRadi = .25;
static predecessorList[MAX_NODER];

// "class" stack
   enum{MAX_STACKS=1, MAX_ELEMENTS=1000}
   static stackarray[MAX_STACKS][MAX_ELEMENTS];
   static stackcount[MAX_STACKS];
   static activestack = 0;
   
static startnode = 0;
static goalnode = 1;
static foundgoal = 0;

static world[NODES_WIDE][NODES_WIDE][NODES_WIDE];
static colorTable[3];
static blockSiz;
static EMPTY_SPACE = 0;


static time;

static dummytex[2][2];
()
{
   dummytex[0][0] = rgb(255,255,255);
   dummytex[0][1] = rgb(255,255,255);
   dummytex[1][0] = rgb(255,255,255);
   dummytex[1][1] = rgb(255,255,255);
   //glsettex(dummytex);
   glSetTex(dummytex,2,2);

   // Setup:
   colorTable[0] = rgb(128,128,128);   
   colorTable[1] = rgb(255,0,0);
   colorTable[2] = rgb(0,0,255);

   scroll = rnd*4;
   frequency = 1;
   for(i=0; i<NODES_WIDE; i++)
   for(j=0; j<NODES_WIDE; j++)
   for(k=0; k<NODES_WIDE; k++)
   {
      //val = 1+noise( scroll+ frequency*i/NODES_WIDE, scroll + frequency*j/NODES_WIDE, scroll +frequency*k/NODES_WIDE);
      //val = clamp(val,0,1);
      
      val = funky3Dshape(-1+2*i/NODES_WIDE,-1+2*j/NODES_WIDE,-1+2*k/NODES_WIDE);
      val = clamp(val,0,1);
      world[i][j][k] = int(val); // importante to round to int
      
   }
   
   interval = 200;
   blockSiz = interval/(NODES_WIDE^2);

   genGraph();       
   resetSearch();
   randomizeStartGoal();
   
   glEnable(GL_DEPTH_TEST); // take care in what you paint over!
   //glCullFace(GL_NONE); // wanna se backfaces too!
   glCullFace(GL_BACK);

   

   while(1)
   {
      time = klock(0);
      cls(0); clz(1e32);
      //setcam(20,20,-25,0,0);
      playercontrols();
      updateGfx();
      userinput();
      refresh();
   }
}

funky3Dshape(x,y,z)
{
   x2 = x+1;
   y2 = y+1;
   z2 = z+1;
   
   freq = 6;
   scoll = rnd*2;
   v = NODES_WIDE*.25*noise(scoll+freq*x2, scoll+freq*y2, freq*z2);
   
   distCenter = x^2+y^2+z^2;
   if(distCenter > v/2) return 0;
   v = v*distCenter;
   return v > 0;
}

clamp(val, x1, x2)
{
 return min( x2, max(x1,val));
}

genGraph(){      
      for(i=0; i<MAX_NODER; i++)
      for(j=0; j<MAX_NODER; j++)
      {
         GRAPH[i][j] = 0;
      }

      for(z=0; z<NODES_WIDE; z++)
      for(y=0; y<NODES_WIDE; y++)
      for(x=0; x<NODES_WIDE; x++)
      {
         id = z*NODES_WIDE*NODES_WIDE + y*NODES_WIDE + x;
         xpos = blockSiz*x+blockSiz/2;
         ypos = blockSiz*y+blockSiz/2;
         zpos = blockSiz*z+blockSiz/2;
         nodeList[id].x = xpos; nodeList[id].y = ypos; nodeList[id].z = zpos;
         nodeList[id].xInt = x; nodeList[id].yInt = y; nodeList[id].zInt = z;
      }

      // Rask!
      for(z=0; z<NODES_WIDE; z++)
      for(y=0; y<NODES_WIDE; y++)
      for(x=0; x<NODES_WIDE; x++)
      {   
         id = z*NODES_WIDE*NODES_WIDE + y*NODES_WIDE + x;
 
         if( world[x][y][z] == EMPTY_SPACE )
         {

            if( x > 0 )
            {
               if( world[x-1][y][z] == EMPTY_SPACE ){
                toNode = z*NODES_WIDE*NODES_WIDE + y*NODES_WIDE+(x-1);
                GRAPH[id][toNode] = 1;
                GRAPH[toNode][id] = 1;
               }
            }
                        
            if( y > 0 )
            {
               if( world[x][y-1][z] == EMPTY_SPACE ){
                toNode = z*NODES_WIDE*NODES_WIDE + (y-1)*NODES_WIDE+(x);
                GRAPH[id][toNode] = 1;
                GRAPH[toNode][id] = 1; 
               }
            }
            
            if( z > 0 )
            {
               if( world[x][y][z-1] == EMPTY_SPACE ){
                toNode = (z-1)*NODES_WIDE*NODES_WIDE + (y)*NODES_WIDE+(x);
                GRAPH[id][toNode] = 1;
                GRAPH[toNode][id] = 1; 
               }
            }
            
            // SUPERFLOUS? TODO
            /*
            if( x < NODES_WIDE-1 )
            {
               if( world[x+1][y][z] == EMPTY_SPACE ){
                toNode = z*NODES_WIDE*NODES_WIDE + y*NODES_WIDE+(x+1);
                GRAPH[id][toNode] = 1;
                GRAPH[toNode][id] = 1;
               }
            }
            if( y < NODES_WIDE-1 )
            {
               if( world[x][y+1][z] == EMPTY_SPACE ){
                toNode = z*NODES_WIDE*NODES_WIDE + (y+1)*NODES_WIDE+(x);
                GRAPH[id][toNode] = 1;
                GRAPH[toNode][id] = 1; 
               }
            }
            
            if( z < NODES_WIDE-1 )
            {
               if( world[x][y][z+1] == EMPTY_SPACE ){
                toNode = (z+1)*NODES_WIDE*NODES_WIDE + (y)*NODES_WIDE+(x);
                GRAPH[id][toNode] = 1;
                GRAPH[toNode][id] = 1; 
               }
            }
            */

         } 
      }

      
}


dijkstra(start, goal)
{
 nodeList[start].cost = 0;
 push( start ); 

 while(stackCount[0] != -1){
  sortStack();
  v = pop();
  nodeList[v].state = BLACK;
  if( v == goal ) return v; // return goal
  addNeighboursToStack(v);
 }
}

addNeighboursToStack(v)
{
   for(i=0; i<MAX_NODER; i++){  // find v's neighbours.
      if(i==v)continue;
            

      if(GRAPH[v][i] == 1 || GRAPH[i][v] == 1)
      {            
         if(nodeList[i].closed==0 && nodeList[i].state == WHITE){
            nodeList[i].state = GRAY;   
            push(i); // push onto open

      //dx = nodeList[i].x - nodeList[startNode].x;
      //dy = nodeList[i].y - nodeList[startNode].y;
      //nodeList[i].cost = ( dx*dx + dy*dy );
      //nodeList[sortMe].cost = distanceManhattan(sortMe,goalNode);            
            newCost = nodeList[v].cost + 1; // rutenett. kost alltid 1 mellom noder
            if( newCost < nodeList[i].cost )
            {
               nodeList[i].cost = newCost;
               predecessorList[i] = v; 
            }
           

         }
      }
   }

}


// \breif Make all nodes unvisited at clear their costs
resetSearch(){    
   foundGoal = 0;
   for(i=0; i<MAX_NODER; i++){
      nodeList[i].closed = 0; 
      nodeList[i].cost=1e32; // Dijkstra, set cost to inf initially
      nodeList[i].state = WHITE; 
   }
   clearstack();
}

updateGfx(){
   setcol(0x777777); setfont(6,8);
   
   drawWorldMap();
   setcol(255,255,0);
   
   sizPump = (1+sin(5*time))/2 * blockSiz/2;   

   drawsph( nodeList[goalNode].x, nodeList[goalNode].y, nodeList[goalNode].z, blockSiz/2 + sizPump );
   setcol(0,0,255);
   drawsph( nodeList[startNode].x, nodeList[startNode].y, nodeList[startNode].z, blockSiz/2 + sizPump );
      
   // Draw Graph, expensive
   if(0)
   {
   setcol(255,127,127);
   for(i = 0; i<MAX_NODER; i++){
      for(j=0; j<MAX_NODER; j++){
         if( i==j ) continue;
         
         if(GRAPH[i][j] == 1 || GRAPH[j][i] == 1){
            moveto( nodeList[i].x, nodeList[i].y, nodeList[i].z ); 
            lineto( nodeList[j].x, nodeList[j].y, nodeList[j].z );
         } 
      }  
   }
   }
   
   for(i = 0; i<MAX_NODER; i++){
      //drawNode(i);
   }
   
   
   if(foundGoal==1) showPath();
   
   setfont(6,8);
   setcol(0xffffff);
   moveto(0,yres/2);
   //showStack();


   setfont(12,18,1);
   tx = nodeRadi/2;
   //i=goalNode; { setcol(0xffff00); moveto(nodeList[i].x+cos(time*6)*nodeRadi-tx*2,nodeList[i].y-5+sin(time*6)*nodeRadi );printf("GOAL!"); }
   //i=startNode;{ setcol(0x00ff00); moveto(nodeList[i].x+cos(time*3)*nodeRadi-tx*3,nodeList[i].y-5+sin(time*3)*nodeRadi );printf("START!"); }
   setfont(6,8); 

   refresh();
}

drawWorldMap()
{
   siz = blockSiz*.5;
   sizh = siz*.5;
   for(i=0; i<NODES_WIDE; i++)
   for(j=0; j<NODES_WIDE; j++)
   for(k=0; k<NODES_WIDE; k++)
   {
      
      blockCol = colorTable[ world[i][j][k] ];

      //if( nodeList[goalNode].xInt == i && nodeList[goalNode].yInt == j && nodeList[goalNode].zInt == k )
      {
        // blockCol = rgb(255,255,0);
      }
      //if( nodeList[startNode].xInt == i && nodeList[startNode].yInt == j && nodeList[startNode].zInt == k )
      {
        // blockCol = rgb(0,0,255);
      }
      
      // empty space and not goal or start? then dont draw
      if( blockCol == colorTable[0] ) continue;
      

      if( blockCol > 0 )
      {
         //setcol( blockCol );
         setcol( 2*(i/NODES_WIDE-.5) * 128 + 128, 2*(j/NODES_WIDE-.5) * 128 + 128, 2*(k/NODES_WIDE-.5) * 128 + 128 );
         x = i*blockSiz;
         y = j*blockSiz;
         z = k*blockSiz;
         //cube(x,y,z,siz);
         cube(x+siz,y+siz,z+siz,siz);
      }
   }
  
}

randomizeStartGoal()
{
      do{
      isFreeStart = 0;
      isFreeGoal = 0;
      x1 = int( NODES_WIDE * rnd );
      y1 = int( NODES_WIDE * rnd );
      z1 = int( NODES_WIDE * rnd );
      startNode = z1 * NODES_WIDE*NODES_WIDE + y1*NODES_WIDE + x1;

      if( world[x1][y1][z1] == EMPTY_SPACE ) isFreeStart = 1;

      x2 = int( NODES_WIDE * rnd );
      y2 = int( NODES_WIDE * rnd );
      z2 = int( NODES_WIDE * rnd );
      goalNode = z2 * NODES_WIDE*NODES_WIDE + y2*NODES_WIDE + x2;
      
      if( world[x2][y2][z2] == EMPTY_SPACE ) isFreeGoal = 1;
   
      

      }while( isFreeGoal==0 && isFreeStart==0 );
}

userInput()
{

   if( keystatus[3] ) // 2!
   {
      
      keystatus[3] = 0;
      resetSearch(); // why does it go fubar without?
      randomizeStartGoal();
   }

   
   if( keystatus[2] ) // key 1
   {
      keystatus[2] = 0;

      resetSearch();    
      genGraph();
   }
   
   // spacebar
   if(keystatus[57] == 1 ){
      //genGraph(); // expensive
      keystatus[57] = 0;
      resetSearch();
      
      res = dijkstra(startnode, goalnode);
      if(res==goalnode){foundgoal=1; }
   }
   
    
   
}


/*
showStack(){
   setcol(0xffffff);
   printf("\n\nstackdata:");
   for(i=stackCount[activeStack]; i>-1; i--){
      
      nodeIndex = stackarray[activeStack][i];
      
      if(i==stackCount[0]){
         setcol(0xffffff); printf("\nstack[%g] = node[%g], cost= %.2f <--- TOP", i, nodeIndex, nodeList[nodeIndex].cost );
         setcol(0xff0000); drawsph(nodeList[nodeIndex].x, nodeList[nodeIndex].y, -nodeRadi-3);
      }
      else{
         setcol(0xffffff); printf("\nstack[%g] = node[%g], cost = %.2f", i, nodeIndex, nodeList[nodeIndex].cost );
         setcol(0xff0000); drawsph(nodeList[nodeIndex].x, nodeList[nodeIndex].y, -nodeRadi-3);
      }
   }
   
}
printPath(){
   if( !foundGoal ) return;
   printf("\nSti mellom start og\nmaal tilstand:");
   printMe = goalnode;
   ox = nodeList[printMe].x;
   oy = nodeList[printMe].y;
   
   while(printMe != startnode){
      pred = predecessorList[printMe];
      setcol(0xffffff); printf("\nforgjenger[%g] = %g",printMe,pred);
      printMe = pred;
   }
}
*/

showPath(){  
   if( !foundGoal ) return;
   showMe = goalnode;
   ox = nodeList[showMe].x;
   oy = nodeList[showMe].y;
   oz = nodeList[showMe].z;
   while(showMe != startnode){
      showMe = predecessorList[showMe]; // get next from pred list
      setcol(0x00ff00); drawcone(ox,oy,oz,.2,nodeList[showMe].x,nodeList[showMe].y,nodeList[showMe].z,.2);
      ox = nodeList[showMe].x;
      oy = nodeList[showMe].y;
      oz = nodeList[showMe].z;
   }
}

drawNode(i){
   tx = nodeRadi / 1.3;
   xp = nodeList[i].x;
   yp = nodeList[i].y;
   zp = nodeList[i].z;
   //moveto( nodeList[i].x-tx, nodeList[i].y-15);
   
   f = nodeList[i].cost;
   
   if(nodeList[i].state == BLACK ){
      setcol(0x0); drawsph(xp,yp,zp,nodeRadi); 
   } else if(nodeList[i].state == GRAY ){
      setcol(0x777777); drawsph( xp,yp,zp, nodeRadi); 
   } else if(nodeList[i].state == WHITE ){
      setcol(255,255,255); drawsph( xp,yp,zp, nodeRadi); 
   }

   if( i == goalNode )
   {
      setcol(255,0,0); drawsph( xp,yp,zp, 3*nodeRadi); 
   }
   if( i == startNode )
   {
      setcol(0,0,255); drawsph( xp,yp,zp, 3*nodeRadi);
   }

   //setfont(4,6);
   //setcol(0,0,255);
   //printf("%g\n",nodeList[i].cost);
   //printf("%g\n",i);
   //printf("%g, %g",nodeList[i].xInt, nodeList[i].yInt);

}

distanceManhattan(a,b){
      ax=nodeList[a].xInt;
      ay=nodeList[a].yInt;
      az=nodeList[a].zInt;
      
      bx=nodeList[b].xInt;
      by=nodeList[b].yInt;
      bz=nodeList[b].zInt;
      
      manhattan=0;
      
      // diagonal 
      if( abs(ax-bx)==1 && abs(ay-by)==1 && abs(az-bz)==1 )
      {
         manhattan+=14;
      }
      else
      {
         manhattan = 10;
      }   
       dist =  abs(ax-bx) + abs(ay-by) + abs(az-bz);
      return manhattan * dist;
}

sortStack(){
   static iOrder[MAX_ELEMENTS];
   static iData[MAX_ELEMENTS];
   numitems = stackCount[activeStack]; // minus one, or else we use empty pos
   
   for(i=0; i<numitems; i++){ // set initial order, save data
      iOrder[i] = i; 
      sortMe = stackArray[activeStack][i];
      iData[i] = sortMe; // data is node. // data to be moved to sorted pos.
   }

   for(i=1; i<numitems; i++){
      for(j=0; j<i; j++){
         // index data with new order AND get node index
         nodePtr_i = iData[ iOrder[i] ]; 
         nodePtr_j = iData[ iOrder[j] ];
         
         // comparison crit is node's F-value.
         if( nodeList[ nodePtr_i ].cost > nodeList[ nodePtr_j ].cost ) // is one ahead larger? swap. -> desc. NO. want ascending. goto shortest dist. //descending
         {
            t = iOrder[i]; iOrder[i] = iOrder[j]; iOrder[j] = t;
         }
      }
   }
   for(i=0; i<numitems; i++){
      stackArray[activeStack][i] = iData[ iOrder[i] ]; // write node value back, now sorted by nodeG[]
   }
}

clearStack(){
   for(i=0; i<stackcount[activestack]+1; i++)
   {
      stackarray[activestack][i] = 0;
   }
   stackcount[activestack] = 0;   
}

push(x){
   stackarray[activestack][stackcount[activestack]] = x;
   stackcount[activestack]++;
}

popFront(){
   val = stackarray[activestack][0];
   for(i=0; i<stackcount[activestack]; i++)
   {
      stackarray[activestack][i] = stackarray[activestack][i+1]; //overwrite current with next
   }
   stackcount[activestack]--;
   return val;
}

pop(){
   stackcount[activestack]--;
   return stackarray[activestack][stackcount[activestack]];
}

drawrectfill(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }


// camera

// Camera and movement code taken from /games/
//Handle input and player movement
playercontrols()
{
   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

   f = 1;
   if (keystatus[0x2a]) f /= 4;
   if (keystatus[0x36]) f *= 4;
   vx = (keystatus[32]-keystatus[30])*f; //D-A
   vy = (keystatus[17]-keystatus[31])*f; //W-S  
   vz = 0;//vz = (keystatus[0x52]-keystatus[0x9d])*f; //KP0-RCtrl
   
   static mat[9]; 
   ang2mat(posh,posv,mat); // Convert angles to rotation matrix
   
   // find new position
   posx += mat[0]*vx + mat[3]*vz + mat[6]*vy;
   posy += mat[1]*vx + mat[4]*vz + mat[7]*vy;
   posz += mat[2]*vx + mat[5]*vz + mat[8]*vy; 
   // mousespeed values are tweaked for 60 fps
   mouseSpeedX = (mousx - oldMouseX) * 0.01;
   mouseSpeedY = (mousy - oldMouseY) * 0.01;
   oldMouseX = mousx;
   oldMouseY = mousy;
   if(bstatus==1)
   {
      posh -= mouseSpeedX;
      posv += mouseSpeedY;
   }
   // Right,down,forwards unit vectors.
   setcam(posx,posy,posz,
          mat[0],mat[1],mat[2],
          mat[3],mat[4],mat[5],
          mat[6],mat[7],mat[8]);
}
/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}

cube(x,y,z,siz)
{
//setcol(512,512,512);
radius = 0;
glBegin(GL_QUADS); 

 glTexCoord(0,0); glVertex(x-siz,y-siz,z-siz-radius);
 glTexCoord(1,0); glVertex(x+siz,y-siz,z-siz-radius);
 glTexCoord(1,1); glVertex(x+siz,y+siz,z-siz-radius);
 glTexCoord(0,1); glVertex(x-siz,y+siz,z-siz-radius);

 glTexCoord(0,0); glVertex(x-siz-radius,y-siz,z+siz);
 glTexCoord(1,0); glVertex(x-siz-radius,y-siz,z-siz);
 glTexCoord(1,1); glVertex(x-siz-radius,y+siz,z-siz);
 glTexCoord(0,1); glVertex(x-siz-radius,y+siz,z+siz);

 glTexCoord(0,0); glVertex(x-siz,y-siz-radius,z+siz);
 glTexCoord(1,0); glVertex(x+siz,y-siz-radius,z+siz);
 glTexCoord(1,1); glVertex(x+siz,y-siz-radius,z-siz);
 glTexCoord(0,1); glVertex(x-siz,y-siz-radius,z-siz);

 glTexCoord(0,0); glVertex(x+siz,y-siz,z+siz+radius);
 glTexCoord(1,0); glVertex(x-siz,y-siz,z+siz+radius);
 glTexCoord(1,1); glVertex(x-siz,y+siz,z+siz+radius);
 glTexCoord(0,1); glVertex(x+siz,y+siz,z+siz+radius);

 glTexCoord(0,0); glVertex(x+siz+radius,y-siz,z-siz);
 glTexCoord(1,0); glVertex(x+siz+radius,y-siz,z+siz);
 glTexCoord(1,1); glVertex(x+siz+radius,y+siz,z+siz);
 glTexCoord(0,1); glVertex(x+siz+radius,y+siz,z-siz);

 glTexCoord(0,0); glVertex(x-siz,y+siz+radius,z-siz);
 glTexCoord(1,0); glVertex(x+siz,y+siz+radius,z-siz);
 glTexCoord(1,1); glVertex(x+siz,y+siz+radius,z+siz);
 glTexCoord(0,1); glVertex(x-siz,y+siz+radius,z+siz);

glEnd();
}

cubenoTex(x,y,z,siz)
{
setcol(512,512,512);
radius = 0;
glBegin(GL_QUADS); 

 glVertex(x-siz,y-siz,z-siz-radius);
 glVertex(x+siz,y-siz,z-siz-radius);
 glVertex(x+siz,y+siz,z-siz-radius);
 glVertex(x-siz,y+siz,z-siz-radius);

 glVertex(x-siz-radius,y-siz,z+siz);
 glVertex(x-siz-radius,y-siz,z-siz);
 glVertex(x-siz-radius,y+siz,z-siz);
 glVertex(x-siz-radius,y+siz,z+siz);

 glVertex(x-siz,y-siz-radius,z+siz);
 glVertex(x+siz,y-siz-radius,z+siz);
 glVertex(x+siz,y-siz-radius,z-siz);
 glVertex(x-siz,y-siz-radius,z-siz);

 glVertex(x+siz,y-siz,z+siz+radius);
 glVertex(x-siz,y-siz,z+siz+radius);
 glVertex(x-siz,y+siz,z+siz+radius);
 glVertex(x+siz,y+siz,z+siz+radius);

 glVertex(x+siz+radius,y-siz,z-siz);
 glVertex(x+siz+radius,y-siz,z+siz);
 glVertex(x+siz+radius,y+siz,z+siz);
 glVertex(x+siz+radius,y+siz,z-siz);

 glVertex(x-siz,y+siz+radius,z-siz);
 glVertex(x+siz,y+siz+radius,z-siz);
 glVertex(x+siz,y+siz+radius,z+siz);
 glVertex(x-siz,y+siz+radius,z+siz);

glEnd();
}