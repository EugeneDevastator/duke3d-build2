/*
   // LAST UPDATED 22 november 2010, Torbjoern Haugen
*/

enum{NODES_WIDE = 8}

enum{white=0,gray=1,black=2}; // vertex states 
struct Node{
   x,y,xInt,yInt,state,cost;
};
enum{MAX_NODER = NODES_WIDE*NODES_WIDE }
static GRAPH[MAX_NODER][MAX_NODER]; // countains NxN indexes into nodeList[]

static Node nodeList[MAX_NODER];
static nodeRadi = 3;
static predecessorList[MAX_NODER];

// "class" stack
   enum{MAX_STACKS=1, MAX_ELEMENTS=1000}
   static stackarray[MAX_STACKS][MAX_ELEMENTS];
   static stackcount[MAX_STACKS];
   static activestack = 0;
   
static startnode = 0;
static goalnode = 1;
static foundgoal = 0;

static world[NODES_WIDE][NODES_WIDE];
static colorTable[3];
static blockSiz;
static EMPTY_SPACE = 0;
static margin = 50;

static time;
()
{
   // Setup:
   colorTable[0] = rgb(128,128,128);   
   colorTable[1] = rgb(255,0,0);
   colorTable[2] = rgb(0,0,255);

   scroll = rnd*4;
   frequency = 2;
   for(i=0; i<NODES_WIDE; i++)
   for(j=0; j<NODES_WIDE; j++)
   {
      val = 1+noise( scroll+ frequency*i/NODES_WIDE, scroll + frequency*j/NODES_WIDE);
      val = clamp(val,0,1);
      world[i][j] = int(val); // importante
      
   }
   
   interval = min(xres,yres)-2*margin;
   blockSiz = interval/NODES_WIDE;

   genGraph();       
   resetSearch();
   
   while(1)
   {
      time = klock(0);
      cls(0);
      drawsph(mousx,mousy,10);
      updateGfx();
      userinput();
      refresh();
   }
}

clamp(val, x1, x2)
{
 return min( x2, max(x1,val));
}

genGraph(){      
      for(i=0; i<MAX_NODER; i++)
      for(j=0; j<MAX_NODER; j++)
      {
         GRAPH[i][j] = 0;
      }

      for(y=0; y<NODES_WIDE; y++)
      for(x=0; x<NODES_WIDE; x++)
      {
         id = y*NODES_WIDE + x;
         xpos = margin + blockSiz*x+blockSiz/2;
         ypos = margin + blockSiz*y+blockSiz/2;
         nodeList[id].x = xpos; nodeList[id].y = ypos;
         nodeList[id].xInt = x; nodeList[id].yInt = y;
      }

      // Rask!
      for(y=0; y<NODES_WIDE; y++)
      for(x=0; x<NODES_WIDE; x++)
      {   
         id = y*NODES_WIDE + x;
 
         if( world[x][y] == EMPTY_SPACE )
         {

            if( x > 0 )
            {
               if( world[x-1][y] == EMPTY_SPACE ){
                toNode = y*NODES_WIDE+(x-1);
                GRAPH[id][toNode] = 1;
                GRAPH[toNode][id] = 1;
               }
            }
            
            if( y > 0 )
            {
               if( world[x][y-1] == EMPTY_SPACE ){
                toNode = (y-1)*NODES_WIDE+(x);
                GRAPH[id][toNode] = 1;
                GRAPH[toNode][id] = 1; 
               }
            }
  

         } 
      }
}

makeNode(i,x,y){
   nodeList[i].x = x; nodeList[i].y = y;
}

dijkstra(start, goal)
{
 nodeList[start].cost = 0;
 push( start ); 

 while(stackCount[0] != -1){
  sortStack();
  v = pop();
  nodeList[v].state = BLACK; // sett inn i closed list
  if( v == goal ) return v; // return goal
  addNeighboursToStack(v);
 }
}

addNeighboursToStack(v)
{
   for(i=0; i<MAX_NODER; i++){  // find v's neighbours.
      if(i==v)continue;
            

      if(GRAPH[v][i] == 1 || GRAPH[i][v] == 1)
      {            
         if(nodeList[i].state == WHITE){
            nodeList[i].state = GRAY;   
            push(i); // push onto open
               
            newCost = nodeList[v].cost + 1; // rutenett. kost alltid 1 mellom noder
                  
            if( newCost < nodeList[i].cost )
            {
               nodeList[i].cost = newCost;
               predecessorList[i] = v; 
            }        

         }
      }
   }
}


// \breif Make all nodes unvisited at clear their costs
resetSearch(){    
   foundGoal = 0;
   for(i=0; i<MAX_NODER; i++){
      nodeList[i].cost=1e32; // Dijkstra, set cost to inf initially
      nodeList[i].state = WHITE; 
   }
   clearstack();
}

updateGfx(){
   setcol(0x777777); setfont(6,8);
   
   drawWorldMap();
   
   // Draw Graph, expensive
   if(1)
   {
   setcol(255,127,127);
   for(i = 0; i<MAX_NODER; i++){
      for(j=0; j<MAX_NODER; j++){
         if( i==j ) continue;
         
         if(GRAPH[i][j] == 1 || GRAPH[j][i] == 1){
            moveto( nodeList[i].x, nodeList[i].y ); lineto( nodeList[j].x, nodeList[j].y );
         } 
      }  
   }
   }
   
   if(foundGoal==1) showPath();
   
   for(i = 0; i<MAX_NODER; i++){
      drawNode(i);
   }
   
 
   
   setfont(6,8);
   setcol(0xffffff);
   moveto(0,yres/2);
   //showStack();


   setfont(12,18,1);
   tx = nodeRadi/2;
   i=goalNode; { setcol(0xffff00); moveto(nodeList[i].x+cos(time*6)*nodeRadi-tx*2,nodeList[i].y-5+sin(time*6)*nodeRadi );printf("GOAL!"); }
   i=startNode;{ setcol(0x00ff00); moveto(nodeList[i].x+cos(time*3)*nodeRadi-tx*3,nodeList[i].y-5+sin(time*3)*nodeRadi );printf("START!"); }
   setfont(6,8); 

   refresh();
}

drawWorldMap()
{
   siz = blockSiz-3;
   for(i=0; i<NODES_WIDE; i++)
   for(j=0; j<NODES_WIDE; j++)
   {
      blockCol = colorTable[ world[i][j] ];

      if( nodeList[goalNode].xInt == i && nodeList[goalNode].yInt == j )
      {
         blockCol = rgb(255,255,0);
      }
      if( nodeList[startNode].xInt == i && nodeList[startNode].yInt == j )
      {
         blockCol = rgb(255,255,255);
      }

      if( blockCol > 0 )
      {
         setcol( blockCol );
         x = margin+i*blockSiz;
         y = margin+j*blockSiz;
         drawrectfill( ceil(1+x), ceil(1+y), ceil(x+siz), ceil(y+siz) );
      }
   }
  
}

userInput()
{
   pickX = (-margin+mousx) / blockSiz;
   pickY = (-margin+mousy) / blockSiz; 
   if( keystatus[3] == 0 && bstatus == 1 )
   {
      world[pickX][pickY] = 1; 
   }
   if( keystatus[3] == 0 &&  bstatus == 2 )
   {
      world[pickX][pickY] = 2;   
   }
   if( keystatus[4] == 1 )
   {
      world[pickX][pickY] = 0;   
   }
   
   if( keystatus[2] )
   {
      keystatus[2] = 0;

      resetSearch();    
      genGraph();
   }
   
   // spacebar
   if(keystatus[57] == 1 ){
      genGraph(); // expensive
      keystatus[57] = 0;
      resetSearch();
      
      res = dijkstra(startnode, goalnode);
      if(res==goalnode){foundgoal=1; }
   }
   
   if(keystatus[3] && bstatus == 1){
      resetSearch();
      goalnode = nodeClosestToMouse();
   }   


   if(keystatus[3] && bstatus == 2){
      resetSearch();
      startnode = nodeClosestToMouse();
   }
    
   
}

nodeClosestToMouse(){
   minDist = 1e32;
   closest = -1;
   
   for(i = 0; i<MAX_NODER; i++){
      dist = ((mousx-nodeList[i].x)^2 + (mousy-nodeList[i].y)^2 ); // < nodeRadi^2;
      if( dist < minDist ){
         minDist = dist;
         closest = i;  
      }
   }
   return closest;
}

/*
showStack(){
   setcol(0xffffff);
   printf("\n\nstackdata:");
   for(i=stackCount[activeStack]; i>-1; i--){
      
      nodeIndex = stackarray[activeStack][i];
      
      if(i==stackCount[0]){
         setcol(0xffffff); printf("\nstack[%g] = node[%g], cost= %.2f <--- TOP", i, nodeIndex, nodeList[nodeIndex].cost );
         setcol(0xff0000); drawsph(nodeList[nodeIndex].x, nodeList[nodeIndex].y, -nodeRadi-3);
      }
      else{
         setcol(0xffffff); printf("\nstack[%g] = node[%g], cost = %.2f", i, nodeIndex, nodeList[nodeIndex].cost );
         setcol(0xff0000); drawsph(nodeList[nodeIndex].x, nodeList[nodeIndex].y, -nodeRadi-3);
      }
   }
   
}
printPath(){
   if( !foundGoal ) return;
   printf("\nSti mellom start og\nmaal tilstand:");
   printMe = goalnode;
   ox = nodeList[printMe].x;
   oy = nodeList[printMe].y;
   
   while(printMe != startnode){
      pred = predecessorList[printMe];
      setcol(0xffffff); printf("\nforgjenger[%g] = %g",printMe,pred);
      printMe = pred;
   }
}
*/

showPath(){  
   if( !foundGoal ) return;
   showMe = goalnode;
   ox = nodeList[showMe].x;
   oy = nodeList[showMe].y;
   while(showMe != startnode){
      showMe = predecessorList[showMe]; // get next from pred list
      setcol(0x00ff00); drawcone(ox,oy,2,nodeList[showMe].x,nodeList[showMe].y,2);
      ox = nodeList[showMe].x;
      oy = nodeList[showMe].y;
   }
}

drawNode(i){
   tx = nodeRadi / 1.3;
   xp = nodeList[i].x;
   yp = nodeList[i].y;
   moveto( nodeList[i].x-tx, nodeList[i].y-15);
   
   f = nodeList[i].cost;
   
   if(nodeList[i].state == BLACK ){
      setcol(0); drawsph(xp,yp,nodeRadi); 
      setcol(0xffffff); drawsph( xp,yp , -nodeRadi); 
   } else if(nodeList[i].state == GRAY ){
      setcol(0x777777); drawsph( xp,yp, nodeRadi); 
   } else if(nodeList[i].state == WHITE ){
      setcol(255,255,255); drawsph( xp,yp, nodeRadi); 
   }
   setfont(8,14);
   setcol(0,0,255);
   printf("%g\n",nodeList[i].cost);
   //printf("%g\n",i);
   //printf("%g, %g",nodeList[i].xInt, nodeList[i].yInt);

}

sortStack(){
   static iOrder[MAX_ELEMENTS];
   static iData[MAX_ELEMENTS];
   numitems = stackCount[activeStack]; // minus one, or else we use empty pos
   
   for(i=0; i<numitems; i++){ // set initial order, save data
      iOrder[i] = i; 
      sortMe = stackArray[activeStack][i];
      iData[i] = sortMe; // data is node. // data to be moved to sorted pos.
   }

   for(i=1; i<numitems; i++){
      for(j=0; j<i; j++){
         // index data with new order AND get node index
         nodePtr_i = iData[ iOrder[i] ]; 
         nodePtr_j = iData[ iOrder[j] ];
         
         // comparison crit is node's F-value.
         if( nodeList[ nodePtr_i ].cost > nodeList[ nodePtr_j ].cost ) // is one ahead larger? swap. -> desc. NO. want ascending. goto shortest dist. //descending
         {
            t = iOrder[i]; iOrder[i] = iOrder[j]; iOrder[j] = t;
         }
      }
   }
   for(i=0; i<numitems; i++){
      stackArray[activeStack][i] = iData[ iOrder[i] ]; // write node value back, now sorted by nodeG[]
   }
}

clearStack(){
   for(i=0; i<stackcount[activestack]+1; i++)
   {
      stackarray[activestack][i] = 0;
   }
   stackcount[activestack] = 0;   
}

push(x){
   stackarray[activestack][stackcount[activestack]] = x;
   stackcount[activestack]++;
}

popFront(){
   val = stackarray[activestack][0];
   for(i=0; i<stackcount[activestack]; i++)
   {
      stackarray[activestack][i] = stackarray[activestack][i+1]; //overwrite current with next
   }
   stackcount[activestack]--;
   return val;
}

pop(){
   stackcount[activestack]--;
   return stackarray[activestack][stackcount[activestack]];
}

drawrectfill(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }
