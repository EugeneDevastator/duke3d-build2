/*
   // LAST UPDATED 25 march 2010, Torbjoern Haugen
   DONE list:
   -lage noder
   -flytte noder
   -lage edge's mellom noder
   -DFS
   -BFS
   -hillclimbing
   -best first
   -ASTAR
   -vise path
   -vse hoyde (hillclimb)
   -endre hoyde med mus
   
   TODO:
   -check for stackoverflow,underflow in push,pop
   -steppe seg igjennom algoritmen. pause search og returnere on user demand. 
   -slette en kant (edge) 
   
   -for naa kan man slette en nodes connections ved aa holde R nede og trykke.
   -fjerne noder ved aa holde T nede
   -lage nye ved aa holde Y nede
*/

enum{MAX_NODER = 1000};
static naboer[MAX_NODER][MAX_NODER];

// "class" node
enum{white=0,gray=1,black=2}; // vertex states 
   static nodex[MAX_NODER];
   static nodey[MAX_NODER];
   static nodeCol[MAX_NODER];
   static nodeClosed[MAX_NODER];

   // humz. har bytta på G og H
   static nodeG[MAX_NODER]; // exact dist to start
   static nodeH[MAX_NODER]; // heuristic dist to goal
   static nodeF[MAX_NODER]; // cost, F=G+H
   
   static vertexState[MAX_NODER]; // WHITE, GRAY, BLACK, not visit, visit, exhausted
   static numnodes = 0;
   static nodeRadi = 22;
   static path[MAX_NODER]; // points to parent
   static predecessorList[MAX_NODER];

// "class" stack
   enum{MAX_STACKS=1, MAX_ELEMENTS=1000}
   static stackarray[MAX_STACKS][MAX_ELEMENTS];
   static stackcount[MAX_STACKS];
   static activestack = 0;
   
// GOOEY GUI
static grabbedNode = -1;

static time = 0;

static startnode = 0;
static goalnode = 1;
static foundgoal = 0;

static nodesWide = 10;
static nodesHigh = 10;

// Make connections between nodes
static dragFrom;
static dragTo;
static creatingSingleConnection = 0;

static steppingEnabled = 0;
()
{
   // Setup:
   genSquareGraph();       
   resetSearch();
   
   while(1)
   {
      time = klock(0);
      updateGfx();
      input();
   }
}

astar(start,goal)
{
   if(start==goal) return start;
   currentNode = start;
   searchBest(currentNode); 
     
   while(stackCount[0] != -1){
      sortStackDescending();
      bestNode = pop();

      if(bestNode==goalnode){ 
         return goalnode;
      }
      else{  
         searchBest(bestNode); // find succesors
      }      
   }  
}

searchBest(v) // find succesors!
{
   nodeClosed[v] = 1;

   
   for(i=0; i<numnodes; i++){  // find v's neighbours.
      if(i==v)continue;
            

      if(naboer[v][i] == 1 || naboer[i][v] == 1)
      {
         //is closed and found better
         pred = predecessorList[i];
         newG = nodeG[pred] + distanceManhattan(i,startnode); //distance2D(nodex[i], nodey[i], nodex[startnode], nodey[startnode]);          
       //newG = nodeG[pred] + distance2D(nodex[i], nodey[i], nodex[startnode], nodey[startnode]);          

       
         if(nodeClosed[i]==1 && newG < nodeG[i] )
         {
            nodeG[i] = newG;
            predecessorList[i] = v;
         }
         // is open and found better
         else if(nodeClosed[i]==0 && (newG < nodeG[i]) && vertexstate[i] == GRAY){ // todo?
            nodeG[i] = newG;
            predecessorList[i] = v; 
         }
         else if(nodeClosed[i]==0 && vertexstate[i] == WHITE){ // not on closed and not on openlist. abusing vertexstate here
            vertexstate[i] = GRAY;   
            nodeH[i] = distance2D(nodex[i], nodey[i], nodex[goalnode], nodey[goalnode]);  // euclidian 2d distance
            nodeG[i] = nodeG[v] + distanceManhattan(i,startnode); //distance2D(nodex[i], nodey[i], nodex[startnode], nodey[startnode]);
            //nodeG[i] = nodeG[v] + distance2D(nodex[i], nodey[i], nodex[startnode], nodey[startnode]);

         predecessorList[i] = v; 
            push(i); // push onto open
         }
      }
   }
   
   if(steppingEnabled)
   {
      pause=1;
      while(pause)
      {
         if(keystatus[57]==1){
            keystatus[57]=0;
            steppingEnabled = 0; // disable if keyspace
            pause=0;
         }
         
         if(keystatus[31] == 1)
         {
            keystatus[31] = 0;
            pause=0;
         }
         
         updateGfx();
         input();
      }
   }
   
   updateGfx();
   //sleep(5);
   

   vertexstate[v] = BLACK; // done. set closed.
}

// Used for approx dist. Gcost
distanceManhattan(a,b){
      ax=0;
      ay=0;
      
      getNodeGridPos(a,ax,ay);
      
      bx=0;
      by=0;
      
      getNodeGridPos(b,bx,by);
      manhattan=0;
      
      // diagonal 
      if( abs(ax-bx)==1 && abs(ay-by)==1 )
      {
         manhattan=14;
      }
      else
      {
         manhattan = 10;
      }    
      dist =  abs(ax-bx) + abs(ay-by);
      return manhattan * dist; manhattan = 10;
}

distanceSq(x1,y1,x2,y2){
   return (x1-x2)^2 + (y1-y2)^2;
}


distance2d(x1,y1,x2,y2){
   return sqrt( (x1-x2)^2 + (y1-y2)^2 );
}

genSquareGraph(){

      separation = 1.8;   
      for(y=0; y<nodesWide; y++)
      for(x=0; x<nodesHigh; x++){
         makeNode( (xres/2-nodeRadi*nodesWide*separation)+x*nodeRadi*2*separation, (yres/2-nodeRadi*nodesHigh*separation)+y*nodeRadi*2*separation);
      }
      
      x = 0;
      y = 0;   
       
      for(i=0; i<numnodes;i++){
         // naboer[fra][til]
         thisNode = y*nodesHigh+x;
         if( x > 0 )      naboer[thisNode][(x-1)+y*nodesHigh] = 1; // hoyre
         if(x < nodesWide-1)          naboer[thisNode][(x+1)+y*nodesHigh] = 1; // venstre
         
         if(x < nodesWide)            naboer[thisNode][(x)+(y+1)*nodesHigh] = 1; // ned
         if(x < nodesWide && y > 1)   naboer[thisNode][(x)+(y-1)*nodesHigh] = 1; // opp
         
         if(x < nodesWide-1)          naboer[thisNode][(x+1)+(y+1)*nodesHigh] = 1; // hoyre og ned
         if(x > 0 && y < nodesHigh-1) naboer[thisNode][(x-1)+(y+1)*nodesHigh] = 1; // venstre og ned
         
         if(x < nodesWide-1 && y > 0) naboer[thisNode][(x+1)+(y-1)*nodesHigh] = 1; // hoyre og opp
         if(x > 0 && y > 0)           naboer[thisNode][(x-1)+(y-1)*nodesHigh] = 1; // venstre og opp
         
         x++;
         if(x>nodesWide-1){
            x=0;
            y++;
         }
    }
    
}

input(){
   // R
   if(keystatus[31] && steppingEnabled==0){
      keystatus[31] = 0;
      steppingEnabled = 1;
      //resetSearch();
      // begin hack, should really call resetSearch. doing this so i dont have to set steppingEnabled=0 on every key and mouse event.
      // could make a loop and check all... meh.
      foundGoal = 0;
      for(i=0; i<MAX_NODER; i++){
         nodeClosed[i] = 0; 
         vertexState[i] = WHITE; 
         nodeG[i] = 0;
         nodeH[i] = 0;
      }
      clearstack(); 
      // end hack
      
      
      res = astar(startnode,goalnode);
      if(res==goalnode){foundgoal=1; }
   }

   // spacebar
   if(keystatus[57] == 1 ){
      keystatus[57] = 0;
      resetSearch();
      res = astar(startnode,goalnode);
      if(res==goalnode){foundgoal=1; }
   }
   
   if(keystatus[19] == 1 && bstatus == 1)
   {
      bstatus = 0;
      node = nodeClosestToMouse();
      for(i=0; i<numnodes; i++)
      {
         naboer[node][i] = 0;
         naboer[i][node] = 0;
      }
      
   }
   
   if(keystatus[20] == 1 && bstatus == 1) // press T to reconnect
   {
      bstatus = 0;
      thisNode = nodeClosestToMouse();
      
      x=0; y=0;
      // find the nodes x,y position by searching thru all nodes and incrementing x,y. 
      // it is given that the nodes havnt been moved... they are in a grid.
      for(i=0; i<numnodes; i++)
      {
         if(i==thisNode) break; // found node, break and use x,y for setting edges.
         x++;
         if(x > nodesWide-1){ x = 0; y++; }
      }      
      // sett edges.
      for(i=0; i<numnodes; i++)
      {
         if( x > 0 )      naboer[thisNode][(x-1)+y*nodesHigh] = 1; // hoyre
         if(x < nodesWide-1)          naboer[thisNode][(x+1)+y*nodesHigh] = 1; // venstre
         
         if(x < nodesWide)            naboer[thisNode][(x)+(y+1)*nodesHigh] = 1; // ned
         if(x < nodesWide && y > 1)   naboer[thisNode][(x)+(y-1)*nodesHigh] = 1; // opp
         
         if(x < nodesWide-1)          naboer[thisNode][(x+1)+(y+1)*nodesHigh] = 1; // hoyre og ned
         if(x > 0 && y < nodesHigh-1) naboer[thisNode][(x-1)+(y+1)*nodesHigh] = 1; // venstre og ned
         
         if(x < nodesWide-1 && y > 1) naboer[thisNode][(x+1)+(y-1)*nodesHigh] = 1; // hoyre og opp
         if(x > 0 && y > 1)           naboer[thisNode][(x-1)+(y-1)*nodesHigh] = 1; // venstre og opp
      }
      
   }
   


   if(keystatus[21] == 1 && bstatus == 1) // press Y to make 1 conn
   {
      bstatus == 0;
      creatingSingleConnection = 1;
      dragFrom = nodeClosestToMouse();
   }
   if(creatingSingleConnection==1 && keystatus[21] == 0)
   {
      creatingSingleConnection = 0;
      dragTo = nodeClosestToMouse();
      naboer[dragFrom][dragTo] = 1;
   }
   

   if(bstatus==1){
      //bstatus=0;
      resetSearch();
      goalnode = nodeClosestToMouse();
   }
   
   if(bstatus==2){
      bstatus = 0;
      resetSearch();
      startnode = nodeClosestToMouse();
   }
   
   /*
   if(grabbedNode > -1){
      nodex[grabbedNode] = mousx;
      nodey[grabbedNode] = mousy;
   }
   else{
      grabbedNode = -1;
   }
   
   if(bstatus==4 && grabbedNode == -1){
      grabbedNode = nodeClosestToMouse();
   }
   if(bstatus==0) grabbedNode=-1;
   */

   

   
   
}

nodeClosestToMouse(){
   minDist = 1e32;
   closest = -1;
   
   for(i = 0; i<numnodes; i++){
      dist = ((mousx-nodex[i])^2 + (mousy-nodey[i])^2 ); // < nodeRadi^2;
      if( dist < minDist ){
         minDist = dist;
         closest = i;  
      }
   }
   return closest;
}

makeNode(x,y){
   nodex[numnodes] = x; nodey[numnodes] = y; numnodes++; return numnodes-1;
}

resetSearch(){   
   steppingEnabled=0;   
   foundGoal = 0;
   for(i=0; i<MAX_NODER; i++){
      nodeClosed[i] = 0; 
      vertexState[i] = WHITE; 
      nodeG[i] = 0;
      nodeH[i] = 0;
   }
   clearstack();
}


getNodeGridPos(searchForNode,&x,&y)
{
   x=0; y=0;
   for(i=0; i<numnodes; i++)
   {
      if(i==searchForNode) break; // found node, break and use x,y for setting edges.
      x++;
      if(x > nodesWide-1){ x = 0; y++; }
   }
}

updateGfx(){
   cls(0);
   if(foundGoal==1) showPath();
   setcol(0x777777); setfont(6,8);//setfont(4,6);
   
   for(i = 0; i<numnodes; i++){
   for(j=0; j<numnodes;j++){
         if(naboer[i][j] == 1){ moveto(nodex[i], nodey[i]); lineto(nodex[j], nodey[j]);   } // //drawcone( nodex[i], nodey[i],-1, nodex[j], nodey[j], -1);
      }
   }

   for(i = 0; i<numnodes; i++){
      drawNode(i);
      for(j=0; j<numnodes;j++)
      {
         if(naboer[i][j] == 1){ // kunne ha tegnet paa det under alt annet og sluppet atan2
            // use the angle, size of a node to draw a arrow just touching the node
            ang = atan2(  nodey[i]-nodey[j], nodex[i]-nodex[j] ); // find angle from node i to node j
            setcol(0x999999); drawcone( nodex[j]+cos(ang)*nodeRadi*1.5, nodey[j]+sin(ang)*nodeRadi*1.5, -3, nodex[j]+cos(ang)*nodeRadi*0.9, nodey[j] + sin(ang)*nodeRadi*0.9, 0.01);
         } 
      }  
   }
   

   
   if(creatingSingleConnection==1){
      ants( nodex[dragFrom], nodey[dragFrom], mousx,mousy, time);
   }
   
   setfont(6,8);
   moveto(35,0); 
   setcol(0xffffff);
   printf("%g / %g nodes used",numnodes,MAX_NODER);
   printf("\n%g / %g stack used",stackCount[0]+1,MAX_NODER, MAX_ELEMENTS);
   
   if(foundGoal==1){
      printf("\n!!!!!!! found goal, select new nodes or adjust height  !!!!!!");
      printPath();
   }
   else
   {
      printf("\n!!!!!!! press SPACE to search !!!!!!");
   }
   moveto(0,yres/2);
   showStack();

   moveto(xres-250,0); setcol(0xffffff); 
   printf("\nPress mouse 1 to set GOAL\npress mouse 2 to set START\n\npress SPACE to do complete search");
   printf("\nPress S to step-thru Astar.");
   printf("\npress any other control to quit.");
   printf("\n\nmouse 1 and key combinations:");
   printf("\n r + mouse1 = [r]emove connections");
   printf("\n t + mouse1 = [t] make connections");
   printf("\n y + mouse1 = make single connection");
   
   if(steppingEnabled){
      moveto(xres/4, 10);
      setfont(10,18,-1); printf("Press S to [S]tep again. Press SPACE to quit stepmode");
   }

   setfont(12,18,1);
   tx = nodeRadi/2;
   i=goalNode; { setcol(0xffff00); moveto(nodex[i]+cos(time*6)*nodeRadi-tx*2,nodey[i]-5+sin(time*6)*nodeRadi );printf("GOAL!"); }
   i=startNode;{ setcol(0x00ff00); moveto(nodex[i]+cos(time*3)*nodeRadi-tx*3,nodey[i]-5+sin(time*3)*nodeRadi );printf("START!"); }
   setfont(6,8); 

   refresh();
}

showStack(){
   setcol(0xffffff);
   printf("\n\nstackdata:");
   for(i=stackCount[activeStack]; i>-1; i--){
      
      nodeIndex = stackarray[activeStack][i];
      
      if(i==stackCount[0]){
         setcol(0xffffff); printf("\nstack[%g] = node[%g], nodeF = %.2f <--- TOP", i, nodeIndex, nodeF[nodeIndex] );
         setcol(0xff0000); drawsph(nodex[nodeIndex], nodey[nodeIndex], -nodeRadi-3);
      }
      else{
         setcol(0xffffff); printf("\nstack[%g] = node[%g], nodeF = %.2f", i, nodeIndex, nodeF[nodeIndex] );
         setcol(0xff0000); drawsph(nodex[nodeIndex], nodey[nodeIndex], -nodeRadi-3);
      }
   }
   
}
printPath(){
   printf("\nSti mellom start og\nmaal tilstand:");
   node = goalnode;
   ox = nodex[node];
   oy = nodey[node];
   while(node != startnode){
      pred = predecessorList[node];
      setcol(0xffffff); printf("\nforgjenger[%g] = %g",node,pred);
      node = pred;
   }
}

showPath(){   
   node = goalnode;
   ox = nodex[node];
   oy = nodey[node];
   while(node != startnode){
      node = predecessorList[node];
      setcol(0x00ff00); drawcone(ox,oy,6,nodex[node],nodey[node],6);
      ox = nodex[node];
      oy = nodey[node];
   }
}

drawNode(i){
   tx = nodeRadi / 1.3;
   moveto( nodex[i]-tx, nodey[i]-15);
   
   F = nodeF[i];
   H = nodeH[i];
   G = nodeG[i];
   
   if(vertexstate[i] == BLACK ){
      setcol(0x0); drawsph( nodex[i], nodey[i], nodeRadi); 
      setcol(0x0ffffff); drawsph( nodex[i], nodey[i], -nodeRadi); 
      setcol(0xffffff); printf("#%g\nF=%0.1f\nH=%0.1f\nG=%0.1f",i,f,h,g); // printchar(i+64)
   } 

   if(vertexstate[i] == GRAY ){
      setcol(0x777777); drawsph( nodex[i], nodey[i], nodeRadi); 
      setcol(0xffffff); printf("#%g\nF=%0.1f\nH=%0.1f\nG=%0.1f",i,f,h,g);
   }
   
   if(vertexstate[i] == WHITE ){
      setcol(0xffffff); setcol(hsv_to_rgb(0,1,1)); drawsph( nodex[i], nodey[i], nodeRadi); 
      setcol(0x000000); printf("#%g\nF=%0.1f\nH=%0.1f\nG=%0.1f",i,f,h,g);
   }

   //if(i==clickedNode){ setcol(0xffffff); antwheel(nodex[i], nodey[i],nodeRadi+1); }
}


ants(x1,y1,x2,y2,t)
{
   mv = 0;
   xdist = x1-x2; ydist=y1-y2;
   if(xdist < 0) xdist=-xdist;
   if(ydist < 0) ydist=-ydist;
   
   if(ydist > xdist)
   {
      mv = ydist;
   }
   else
   {
      mv = xdist;
   }
   
   x = x1;
   y = y1;
   
   stepx = xdist/mv;
   if(x1 > x2) stepx = -stepx;
   stepy = ydist/mv;
   if(y1 > y2) stepy = -stepy;
   
   // makes ants move, start val is det by time
   // ant speed is time in millis taken for 1 move
   antspeed = 10;
   antsize = 10;
   antcounter = abs( (t*1000/antspeed) % antsize);
   
   for(nc=0; nc<floor(mv); nc++)
   {   
      if( (abs(antcounter) % antsize) < (antsize/2) ){
         setcol(0); setpix(x,y);
      }
      else{
         setcol(0xffffff); setpix(x,y);
      }
   
      x+=stepx; y+=stepy;
      antcounter -= 1;
   }
      
}
hsv_to_rgb(h,s,v){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
   return r*2^16 + g*2^8 + b; 
}
sortStackDescending(){
   static iOrder[MAX_ELEMENTS];
   static iData[MAX_ELEMENTS];
   numitems = stackCount[activeStack]; // minus one, or else we use empty pos
   
   for(i=0; i<numitems; i++){ // set initial order, save data
      iOrder[i] = i; 
      node = stackArray[activeStack][i];
      iData[i] = node; // data is node. // data to be moved to sorted pos.
      nodeF[node] = nodeH[node] + nodeG[node]; // set sort criterium
   }

   for(i=1; i<numitems; i++){
      for(j=0; j<i; j++){
         // index data with new order AND get node index
         nodePtr_i = iData[ iOrder[i] ]; 
         nodePtr_j = iData[ iOrder[j] ];
         
         // comparison crit is node's G-value.
         
         //if(iData[iOrder[i]] < iData[iOrder[j]] ) // sort, desc
         
         if( nodeF[ nodePtr_i ] > nodeF[ nodePtr_j ] ) // is one ahead larger? swap. -> desc. NO. want ascending. goto shortest dist. //descending
         {
            t = iOrder[i]; iOrder[i] = iOrder[j]; iOrder[j] = t;
            //t = stackArray[activeStack][i]; stackArray[activeStack][i] = stackArray[activeStack][j]; stackArray[activeStack][j] = t;
         }
      }
   }
   for(i=0; i<numitems; i++){
      stackArray[activeStack][i] = iData[ iOrder[i] ]; // write node value back, now sorted by nodeG[]
   }
}

clearStack(){
   for(i=0; i<stackcount[activestack]+1; i++)
   {
      stackarray[activestack][i] = 0;
   }
   stackcount[activestack] = 0;   
}

push(x){
   stackarray[activestack][stackcount[activestack]] = x;
   stackcount[activestack]++;
}

popFront(){
   val = stackarray[activestack][0];
   for(i=0; i<stackcount[activestack]; i++)
   {
      stackarray[activestack][i] = stackarray[activestack][i+1]; //overwrite current with next
   }
   stackcount[activestack]--;
   return val;
}

pop(){
   stackcount[activestack]--;
   return stackarray[activestack][stackcount[activestack]];
}