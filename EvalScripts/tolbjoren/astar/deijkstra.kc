/*
   // LAST UPDATED 22 november 2010, Torbjoern Haugen
   // simplified. removed step-by-step mode
*/

enum{MAX_NODER = 1000};
static naboer[MAX_NODER][MAX_NODER];

// "class" node
enum{white=0,gray=1,black=2}; // vertex states 
struct Node{
   x,y,col,closed,state,cost;
};

   static Node nodeList[MAX_NODER];

   static numnodes = 0;
   static nodeRadi = 5;
   static predecessorList[MAX_NODER];

// "class" stack
   enum{MAX_STACKS=1, MAX_ELEMENTS=1000}
   static stackarray[MAX_STACKS][MAX_ELEMENTS];
   static stackcount[MAX_STACKS];
   static activestack = 0;
   
// GOOEY GUI
static grabbedNode = -1;

static time = 0;

static startnode = 0;
static goalnode = 1;
static foundgoal = 0;

static nodesWide = 20;
static nodesHigh = 20;

// Make connections between nodes
static dragFrom;
static dragTo;
()
{
   // Setup:
   genSquareGraph();       
   resetSearch();
   
   while(1)
   {
      time = klock(0);
      updateGfx();
      input();
   }
}


deijkstra(start, goal)
{
 push( start ); 

 while(stackCount[0] != -1){
  sortStackDeijkstra();
  v = pop();
  nodeList[v].state = BLACK;
  if( v == goal ) return v; // return goal
  addNeighboursToStack(v);
 }
}

addNeighboursToStack(v)
{
   for(i=0; i<numnodes; i++){  // find v's neighbours.
      if(i==v)continue;
            

      if(naboer[v][i] == 1 || naboer[i][v] == 1)
      {            
         if(nodeList[i].closed==0 && nodeList[i].state == WHITE){
            nodeList[i].state = GRAY;   
            push(i); // push onto open

            if(nodeList[i].state != BLACK) predecessorList[i] = v;            

         }
      }
   }

}


distanceSq(x1,y1,x2,y2){
   return (x1-x2)^2 + (y1-y2)^2;
}


distance2d(x1,y1,x2,y2){
   return sqrt( (x1-x2)^2 + (y1-y2)^2 );
}

genSquareGraph(){

      separation = 2.9;   
      for(y=0; y<nodesWide; y++)
      for(x=0; x<nodesHigh; x++){
         makeNode( (xres/2-nodeRadi*nodesWide*separation)+x*nodeRadi*2*separation, (yres/2-nodeRadi*nodesHigh*separation)+y*nodeRadi*2*separation);
      }
      
      x = 0;
      y = 0;   
       
      for(i=0; i<numnodes;i++){
         // naboer[fra][til]
         thisNode = y*nodesHigh+x;
         /*
         if( x > 0 )      naboer[thisNode][(x-1)+y*nodesHigh] = 1; // hoyre
         if(x < nodesWide-1)          naboer[thisNode][(x+1)+y*nodesHigh] = 1; // venstre
         
         if(x < nodesWide)            naboer[thisNode][(x)+(y+1)*nodesHigh] = 1; // ned
         if(x < nodesWide && y > 1)   naboer[thisNode][(x)+(y-1)*nodesHigh] = 1; // opp
         */         

         /*
         if(x < nodesWide-1)          naboer[thisNode][(x+1)+(y+1)*nodesHigh] = 1; // hoyre og ned
         if(x > 0 && y < nodesHigh-1) naboer[thisNode][(x-1)+(y+1)*nodesHigh] = 1; // venstre og ned
         
         if(x < nodesWide-1 && y > 0) naboer[thisNode][(x+1)+(y-1)*nodesHigh] = 1; // hoyre og opp
         if(x > 0 && y > 0)           naboer[thisNode][(x-1)+(y-1)*nodesHigh] = 1; // venstre og opp
         */
         x++;
         if(x>nodesWide-1){
            x=0;
            y++;
         }
    }
    
}

input(){
   // spacebar
   if(keystatus[57] == 1 ){
      keystatus[57] = 0;
      resetSearch();
      res = deijkstra(startnode, goalnode);
      if(res==goalnode){foundgoal=1; }
   }
   
   if(keystatus[19] == 1 && bstatus == 1) // press R to Remove connections
   {
      bstatus = 0;
      closestNode = nodeClosestToMouse();
      for(i=0; i<numnodes; i++)
      {
         naboer[closestNode][i] = 0;
         naboer[i][closestNode] = 0;
      }
      
   }
   
   if(keystatus[20] == 1 && bstatus == 1) // press T to reconnect
   {
      bstatus = 0;
      thisNode = nodeClosestToMouse();
      
      x=0; y=0;
      // find the nodes x,y position by searching thru all nodes and incrementing x,y. 
      // it is given that the nodes havnt been moved... they are in a grid.
      for(i=0; i<numnodes; i++)
      {
         if(i==thisNode) break; // found node, break and use x,y for setting edges.
         x++;
         if(x > nodesWide-1){ x = 0; y++; }
      }      
      // set edges.
      for(i=0; i<numnodes; i++)
      {
         if( x > 0 )                  naboer[thisNode][(x-1)+y*nodesHigh] = 1; // hoyre
         if(x < nodesWide-1)          naboer[thisNode][(x+1)+y*nodesHigh] = 1; // venstre
         
         if(x < nodesWide)            naboer[thisNode][(x)+(y+1)*nodesHigh] = 1; // ned
         if(x < nodesWide && y > 1)   naboer[thisNode][(x)+(y-1)*nodesHigh] = 1; // opp
         /*
         if(x < nodesWide-1)          naboer[thisNode][(x+1)+(y+1)*nodesHigh] = 1; // hoyre og ned
         if(x > 0 && y < nodesHigh-1) naboer[thisNode][(x-1)+(y+1)*nodesHigh] = 1; // venstre og ned
         
         if(x < nodesWide-1 && y > 1) naboer[thisNode][(x+1)+(y-1)*nodesHigh] = 1; // hoyre og opp
         if(x > 0 && y > 1)           naboer[thisNode][(x-1)+(y-1)*nodesHigh] = 1; // venstre og opp
         */
      }
      
   }
   
   if(keystatus[21] == 1 && bstatus == 1) // press Y to make 1 conn
   {
      bstatus == 0;
      creatingSingleConnection = 1;
      dragFrom = nodeClosestToMouse();
   }
   if(creatingSingleConnection==1 && keystatus[21] == 0)
   {
      creatingSingleConnection = 0;
      dragTo = nodeClosestToMouse();
      naboer[dragFrom][dragTo] = 1;
   }
   
   if(bstatus==1){
      resetSearch();
      goalnode = nodeClosestToMouse();
   }
   
   if(bstatus==2){
      bstatus = 0;
      resetSearch();
      startnode = nodeClosestToMouse();
   }
    
}

nodeClosestToMouse(){
   minDist = 1e32;
   closest = -1;
   
   for(i = 0; i<numnodes; i++){
      dist = ((mousx-nodeList[i].x)^2 + (mousy-nodeList[i].y)^2 ); // < nodeRadi^2;
      if( dist < minDist ){
         minDist = dist;
         closest = i;  
      }
   }
   return closest;
}

makeNode(x,y){
   nodeList[numnodes].x = x; nodeList[numnodes].y = y; numnodes++; return numnodes-1;
}

// \breif Make all nodes unvisited at clear their costs
resetSearch(){    
   foundGoal = 0;
   for(i=0; i<MAX_NODER; i++){
      nodeList[i].closed = 0; 
      nodeList[i].state = WHITE; 
   }
   clearstack();
}


getNodeGridPos(searchForNode,&x,&y)
{
   x=0; y=0;
   for(i=0; i<numnodes; i++)
   {
      if(i==searchForNode) break; // found node, break and use x,y for setting edges.
      x++;
      if(x > nodesWide-1){ x = 0; y++; }
   }
}

updateGfx(){
   cls(0);
   if(foundGoal==1) showPath();
   setcol(0x777777); setfont(6,8);
   
   for(i = 0; i<numnodes; i++){
   for(j=0; j<numnodes;j++){
         if(naboer[i][j] == 1){ moveto(nodeList[i].x, nodeList[i].y); lineto(nodeList[j].x, nodeList[j].y);   }
      }
   }

   // Draw graph first
   for(i = 0; i<numnodes; i++){
      
      for(j=0; j<numnodes;j++)
      {
         if(naboer[i][j] == 1){
         moveto( nodeList[i].x, nodeList[i].y ); lineto( nodeList[j].x, nodeList[j].y );
         } 
      }  
   }
   for(i = 0; i<numnodes; i++)
   {
      drawNode(i);
   }
   
   
   setfont(6,8);
   moveto(35,0); 
   setcol(0xffffff);
   printf("%g / %g nodes used",numnodes,MAX_NODER);
   printf("\n%g / %g stack used",stackCount[0]+1,MAX_NODER, MAX_ELEMENTS);
   
   if(foundGoal==1){
      printf("\n!!!!!!! found goal, select new nodes or adjust height  !!!!!!");
      //printPath();
   }
   else
   {
      printf("\n!!!!!!! press SPACE to search !!!!!!");
   }
   moveto(0,yres/2);
   //showStack();

   moveto(xres-250,0); setcol(0xffffff); 
   printf("\nPress mouse 1 to set GOAL\npress mouse 2 to set START\n\npress SPACE to do complete search");
   printf("\npress any other control to quit.");
   printf("\n\nmouse 1 and key combinations:");
   printf("\n r + mouse1 = [r]emove connections");
   printf("\n t + mouse1 = [t] make connections");

   setfont(12,18,1);
   tx = nodeRadi/2;
   i=goalNode; { setcol(0xffff00); moveto(nodeList[i].x+cos(time*6)*nodeRadi-tx*2,nodeList[i].y-5+sin(time*6)*nodeRadi );printf("GOAL!"); }
   i=startNode;{ setcol(0x00ff00); moveto(nodeList[i].x+cos(time*3)*nodeRadi-tx*3,nodeList[i].y-5+sin(time*3)*nodeRadi );printf("START!"); }
   setfont(6,8); 

   refresh();
}

showStack(){
   setcol(0xffffff);
   printf("\n\nstackdata:");
   for(i=stackCount[activeStack]; i>-1; i--){
      
      nodeIndex = stackarray[activeStack][i];
      
      if(i==stackCount[0]){
         setcol(0xffffff); printf("\nstack[%g] = node[%g], cost= %.2f <--- TOP", i, nodeIndex, nodeList[nodeIndex].cost );
         setcol(0xff0000); drawsph(nodeList[nodeIndex].x, nodeList[nodeIndex].y, -nodeRadi-3);
      }
      else{
         setcol(0xffffff); printf("\nstack[%g] = node[%g], cost = %.2f", i, nodeIndex, nodeList[nodeIndex].cost );
         setcol(0xff0000); drawsph(nodeList[nodeIndex].x, nodeList[nodeIndex].y, -nodeRadi-3);
      }
   }
   
}
printPath(){
   printf("\nSti mellom start og\nmaal tilstand:");
   printMe = goalnode;
   ox = nodeList[printMe].x;
   oy = nodeList[printMe].y;
   while(printMe != startnode){
      pred = predecessorList[printMe];
      setcol(0xffffff); printf("\nforgjenger[%g] = %g",printMe,pred);
      printMe = pred;
   }
}

showPath(){  
   showMe = goalnode;
   ox = nodeList[showMe].x;
   oy = nodeList[showMe].y;
   while(showMe != startnode){
      showMe = predecessorList[showMe]; // get next from pred list
      setcol(0x00ff00); drawcone(ox,oy,6,nodeList[showMe].x,nodeList[showMe].y,6);
      ox = nodeList[showMe].x;
      oy = nodeList[showMe].y;
   }
}

drawNode(i){
   tx = nodeRadi / 1.3;
   xp = nodeList[i].x;
   yp = nodeList[i].y;
   moveto( nodeList[i].x-tx, nodeList[i].y-15);
   
   f = nodeList[i].cost;

   
   if(nodeList[i].state == BLACK ){
      setcol(0); drawsph(xp,yp,nodeRadi); 
      setcol(0xffffff); drawsph( xp,yp , -nodeRadi); 
   } else if(nodeList[i].state == GRAY ){
      setcol(0x777777); drawsph( xp,yp, nodeRadi); 
   } else if(nodeList[i].state == WHITE ){
      setcol(255,255,255); drawsph( xp,yp, nodeRadi); 
   }

}



sortStackDeijkstra(){
   static iOrder[MAX_ELEMENTS];
   static iData[MAX_ELEMENTS];
   numitems = stackCount[activeStack]; // minus one, or else we use empty pos
   
   for(i=0; i<numitems; i++){ // set initial order, save data
      iOrder[i] = i; 
      sortMe = stackArray[activeStack][i];
      iData[i] = sortMe; // data is node. // data to be moved to sorted pos.
      //nodeList[sortMe].F = nodeList[sortMe].H + nodeList[sortMe].G; // set sort criterium
      dx = nodeList[sortMe].x - nodeList[goalNode].x;
      dy = nodeList[sortMe].y - nodeList[goalNode].y;
      nodeList[sortMe].cost = ( dx*dx + dy*dy );
   }

   for(i=1; i<numitems; i++){
      for(j=0; j<i; j++){
         // index data with new order AND get node index
         nodePtr_i = iData[ iOrder[i] ]; 
         nodePtr_j = iData[ iOrder[j] ];
         
         // comparison crit is node's F-value.
         if( nodeList[ nodePtr_i ].cost > nodeList[ nodePtr_j ].cost ) // is one ahead larger? swap. -> desc. NO. want ascending. goto shortest dist. //descending
         {
            t = iOrder[i]; iOrder[i] = iOrder[j]; iOrder[j] = t;
         }
      }
   }
   for(i=0; i<numitems; i++){
      stackArray[activeStack][i] = iData[ iOrder[i] ]; // write node value back, now sorted by nodeG[]
   }
}

clearStack(){
   for(i=0; i<stackcount[activestack]+1; i++)
   {
      stackarray[activestack][i] = 0;
   }
   stackcount[activestack] = 0;   
}

push(x){
   stackarray[activestack][stackcount[activestack]] = x;
   stackcount[activestack]++;
}

popFront(){
   val = stackarray[activestack][0];
   for(i=0; i<stackcount[activestack]; i++)
   {
      stackarray[activestack][i] = stackarray[activestack][i+1]; //overwrite current with next
   }
   stackcount[activestack]--;
   return val;
}

pop(){
   stackcount[activestack]--;
   return stackarray[activestack][stackcount[activestack]];
}