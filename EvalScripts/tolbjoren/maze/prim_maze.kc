struct rectangel
{
   minx,miny;
   maxx,maxy;
   midx,midy;
};
 
enum{MAX_SXS = 32, MAX_RECTS=MAX_SXS*MAX_SXS}
 
static rectangel rectArray[MAX_RECTS];
static numRects = 0;
static started = 0;
static grab = 0;
static startPx, startPy = 0;
 
static graf[MAX_RECTS][MAX_RECTS];

static startetGraf=0;
static startNode=-1;

static time_to_do_prim = 0;
()
{
   cls(0);
   
   if ( numframes == 0 ){
      for(i=0; i<MAX_RECTS; i++){
         for(j=0; j<MAX_RECTS; j++){
            graf[i][j] = -1;
         }
      }
   }

    
   if( bstatus == 1 && started == 0 && grab == -1 )
   {
      //rect = getRectUnderMouse();
      //grab = rect;
      
      startNode = makeRect(mousx-15, mousy-15, mousx+15, mousy+15  );
      bstatus = 0;
   }
     
   if ( bstatus == 0 ){
      grab = -1;
   }
   
   if ( grab != -1 ){
      move_rect( rectArray[grab], mousx, mousy );
   }

   /* 
   if( bstatus == 1 && started == 0 && grab == -1)
   {
      started = 1;
      bstatus = 0;
      startPx = mousx;
      startPy = mousy;
   }
   

   if( started == 1 )
   {
      drawrectopen(startPx, startPy, mousx, mousy);
   }
 
   if( bstatus == 1 && started == 1 )
   {
      started = 0;
      bstatus = 0;
      makeRect(startPx, startPy, mousx, mousy );
   }
 */

 
   for(i=0; i<numRects; i++)
   {
      rectangel temp;
      temp.minx = rectArray[i].minx;
      temp.miny = rectArray[i].miny;
      temp.maxx = rectArray[i].maxx;
      temp.maxy = rectArray[i].maxy;   
 
      inni = isInsideRect( temp, mousx, mousy );
      if( inni )
      {
         drawsph(mousx,mousy,10);
      }
   }
 
   // Lage graf
   if( bstatus==2 && startetGraf==0 )
   {
      bstatus = 0;
      rect = getRectUnderMouse();
 
      if( rect != -1 )
      {
         startetGraf = 1;
         startNode = rect;
      }
 
   }
 
   if( startetGraf )
   {
      midx = rectArray[startNode].midx;
      midy = rectArray[startNode].midy;
      moveto( midx, midy );
      lineto( mousx, mousy );
   }
 
   if( bstatus==2 && startetGraf==1 )
   {
      bstatus = 0;
      sluttNode = getRectUnderMouse();
 
      if( sluttNode != -1 )
      {
         startetGraf = 0;
         weight = rnd;
         graf[startNode][sluttNode] = weight;
         graf[sluttNode][startNode] = weight;
      }
 
   }
 
   drawGraf();
 
   setcol(0x099d1f);
   for(i=0; i<numRects;i++)
   {
      x0 = rectArray[i].minx;
      y0 = rectArray[i].miny;
      x1 = rectArray[i].maxx;
      y1 = rectArray[i].maxy;
      drawrectfill(x0,y0,x1,y1);
   }

   if ( keystatus[2] ){
      keystatus[2] = 0;
      
      genSquareGraph();
   }

   if ( keystatus[57] ){
      keystatus[57] = 0;
      applyPrim( graf );
   }
   
   moveto(10,10);
   setfont(2.5*6, 6*6, 1);
   printf("press 1 to gen square graph, or use mouse1\n");
   printf("press space to apply prim's algorithm\n");
   printf("%g / %g\n", numRects, MAX_RECTS);
   printf("spend %.2f s\n", time_to_do_prim);

}

setGraph(from, to, v ){
   graf[from][to] = v;
   graf[to][from] = v;
}

genSquareGraph(){
      num_side = min(10, MAX_SXS);
      nodesWide = num_side;
      nodesHigh = num_side;
      nodeRadi = 12;
      
      
      i = 0;
      separation = 2.5;   
      for(x=0; x<nodesWide; x++){
      for(y=0; y<nodesHigh; y++){
      
            xp = (xres/2-nodeRadi*nodesWide*separation)+x*nodeRadi*2*separation;
            yp = (yres/2-nodeRadi*nodesHigh*separation)+y*nodeRadi*2*separation;
            
            setRect(i,xp,yp,nodeRadi,nodeRadi);
            
            i++;
         }
      }
      numRects = num_side^2;
      
      for(i=0; i<MAX_RECTS; i++){
         for(j=0; j<MAX_RECTS; j++){
            graf[i][j] = -1;
         }
      }
      
      x = 0;
      y = 0;    
      for(i=0; i<numRects; i++){

         thisNode = x * nodesWide + y;
         
         if(x > 0){
            left_idx = (x-1)*nodesWide + y;
            setGraph(thisNode, left_idx, rnd);
         }
         
         if(x < nodesWide-1){
            right_idx = (x+1)*nodesWide + y;
            //setGraph(thisNode, right_idx, rnd);
         }
         
         if(y < nodesHigh-1){
            down_idx = x*nodesWide + (y+1);
            setGraph(thisNode, down_idx, rnd);
         }
         
         if(x < nodesWide && y > 1){
            up_idx = x*MAX_SXS + (y-1);
            //setGraph(thisNode, up_idx, rnd);
         }
         


         x++;
         if(x>nodesWide-1){
            x=0;
            y++;
         }
    }
}



err(code){
   setfont(2*6,4*6,1);
   while(1){
      cls(0);
      moveto(50, yres/2);
      setcol(255,255,255);
      
      if ( code == 4 ){
         printf("err %g, graph must be connected! press CTRL+ENTER to reset", code);
      }else{
         printf("err %g", code);
      }
      refresh();
      sleep(1);
   }
}


// finds shortest (best) edge between a vert in processed[] and a vert not yet processed
// since edges are implicitly defined by neighbor matrix, return the to vert indices
getBestEdgeTo( processed[MAX_RECTS], num_processed, graph[MAX_RECTS][MAX_RECTS], &best_vert1, &best_vert2 ){

   mind = 1e32;
   best_vert1 = -1;
   best_vert2 = -1;
   for(i=0; i<num_processed; i++){

      u = processed[i];
      if ( u==-1 ) return; // processed all valid vertices
      
      for(j=0; j<numRects; j++){
         if ( u == j ) continue;
         
         // Assure j is not processed
         j_ok = 1;
         for(k=0; k<num_processed; k++){
            if ( processed[k] == j )
            {
               j_ok = -1;
               break;
            }
         }
         if ( j_ok==-1 ) continue;
         
         weight = graph[u][j];
         if ( weight != -1 ){
            if ( weight < mind ){
               mind = weight;
               best_vert1 = u;
               best_vert2 = j;
            }
         }
      }

   }
   
   if ( best_vert1 == -1 || best_vert2 == -1 ){
      err(1);
   }
}

isConnected(graph[MAX_RECTS][MAX_RECTS]){
   for(i=0; i<numRects; i++){
      i_has_neigh = 0;
      for(j=0; j<numRects; j++){
         if ( graph[i][j] >= 0 || graph[j][i] >= 0 ){
            i_has_neigh = 1; 
            break;
         }
      } 
      if (!i_has_neigh ) return 0;
   }
   return 1;
}

applyPrim(graph[MAX_RECTS][MAX_RECTS]){

   beginTime = klock(0);
   
   if ( !isConnected(graph) ) err(4);
   
   static processed[MAX_RECTS]; // list of vertices we have visited
   for(i=0; i<numRects; i++){
      processed[i] = -1;
   }
   
   // Find a valid vertex to start with
   first = -1;
   for(i=0; i<numRects; i++){
      for(j=0; j<numRects; j++){
         if ( graph[i][j] != -1 ) {
            first = i;
            break;
         }
      }
   }   

   if ( first == -1 ) err(2);
   processed[0] = first;
   
   static edges[MAX_RECTS][MAX_RECTS]; // Edges used for spanning tree
   
   
   // Set all edges unused
   for(i=0; i<numRects; i++){
      for(j=0; j<numRects; j++){
         edges[i][j] = -1;
      }
   }
   
   cls(0);
   moveto(15, 10);
   printf("processing");
   dot_inc = numRects / 100;
   cnt = 0;
   
   for( i=0; i<numRects; i++ ){
      
      // Choose an edge (u,v) with minimal weight such that u is in Vnew and v is not
      best_vert1 = -1;
      best_vert2 = -1;
      // The edge the two best verts (best_vert1, best_vert2)
      getBestEdgeTo( processed, i+1, graph, best_vert1, best_vert2 );
      
      processed[i] = best_vert2; // use vert2 since vert1 is one already in processed list
      
      // Store the edge
      edges[best_vert2][best_vert1] = 1;
      edges[best_vert1][best_vert2] = 1;
      
      if ( cnt > dot_inc ){
         cnt = 0;
         printf(".");
         refresh();
      }
      cnt++;
   }
   
   // Setup new, spanning graph
   for(i=0; i<numRects; i++){
      for(j=0; j<numRects; j++){
      
      
         if ( edges[i][j] == 1 ){
            // Keep old
         }else{
            graph[i][j] = -1;
            graph[j][i] = -1;
         } 
      }
   }
   
   time_to_do_prim = klock(0) - beginTime;
   

}
 
drawGraf()
{
   /*
   setfont(6,8);
   for(i=0; i<numRects; i++)
   for(j=0; j<numRects; j++)
   {
       if (i==j ) continue;
      moveto(i*30, j*25);
      printf("%1.1f", graf[i][j] );     
 
   }
   */
 
   

   for(i=0; i<MAX_RECTS; i++)
   for(j=i; j<MAX_RECTS; j++)
   {
 
      weight = graf[i][j];
      
      if( weight > 0 )
      {
         setcol(0x34e049);
         
         #ifdef FANCY_DRAWING
         isect_0_x = 0;
         isect_0_y = 0;
         isect_1_x = 0;
         isect_1_y = 0;
         box_i_isects_j = boxIntersect(rectArray[i].midx, rectArray[i].midy, 
                          rectArray[j].midx, rectArray[j].midy, 
                          rectArray[j].minx, rectArray[j].miny, 
                          rectArray[j].maxx, rectArray[j].maxy, isect_0_x, isect_0_y );
     
         box_j_isects_i = boxIntersect(rectArray[j].midx, rectArray[j].midy, 
                          rectArray[i].midx, rectArray[i].midy, 
                          rectArray[i].minx, rectArray[i].miny, 
                          rectArray[i].maxx, rectArray[i].maxy, isect_1_x, isect_1_y );
                          
                     
         if ( box_i_isects_j && box_j_isects_i )
         {
            moveto( isect_0_x, isect_0_y );
            lineto( isect_1_x, isect_1_y );
            drawsph( isect_0_x, isect_0_y, 3 );
            drawsph( isect_1_x, isect_1_y, 3 );
         }
         #else
            moveto( rectArray[i].midx, rectArray[i].midy );
            lineto( rectArray[j].midx, rectArray[j].midy );
            
            radi = .5 + 5*weight;
            drawcone( rectArray[i].midx, rectArray[i].midy, radi,
                      rectArray[j].midx, rectArray[j].midy, radi );
         #endif
         
         #define SHOW_WEIGHT
         #ifdef SHOW_WEIGHT
         lx = lerp(rectArray[i].midx, rectArray[j].midx,0.5);
         ly = lerp(rectArray[i].midy, rectArray[j].midy,0.5);
         moveto( lx, ly);   
         setfont(4,6);
         setcol(0x386be2); 
         printf("%.2f", weight);
         #endif

      }
   }
 
}
 
getRectUnderMouse()
{
   for(i=0; i<numRects;i++)
   {
      rectangel temp;
      temp.minx = rectArray[i].minx;
      temp.miny = rectArray[i].miny;
      temp.maxx = rectArray[i].maxx;
      temp.maxy = rectArray[i].maxy;   
 
      inni = isInsideRect( temp, mousx, mousy );
      if( inni )
      {
         return i;
      }
   }
 
   return -1;
}
 
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }
drawrectfill(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }

lerp(a,b,t){ return a + (b-a)*t ; } 
 
makeRect(x1,y1,x2,y2)
{
   minx = x1;
   miny = y1;
   maxx = x2;
   maxy = y2;
 
   if( x1 > x2 ){
      maxx = x1;
      minx = x2;
   }
 
   if( y1 > y2 ){
      maxy = y1;
      miny = y2;
   }
 
   rectArray[numRects].minx = minx;
   rectArray[numRects].miny = miny;
   rectArray[numRects].maxx = maxx;
   rectArray[numRects].maxy = maxy;
 
   rectArray[numRects].midx = minx+ (maxx-minx)/2;
   rectArray[numRects].midy = miny+ (maxy-miny)/2;   
 
   numRects++;
   return numRects-1;
}

setRect(idx, xp, yp, w, h )
{
   rectangel r;
   r.minx = xp - w/2; r.miny = yp - h/2;
   r.maxx = xp + w/2; r.maxy = yp + h/2;
   r.midx = xp; r.midy = yp;
   rectArray[idx] = r;
}

move_rect( rectangel r, x, y ){
   r.midx = x;
   r.midy = y;
   
   w = r.maxx - r.minx;
   h = r.maxy - r.miny;
   
   r.minx = r.midx - w*.5;
   r.maxx = r.midx + w*.5;
   
   r.miny = r.midy - h*.5;
   r.maxy = r.midy + h*.5;
}
 
isInsideRect( rectangel r, x,y )
{
   if( x < r.minx ) return 0;
   if( x > r.maxx ) return 0;
   if( y < r.miny ) return 0;
   if( y > r.maxy ) return 0;
   return 1;
 
}

boxIntersect(last_x, last_y, x, y, bx1, by1, bx2, by2, &ix, &iy)
{
   // Finds the point of intersection of line from (last_x, last_y) to (x,y)
   // with the box (bx1,by1,bx2,by2). The ix and iy parameters are pointers
   // which means the function fills in the values of the point of intersection in
   // the variables that you give.
   // the funciton also returns true if there is an intersection, false if there is none
   
   if( (x>=bx1 && x<=bx2 && y>=by1 && y<=by2) ){}else{return 0;}
   
   if(last_x < bx1 && x >= bx1) // does it cross left edge?
   {
      iy = last_y + (y - last_y) * (bx1 - last_x)/(x-last_x);
      if(iy >= by1 && iy <= by2)
      {
         ix = bx1; return 1;
      }
   }
   else if(last_x > bx2 && x <= bx2) // cross right edge?
   {
      iy = last_y + (y-last_y) * (bx2 - last_x)/(x-last_x);
      if(iy >= by1 && iy <= by2) // is intersection point on right edge?
      {
         ix = bx2; return 1;
      }
   }
   
   if(last_y < by1 && y >= by1)
   {
      ix = last_x + (x-last_x) * (by1 - last_y)/(y-last_y);
      if(ix >= bx1 && ix <= bx2) // is intersection point on top edge?
      {
         iy = by1; return 1;
      }
   }
   else if(last_y > by2 && y <= by2) // does it cross bottom edge?
   {
      ix = last_x + (x - last_x) * (by2 - last_y)/(y - last_y);

      if(ix >= bx1 && ix <= bx2) // is intersection point on bottom edge?
      {
         iy = by2; return 1;
      } 
   }
}