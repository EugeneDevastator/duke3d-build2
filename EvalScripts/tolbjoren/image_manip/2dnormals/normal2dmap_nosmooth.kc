enum{SIZ = 300}
static map[SIZ*SIZ];
static collide[SIZ*SIZ];
static vecmap[SIZ*SIZ];
static smoothmap[SIZ*SIZ];

static gray;

static has_three = 0;


struct vec2
{
  x,y;
};

static vec2 ballpos;
static vec2 ballvel;
static ballradi = 6;
static closestX, closestY;

static oldmousx, oldmousy;
()
{
  if(numframes==0)
  {
    ballpos.x = SIZ/2; ballpos.y = SIZ/2;
    ballvel.y = 2;
    gray = rgb(127,127,127);
    genmap();
    findEdges();
  }


/*
  // WTF er det med tegning pÃ¥ to steder????
   if(bstatus > 0)
   {
    segs = 10;
    for(i=0; i<segs; i++)
    {
      xp = int( mousx+lerp(oldmousx,mousx,i/segs) );
      yp = int( mousy+lerp(oldmousy,mousy,i/segs) );
      if(xp > 1 && xp < (SIZ-1) && yp > 1 && yp < (SIZ-1) )
      {
        if(bstatus == 1) paintbrush(xp,yp,1,15);
        if(bstatus == 2) paintbrush(xp,yp,-1,15);
      }
      
    }
    findEdges();   
      
   }
  */

  if( bstatus==1 )
  {
    ballpos.x = mousx; ballpos.y = mousy;
    ballvel.y = 1;
  }

  cls(0);
   
  calc();
  smoothmap();

  drawCollisionMap(); 

  setcol(255,0,0);
  drawsph(ballpos.x, ballpos.y, ballradi);


  for(steps=0; steps<30; steps++)
  {
    dt = 1/30;
    ballpos.x += ballvel.x * dt;
    ballpos.y += ballvel.y * dt;
    ballpos.x = mousx;
    ballpos.y = mousy;

    closestx=0; closesty=0; mind = 1e32;
    minx = int(ballpos.x - ballradi*4);
    miny = int(ballpos.y - ballradi*4);
    maxx = int(ballpos.x + ballradi*4);
    maxy = int(ballpos.y + ballradi*4);

    for(i=minx; i<maxx; i++)
    for(j=miny; j<maxy; j++)
    {
      if( collide[i*SIZ+j] == gray )
      {
        d = (ballpos.x - i)^2 + (ballpos.y - j)^2;
                
        if( d < mind )
        {
          mind = d;
          closestx = i;
          closesty = j;
        }
      }
    }
    //drawrectopen(minx,miny,maxx,maxy);

    moveto(ballpos.x, ballpos.y);
    lineto( closestx, closesty );

    //if( mind < ballradi^2 )
    {
      ang = readColor( smoothmap[closestx*SIZ+closesty] );
      normalx = cos(ang);
      normaly = sin(ang);

      //normalx *= -1;
      //normaly *= -1;

      dot = ballvel.x * normalx + ballvel.y * normaly;
      
    
      // calc reflection vector
      // R=I-2*N*D
      ballvel.x = ballvel.x - 2*normalx*dot;
      ballvel.y = ballvel.y - 2*normaly*dot;
    }
  }

  mx = int(mousx);
  my = int(mousy);

  ang = readColor( smoothmap[closestx*SIZ+closesty] );
  normalx = cos(ang);
  normaly = sin(ang);

  //dot = ballvel.x * normalx + ballvel.y * normaly;

  setcol(0,255,0);
  moveto(closestx, closesty); lineto(closestx+normalx*5, closesty+normaly*5);
  
  drawarrow(closestx, closesty, closestx+normalx*25, closesty+normaly*25, 5 );  // drawArrow(sx,sy,ex,ey,thick,l,angle) .5, 10, 30*pi/180

  setcol(255,255,255);
  moveto(mx,my);
  printf(" dot %.2f", dot);



  oldmousx = mousx;
  oldmousy = mousy;  

  moveto(0,siz+15);
  setfont(12,16);
  printf("has_three neighbors = %f",has_three);

}

paintbrush(x,y,c,r)
{
   i=0; j=0;
   for(i=0; i<2*r; i++)
   {
      len = int( sqrt( cos(0.5*PI*(i-r)/r)) * r * 2 );
      for(j=0; j<len; j++)
      {
         xp = x+j-len/2;
         yp = y-r+i;

         draw = 1;
         //if(c==SAND && rnd < .9) draw=0;          

         if(draw)
         if(xp > 1 && xp < (SIZ-1) && yp > 1 && yp < (SIZ-2))
         {
            map[int(xp)*SIZ+int(yp)] = c;
         }
      }
   }
}

lerp(x1,x2,t){
   (x2-x1)*t;
}
genmap(){
  for(i=0; i<SIZ; i++)
  for(j=0; j<SIZ; j++)
  {
    map[i*SIZ+j] = sgn( noise(5*i/SIZ + 10*mousx/xres,5*j/SIZ + 10*mousy/yres ) );
  }
}

findEdges(){
  for(i=1; i<SIZ-1; i++)
  {
    for(j=1; j<SIZ-1; j++)
    {
      U = map[i*SIZ+(j-1)];
      D = map[i*SIZ+(j+1)];
      L = map[(i-1)*SIZ+j];
      R = map[(i+1)*SIZ+j];

      if( map[i*SIZ+j] == 1 && (U==-1 || D==-1 || L==-1 || R==-1) )
      {
        collide[i*SIZ+j] = gray;
      }
      else
      {
        collide[i*SIZ+j] = 0;
      }
    } 
  }
}

smoothmap()
{
  for(i=1; i<SIZ-1; i++)
  for(j=1; j<SIZ-1; j++)
  {
      current = vecmap[i*SIZ+j];
      U = vecmap[i*SIZ+(j-1)];
      D = vecmap[i*SIZ+(j+1)];
      L = vecmap[(i-1)*SIZ+j];
      R = vecmap[(i+1)*SIZ+j];


      UL = vecmap[(i-1)*SIZ+(j-1)];
      UR = vecmap[(i+1)*SIZ+(j-1)];

      DL = vecmap[(i-1)*SIZ+(j+1)];
      DR = vecmap[(i+1)*SIZ+(j+1)];

      smoothmap[i*SIZ+j] = current;
      //smoothmap[i*SIZ+j] = PI*127/PI +  (current+U+D+L+R)/5;// + (UL+UR+DL+DR)/8;
      //smoothmap[i*SIZ+j] = (current+U+D+L+R)/5 + (UL+UR+DL+DR)/8;
  }  
}

drawCollisionMap()
{
  /*static hbuf[SIZ];
  for(j=0; j<SIZ; j++)
  {
    for(i=0; i<SIZ; i++)
    {  
      hbuf[i] = collide[i*SIZ+j];
    }
    sethlin(0,j,hbuf,SIZ);
  }*/

  for(j=0; j<SIZ; j++)
  {
    for(i=0; i<SIZ; i++)
    {  
      if( collide[i*SIZ+j] == gray )
      {
        setcol(collide[i*SIZ+j]); setpix(i,j);

        if( (i*SIZ+j) % 5 == 0)
        {
          setcol(255,127,0);
          vec2 v;
          //ang = readColor( vecmap[i*SIZ+j] );
          ang = readColor( smoothmap[i*SIZ+j]);
          v.x = cos(ang); v.y = sin(ang);
          moveto(i,j); lineto(i + v.x * 6 ,j + v.y * 6);
          //drawsph(i,j,2);
        }

      }
    }
  }
}

calc()
{  
  for(i=1; i<SIZ-1; i++)
  { 
    for(j=1; j<SIZ-1; j++)
    {
      if( collide[i*SIZ+j] == gray )
      {
        vec2 v;
        hasU = 0;
        hasD = 0;
        hasL = 0;
        hasR = 0;
        neigh = 0; // holds count of how which edge neighbours this pixel has

        U = collide[i*SIZ+(j-1)];
        D = collide[i*SIZ+(j+1)];
        L = collide[(i-1)*SIZ+j];
        R = collide[(i+1)*SIZ+j];

        if( D == gray )
        {
          hasD = 1;
          neigh += 1;
        }
        if( R == gray )
        {
          hasR = 1;
          neigh += 1;
        }
        if( U == gray )
        {
          hasU = 1;
          neigh += 1;
        }
        if( L == GRAY )
        {
          hasL = 1;
          neigh += 1;
        }
      
        if( neigh == 0 ){ v.x = 0; v.y = 0; }
        else if( neigh == 1 ) // has 1 neighbour, -the neighbor vector
        {
          if( hasL ){  v.x = 1;  v.y = 0; }   
          if( hasR ){  v.x = -1; v.y = 0; }   
          if( hasU ){  v.x = 0; v.y = 1; }      
          if( hasD ){  v.x = 0; v.y = -1; }  
        } 
        else if( neigh == 2 ) // angular. down left or right, up left or right.
        {
         if( hasD && hasU ){ v.x = 0; v.y = 0; }
         else if( hasL && hasR ){ v.x = 0; v.y = 0; }

         else if( hasD && hasR ){ v.x = -1; v.y = -1; }
         else if( hasD && hasL ){ v.x = 1; v.y = -1; }
         else if( hasU && hasR ){ v.x = -1; v.y = 1; }
         else if( hasU && hasL ){ v.x = 1; v.y = 1; }
         else{ // UP & DOWN or L & R
          avgx =( (hasL) + -hasR);
          avgy =( -hasD + (hasU) );           
          v.x = -avgx; v.y = -avgy; 
          //has_tree = 1;
         }
        }
        else if( neigh == 3 ) // left+right && up||down
        {
          // v = the non-neighbor vector
          v.x = 0; v.y = 0;
          if( hasL )  v.x += 1;     
          if( hasR )  v.x -= 1;  
          if( hasU )  v.y -= 1;     
          if( hasD )  v.y += 1;    
          has_three=1;

        }
        
        if(  neigh > 0 )
        {
          rlen  = 1.0 / sqrt(v.x^2 + v.y^2);
          v.x *= rlen;
          v.y *= rlen;
          
        }
        vecmap[i*SIZ+j] = writeColor(v);
      }
    }
  }  
}

writeColor(vec2 v)
{
  return int( atan2(v.y, v.x ) * 127 / pi );
}

readColor(c)
{
  a = c * PI / 127;
  return a;
  // vect.x = cos(a) vect.y = sin(a)
}

drawArrow(sx,sy,ex,ey,len)
{
   moveto(sx,sy);
   lineto(ex,ey);
   
   angle = atan2(ey-sy,ex-sx);
   //if(angle < 0) angle += 2*PI;
   ofs=PI*1.1;
   
   moveto(ex,ey);
   lineto(ex+cos(angle+ofs)*len, ey+sin(angle+ofs)*len);
   
   moveto(ex,ey);
   lineto(ex+cos(angle-ofs)*len, ey+sin(angle-ofs)*len);
   
   moveto(sx,sy);
   //printf("angle %g",angle*180/PI);
}

drawArrow(sx,sy,ex,ey,thick,l,angle)
{
   //angle = atan2(ey-sy,ex-sx);
   ofs=PI*1.2;
   drawcone(sx,sy,thick,ex,ey,thick);
   drawcone(sx,sy,thick,ex+cos(angle+ofs)*l, ey+sin(angle+ofs)*l,thick);
   drawcone(sx,sy,thick,ex+cos(angle-ofs)*l, ey+sin(angle-ofs)*l,thick);
}

drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }
