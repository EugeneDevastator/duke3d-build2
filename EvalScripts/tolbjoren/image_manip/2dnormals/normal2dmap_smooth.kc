// Ideas for optizations:
// dirty rect map. only calc normals and smooth where map has been modified.
// collision halo instead of white that indicates distance in pixels to surf/gray?
enum{SIZ = 150}
static map[SIZ*SIZ];
static edgemap[SIZ*SIZ];
static vecmap[SIZ*SIZ];
static smap[SIZ*SIZ];
static image[SIZ*SIZ];

struct color_t{
  r,g,b;
};
static color_t colormap[SIZ*SIZ];

static lightmap[SIZ*SIZ]; // Store light intensity of pixel
static gray;
static black;
static white;

static has_three = 0;

static lightx = SIZ/2;
static lighty = SIZ/2;
static lightR = 255;
static lightG = 255;
static lightB = 255;

struct vec2
{
  x,y;
};

static vec2 ballpos;
static vec2 ballvel;
static vec2 ballacc;
static ballradi = 1;
static closestX, closestY;

static scale = 4;

static oldmousx, oldmousy;
static brushSiz = 6;
()
{
  if(numframes==0)
  {
    ballpos.x = SIZ/2; ballpos.y = SIZ/2;
    ballvel.y = 5;
    ballacc.x = 0; ballacc.y =.05;

    gray = rgb(127,127,127);
    black = rgb(0,0,0);
    white = rgb(255,255,255);

    genmap(5,5);


    for(i=0; i<SIZ*SIZ; i++)
    map[i] = white;

    findEdges();
    calcNormals();
    smoothmap();

  }


   if(bstatus > 0)
   {
    scaledMx = mousx/scale;
    scaledMy = mousy/scale;
    scaledOldMx = oldmousx/scale;
    scaledOldMy = oldmousy/scale;
    segs = 10;
    for(i=0; i<segs; i++)
    {
      xp = int( scaledMx+lerp(scaledMx,scaledMx,i/segs) );
      yp = int( scaledMy+lerp(scaledOldMy,scaledMy,i/segs) );
      if(xp > 1 && xp < (SIZ-1) && yp > 1 && yp < (SIZ-1) )
      {
        if(bstatus == 1) paintbrush(xp,yp,white,brushSiz); // add
        if(bstatus == 2) paintbrush(xp,yp,black,brushSiz); // remove
      }
      
    }
    findEdges();     
    calcNormals();
    smoothmap();
      
   }
  

  if( bstatus == 4 )
  {
    ballpos.x = mousx/scale; ballpos.y = mousy/scale;
    ballvel.x = 0; ballvel.y = 0;
  }

  spd = 0.01;
  vx = (keystatus[32]-keystatus[30]); //D-A
  vy = (keystatus[31]-keystatus[17]); //W-S 
  ballacc.x = 0;
  ballacc.y = .1; 
  if( vx != 0 ) ballvel.x += vx * spd;
  if( vy != 0 ) ballvel.y += vy * spd;
  //if( keystatus[57] ) ballvel.y -= 5 * dt;

  //genmap(); findEdges(); calcNormals(); smoothmap();
  drawCollisionMap(); 
  moveball(); 
  drawsph(mousx,mousy,-brushSiz * scale);



  oldmousx = mousx;
  oldmousy = mousy;  

  moveto(0,siz+15);
  setfont(12,16);
  //printf("has_three neighbors = %f",has_three);
  //drawrectopen(1,1,scale*SIZ+1,scale*SIZ+1);

}

paintbrush(x,y,c,r)
{
   i=0; j=0;
   for(i=0; i<2*r; i++)
   {
      len = int( sqrt( cos(0.5*PI*(i-r)/r)) * r * 2 );
      for(j=0; j<len; j++)
      {
         xp = x+j-len/2;
         yp = y-r+i;
         if(xp > 0 && xp < (SIZ) && yp > 0 && yp < (SIZ))
         {
            map[int(xp)*int(SIZ)+int(yp)] = c;
         }
      }
   }
}
lerp(x1,x2,t){
   (x2-x1)*t;
}
genmap(scalex, scaley){
  for(i=0; i<SIZ; i++)
  for(j=0; j<SIZ; j++)
  {
    //r=0; g=0; b=0; 
    //pic(i,j,r,g,b);
    //map[i*SIZ+j] = sgn( (r+g+b)/3-127 );
    pixel = fabs( noise(20*i/SIZ, 20*j/SIZ) + noise(20*j/SIZ, 20*i/SIZ) );
    colormap[i*SIZ+j].r = 128+(pixel)*200;
    colormap[i*SIZ+j].g = 60+pixel*128;
    colormap[i*SIZ+j].b = 20+pixel*40;
    isBlack = sgn( noise(scalex*i/SIZ + 10*mousx/xres,scaley*j/SIZ + 10*mousy/yres, klock(0) ));
    c = WHITE;
    if( isBlack == 1 ) c = BLACK;
    map[i*SIZ+j] = c;
  }
}

findEdges(){
  for(i=1; i<SIZ-1; i++)
  {
    for(j=1; j<SIZ-1; j++)
    {
      U = map[i*SIZ+(j-1)];
      D = map[i*SIZ+(j+1)];
      L = map[(i-1)*SIZ+j];
      R = map[(i+1)*SIZ+j];

      if( map[i*SIZ+j] == BLACK && (U==WHITE || D==WHITE || L==WHITE || R==WHITE) )
      {
        edgemap[i*SIZ+j] = gray;
      }
      else
      {
        edgemap[i*SIZ+j] = 0;
      }
    } 
  }
}


drawCollisionMap()
{
  cls(0);
  lightx = ballpos.x;//mousx;
  lighty = ballpos.y;//mousy;
  
  applyTexture();


  
  //static hbuf[SIZ];
  for(i=0; i<SIZ; i++)
  {
    for(j=0; j<SIZ; j++)
    {
      //hbuf[i] = image[i*SIZ+j];
      c = image[i*SIZ+j];
      setcol(c);
      if( c != 0 ) drawrectfill(i*scale, j*scale, (i)*scale + (scale), (j)*scale + (scale));
    }
    //sethlin(0,j,hbuf,SIZ);
  }
  

  drawNormals();

}

lighting(i,j)
{
    dSq = ( (i-lightx)^2 + (j-lighty)^2 );
    //if( dSq < (SIZ/4)^2 )
    if( blockscan(i,j,lightx, lighty) )      // does the pixel have a free line of sight to the lightsrc?
    {
      rd = 511/(dSq*2);
      image[i*SIZ+j] = rgb( (lightr+colormap[i*SIZ+j].r)*rd , (lightg+colormap[i*SIZ+j].g)*rd, (lightb+colormap[i*SIZ+j].b)*rd );
      lightmap[i*SIZ+j] = rd;   
    }
    else
    {
      lightmap[i*SIZ+j] = 0;
      image[i*SIZ+j] = 0;
    }
}

applyTexture()
{
  for(i=0; i<SIZ; i++)
  {
    for(j=0; j<SIZ; j++)
    {
      if(map[i*SIZ+j] == black )
      {
         if(0){ lighting(i,j); }
         else
         {
           intensity = .125;
           image[i*SIZ+j] = rgb( (colormap[i*SIZ+j].r)*intensity , (colormap[i*SIZ+j].g)*intensity, (colormap[i*SIZ+j].b)*intensity );
         }
      }
      else
      {
        image[i*SIZ+j] = rgb( colormap[i*SIZ+j].r, colormap[i*SIZ+j].g, colormap[i*SIZ+j].b );
      }
    }
  }
}

blockscan (x0,y0,x1,y1)
{   
   enum {PREC=2^8};
   ix = floor(x0); ix1 = floor(x1)-ix; ixi = (ix1>0)*2-1;
   iy = floor(y0); iy1 = floor(y1)-iy; iyi = (iy1>0)*2-1;
   fx = x0-ix; if (ixi > 0) fx = 1-fx;
   fy = y0-iy; if (iyi > 0) fy = 1-fy;
   gx = fabs(x1-x0)*PREC; idx = int(gx);
   gy = fabs(y1-y0)*PREC; idy = int(gy);
        if (ix1 == 0) { id = -1; idx = 0; }
   else if (iy1 == 0) { id =  0; idy = 0; }
   else               { id = int(fy*gx - fx*gy); }
   for(c=abs(ix1)+abs(iy1);c>=0;c--)
   {
      if( map[ix*SIZ+iy] == WHITE ) return 0;

      //drawblock(ix,iy);
      if (id >= 0) { ix += ixi; id -= idy; }
              else { iy += iyi; id += idx; }
   }
   return 1;
}

lightscan (x0,y0,x1,y1)
{   
   enum {PREC=2^4};
   ix = floor(x0); ix1 = floor(x1)-ix; ixi = (ix1>0)*2-1;
   iy = floor(y0); iy1 = floor(y1)-iy; iyi = (iy1>0)*2-1;
   fx = x0-ix; if (ixi > 0) fx = 1-fx;
   fy = y0-iy; if (iyi > 0) fy = 1-fy;
   gx = fabs(x1-x0)*PREC; idx = int(gx);
   gy = fabs(y1-y0)*PREC; idy = int(gy);
        if (ix1 == 0) { id = -1; idx = 0; }
   else if (iy1 == 0) { id =  0; idy = 0; }

   else               { id = int(fy*gx - fx*gy); }
   for(c=abs(ix1)+abs(iy1);c>=0;c--)
   {
      if( map[ix*SIZ+iy] == WHITE ) return 0; // hit wall

      dSq = (ix-lightx)^2 + (iy-lighty)^2;
      rd = 511/(dSq);

      if( lightmap[ix*SIZ+iy] < rd ){
        image[ix*SIZ+iy] = rgb( rd*lightR, rd*lightG, rd*lightB );
      }

      //drawblock(ix,iy);
      if (id >= 0) { ix += ixi; id -= idy; }
              else { iy += iyi; id += idx; }
   }
   return 1;
}

drawNormals()
{
  c = rgb(255,127,0);
  setcol(255,255,255);  

  for(j=0; j<SIZ; j++)
  {
    for(i=0; i<SIZ; i++)
    {  
      if( edgemap[i*SIZ+j] == gray )
      {
        //setpix(i,j); 
        //if( (i*SIZ+j) % 3 == 0)
        //if( (i+int(nrnd)) % 4 == 0 )
        {
          vec2 v;
          //ang = readColor( vecmap[i] );
          ang = readColor(smap[i*SIZ+j]);
          v.x = cos(ang); v.y = sin(ang);
          moveto(i*scale,j*scale); lineto(i*scale + v.x * 4*scale ,j*scale + v.y * 4*scale);
        }

      }
    }
  }


}


calcNormals()
{  
  for(i=1; i<SIZ-1; i++)
  { 
    for(j=1; j<SIZ-1; j++)
    {
      if( edgemap[i*SIZ+j] == gray )
      {
        vec2 v;
        hasU = 0;
        hasD = 0;
        hasL = 0;
        hasR = 0;
        neigh = 0; // holds count of how which edge neighbours this pixel has

        if( map[i*SIZ+(j-1)] == WHITE)
        {
          hasU = 1;
          neigh += 1;
        }
        if( map[i*SIZ+(j+1)] == WHITE)
        {
          hasD = 1;
          neigh += 1;
        }
        if( map[(i-1)*SIZ+j] == WHITE)
        {
          hasL = 1;
          neigh += 1;
        }
        if( map[(i+1)*SIZ+j] == WHITE)
        {
          hasR = 1;
          neigh += 1;
        }

        if( neigh == 0 ){ v.x = 0; v.y = 0; }
        else if( neigh == 1 ) // has 1 neighbour, -the neighbor vector
        {
          if( hasL ){  v.x = 1;  v.y = 0; }   
          if( hasR ){  v.x = -1; v.y = 0; }   
          if( hasU ){  v.x = 0; v.y = 1; }      
          if( hasD ){  v.x = 0; v.y = -1; }  
        } 
        else if( neigh == 2 ) // angular. down left or right, up left or right.
        {
         if( hasD && hasU ){ v.x = 0; v.y = 0; }
         else if( hasL && hasR ){ v.x = 0; v.y = 0; }

         else if( hasD && hasR ){ v.x = -1; v.y = -1; }
         else if( hasD && hasL ){ v.x = 1; v.y = -1; }
         else if( hasU && hasR ){ v.x = -1; v.y = 1; }
         else if( hasU && hasL ){ v.x = 1; v.y = 1; }
         else{ // UP & DOWN or L & R
          avgx =( hasL + -hasR );
          avgy =( hasD + -hasU );           
          v.x = -avgx; v.y = -avgy; 
         }
        }
        else if( neigh == 3 ) // left+right && up||down
        {
          // v = the non-neighbor vector
          v.x = 0; v.y = 0;
          if( hasL )  v.x += 1;     
          if( hasR )  v.x -= 1;  
          if( hasU )  v.y += 1;     
          if( hasD )  v.y -= 1;    
        }
        
        if(  neigh > 0 )
        {
          rlen  = 1.0 / sqrt(v.x^2 + v.y^2);
          v.x *= rlen;
          v.y *= rlen;  
        }
        vecmap[i*SIZ+j] = writeColor(v);
      }
    }
  }  
}

smoothmap()
{
  for(i=1; i<SIZ-1; i++)
  for(j=1; j<SIZ-1; j++)
  {
    if(edgemap[i*SIZ+j] == GRAY)
    {
      current = vecmap[i*SIZ+j];
      U = vecmap[i*SIZ+(j-1)];
      D = vecmap[i*SIZ+(j+1)];
      L = vecmap[(i-1)*SIZ+j];
      R = vecmap[(i+1)*SIZ+j];


      UL = vecmap[(i-1)*SIZ+(j-1)];
      UR = vecmap[(i+1)*SIZ+(j-1)];

      DL = vecmap[(i-1)*SIZ+(j+1)];
      DR = vecmap[(i+1)*SIZ+(j+1)];

      count = 1;
      avgx=0; avgy=0;
      avgx += cos(current); avgy += sin(current);

      if( edgemap[i*SIZ+(j-1)] == gray ){ avgx += cos(U); avgy += sin(U); count++;}
      if( edgemap[i*SIZ+(j+1)] == gray ){ avgx += cos(D); avgy += sin(D); count++;}
      if( edgemap[(i-1)*SIZ+j] == gray ){ avgx += cos(L); avgy += sin(L); count++;}
      if( edgemap[(i+1)*SIZ+j] == gray ){ avgx += cos(R); avgy += sin(R); count++;}

      if( edgemap[(i-1)*SIZ+(j-1)] == gray ){ avgx += cos(UL); avgy += sin(UL); count++;}
      if( edgemap[(i+1)*SIZ+(j-1)] == gray ){ avgx += cos(UR); avgy += sin(UR); count++;}
      if( edgemap[(i-1)*SIZ+(j+1)] == gray ){ avgx += cos(DL); avgy += sin(DL); count++;}
      if( edgemap[(i+1)*SIZ+(j+1)] == gray ){ avgx += cos(DR); avgy += sin(DR); count++;}
      
      avgx /= count; avgy /= count;
      
      smap[i*SIZ+j] = atan2(avgy, avgx); // convert back to angle.
    }
  }  
}

writeColor(vec2 v)
{
  a = atan2(v.y,v.x);
  return a;
  //return ( a * 127 / pi );
}

readColor(c)
{
  //a = c * PI / 127;
  a = c;  
  return a;
  // vect.x = cos(a) vect.y = sin(a)
}

moveball()
{
  candig = 0; diggdirx =0; diggdiry = 0;
  collide  = 0;
  
  
  for(steps=0; steps<30; steps++)
  {
    dt = 1/30;
    // implicit euler
    ballvel.x += ballacc.x * dt;
    ballvel.y += ballacc.y * dt;

    ballpos.x += ballvel.x * dt;
    ballpos.y += ballvel.y * dt;
    
    ballacc.x = 0;
    ballacc.y = 0;

    if( ballpos.x < ballradi || ballpos.x > (SIZ-ballradi) )
    {
      //ballpos.x -= ballvel.x/2;
      ballpos.x -= ballradi*sgn(ballvel.x);
    }

    if( ballpos.y < ballradi || ballpos.y > (SIZ-ballradi) )
    {
      //ballpos.y -= ballvel.y/2;
      ballpos.y -= ballradi*sgn(ballvel.y);
    }

    closestx=0; closesty=0; mind = 1e32;
    minx = int(ballpos.x - ballradi*2);
    miny = int(ballpos.y - ballradi*2);
    maxx = int(ballpos.x + ballradi*2);
    maxy = int(ballpos.y + ballradi*2);
    //drawrectopen(minx,miny,maxx,maxy);

    for(i=minx; i<maxx; i++)
    for(j=miny; j<maxy; j++)
    {
      if( edgemap[i*SIZ+j] == gray )
      {
        d = (ballpos.x - i)^2 + (ballpos.y - j)^2;
                
        if( d < mind )
        {
          mind = d;
          closestx = i;
          closesty = j;
        }
      }
    }

    
    if( mind < (ballradi*0.9)^2)
    {
      dist = sqrt(mind);
      canDig = 1;
      diggdirx = ballpos.x;
      diggdiry = ballpos.y;
      ballpos.x -= ballvel.x /2;
      ballpos.y -= ballvel.y /2;
      vel = sqrt(ballvel.x^2 + ballvel.y^2);
      if( 1 )
      {
        ang = readColor( smap[closestx*SIZ+closesty] );
        normalx = cos(ang);
        normaly = sin(ang);

        dot = ballvel.x * normalx + ballvel.y * normaly;
        
        // calc reflection vector
        // R=I-2*N*D
        ballvel.x = ballvel.x - 2*normalx*dot;
        ballvel.y = ballvel.y - 2*normaly*dot;
        
        // todo. penetration dist instead of vel?
        //ballpos.x -= ballvel.x * normalx;
        //ballpos.y -= ballvel.y * normaly;
        
        ballvel.x *= 0.5;
        ballvel.y *= 0.5;
        
        setcol(255,0,0);
        collidescreenx = (closestx)*scale;
        collidescreeny = (closesty)*scale;
        drawrectfill(collidescreenx,collidescreeny,collidescreenx+scale,collidescreeny+scale);
      }
    }
  }

  // Eraser ball!
  //if(keystatus[57]) // canDigThis
  if(0)//canDig)
  {
   paintbrush(ballpos.x,ballpos.y,black,ballRadi*2);      
   findEdges();     
   calcNormals();
   smoothmap();
  }

  if( candig > 0  ) setcol(255,0,0);
  else setcol(0,128,0);
  
  if(1)
    drawsph(ballpos.x*scale, ballpos.y*scale, ballradi*scale);
  else{
    setcol(255,255,255);
    glEnable(GL_ALPHA_TEST);
    t=glsettex("badeball.png");
    drawspr(ballpos.x*scale, ballpos.y*scale, ballradi*scale, klock() );
    glremovetex(t);
  }
   
  moveto(ballpos.x*scale, ballpos.y*scale);
  lineto( (ballpos.x+ballvel.x)*scale, (ballpos.y+ballvel.y)*scale );
}

// for collisionmaps with multiple, seperated shapes... or just make sure q is a pixel
// See if the point p with velocity vector s intersects shape at position Q in the collisionmap
pointCmapIntersection(vec2 p, vec2 s, vec2 q)
{
  d = sqrt(s.x^2+s.y^2); // Magnitude
  if( d < 1e-6 ) return 0;
  snx = s.x / d; // Normalize
  sny = s.y / d;
  stx = p.x - q.x; // Look dir
  sty = p.y - q.y;
  for(i=0; i<int(d); i++) // Move integer steps in st vector
  {
    posx = stx + i * snx;
    posy = sty + i * sny;
    col = map[stx*SIZ+sty];
    if( col == BLACK ) return (d / i); // returns distance to obstancle q
  }
}

drawArrow(sx,sy,ex,ey,len)
{
   moveto(sx,sy);
   lineto(ex,ey);
   
   angle = atan2(ey-sy,ex-sx);
   //if(angle < 0) angle += 2*PI;
   ofs=PI*1.1;
   
   moveto(ex,ey);
   lineto(ex+cos(angle+ofs)*len, ey+sin(angle+ofs)*len);
   
   moveto(ex,ey);
   lineto(ex+cos(angle-ofs)*len, ey+sin(angle-ofs)*len);
   
   moveto(sx,sy);
   //printf("angle %g",angle*180/PI);
}

drawArrow(sx,sy,ex,ey,thick,l,angle)
{
   //angle = atan2(ey-sy,ex-sx);
   ofs=PI*1.2;
   drawcone(sx,sy,thick,ex,ey,thick);
   drawcone(sx,sy,thick,ex+cos(angle+ofs)*l, ey+sin(angle+ofs)*l,thick);
   drawcone(sx,sy,thick,ex+cos(angle-ofs)*l, ey+sin(angle-ofs)*l,thick);
}
drawrectfill(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }
