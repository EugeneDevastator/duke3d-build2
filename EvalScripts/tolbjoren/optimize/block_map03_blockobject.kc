   // Bounding Box BlockMap by Torbjoern
   // source of inspiration: http://freespace.virgin.net/hugo.elias/models/m_colide.htm
   // divides space into blocks
   // 1. at each frame clear occupied blocks
   // 2. loop thru ALL particles and add to blocks they cover.
   // 3. loop thru all modified blocks
   // if block has more than 1 particle, perform interactions


enum{MAX_BOXES = 200}
enum{block_sx = 6, block_sy = 6}
enum{max_particles_inside = MAX_BOXES / block_sx}
static tooManyInOne = 0; // Becomes true if there are to many objects inside a single block. In that case, increase block_pointer[][x] size x.
enum{num_blocks = block_sx * block_sy}

struct block{
  isModified;
  num_particles;
  particles[max_particles_inside];
};
static block blockmap[block_sx][block_sy];

// the bounding box is defined by its upper left and lower right corners.
struct bbox{
  double xmin; double ymin;
  double xmax; double ymax;
};

struct vec2d{
  double x, double y;
}

static bbox boxes[MAX_BOXES];
static vec2d dirs[MAX_BOXES];
static double collided[MAX_BOXES];
static collisionPair[MAX_BOXES][MAX_BOXES]; // Remember if what boxes have collided to prevent a pair beeing checked twice.

static oldmousx, oldmousy;
static time,oldtime;
()
{
   time = klock(0); dt = time-oldtime; oldtime = time;
  cls(0); 
   
   if(numframes==0)
   {
      clearGrid();
      xmin = 10; xmax = xres-10;
      ymin = 10; ymax = yres-10;
      
      boxesMade = 0;
      for(i=0; i<MAX_BOXES; i++)
      {
        collided = 1;
        while( collided == 1) // generate a box with position, size and direction. Try again if it didnt fit in.
        {
          collided = 0;
          boxes[i].xmin = xmin+rnd*(xmax-xmin);
          boxes[i].ymin = ymin+rnd*(ymax-ymin);
          double siz = rnd*25;
          boxes[i].xmax = boxes[i].xmin + 3+siz;
          boxes[i].ymax = boxes[i].ymin + 3+siz;
          double ang = rnd*2*PI;
          spd = 1;
          dirs[i].x = cos(ang) * spd;
          dirs[i].y = sin(ang) * spd;
          
          if(i % 50 == 0){          
          drawParticles(boxesMade); // draw boxes as they are made for fun.
          refresh();
          cls(0);}
          for(j=0; j<boxesMade; j++)
          {
            if(i==j) continue;
            if( intersects2(boxes[i], boxes[j] )){ collided = 1; break; }
          }
          boxesMade+=1;
        }
       }
   }  


  iters = 10; // Move in small steps
  delta = 1.0 / iters;
  for(i=0; i<iters; i++){
   moveParticles(delta);
   clearCollisionPairs();
   if(0){ bruteForce(); // Set to 1 to see how much slower bruteForce is.
   } else {
     clearGrid();
     scan();
     doInteractions();
   }
  }   
   
  drawGrid();  
  drawParticles(MAX_BOXES);

  /*dirs[0].x = mousx-oldmousx;
  dirs[0].y = mousy-oldmousy; 
  oldmousx = mousx;
  oldmousy = mousy;*/
  moveto(0,0);
  setfont(12,16);
  setcol(0xffffff);
  printf("Too many? %g \n %g maximum", tooManyInOne, max_particles_inside);
  printf("delta = %f", dt);
}

  // does this rectangle intersect with the other one?
intersects(bbox a, bbox b) {
  return ! (( a.xmin > (b.xmax) ) || ( (a.xmax) < (b.xmin) ) || 
           ( (a.ymin) > (b.ymax) ) || ( (a.ymax) < (b.ymin) ) )
}

intersects2(bbox a, bbox b) {
  return 
  (a.xmin < b.xmax ) && (a.xmax > b.xmin ) &&
  (a.ymin < b.ymax ) && (a.ymax > b.ymin )
}

clearCollisionPairs(){
  for(i=0; i<MAX_BOXES; i++){
    for(j=0; j<MAX_BOXES; j++){ collisionPair[i][j] = -1; }
  }
}

bruteForce()
{
  for(aIdx=0; aIdx<MAX_BOXES; aIdx++){
    for(bIdx=aIdx+1; bIdx<MAX_BOXES; bIdx++){
      if(aIdx==bIdx) continue;
      if( collisionPair[aIdx][bIdx] != -1 || collisionPair[bIdx][aIdx] != -1) continue; 
      if(intersects2(boxes[aIdx], boxes[bIdx] ) ){      
        tmpx = dirs[aIdx].x; 
        tmpy = dirs[aIdx].y;
        dirs[aIdx].x = dirs[bIdx].x; 
        dirs[aIdx].y = dirs[bIdx].y;
        dirs[bIdx].x = tmpx; 
        dirs[bIdx].y = tmpy;

        collided[aIdx] = 1;
        collided[bIdx] = 1;
        collisionPair[aIdx][bIdx] = 1; 
        collisionPair[bIdx][aIdx] = 1;
      }  
    }
  }
}

test(Block testBlock)
{
   for(aPtr=0; aPtr<testBlock.num_particles; aPtr++){
     aIdx = testBlock.particles[aPtr];

     for(bPtr=aPtr+1; bPtr<testBlock.num_particles; bPtr++){
      // dont collide box with self
      if(aPtr == bPtr) continue; 

      bIdx = testBlock.particles[bPtr];

      // again, dont collide box with self
      if( aIdx == bIdx ) continue; 

      // if boxes have collided this frame, dont collide them again
      if( collisionPair[aIdx][bIdx]>-1 || collisionPair[bIdx][aIdx] > -1) continue;                  
   
      if( intersects2(boxes[aIdx], boxes[bIdx]) ){          
        // boxes swap directions                  
        tmpx = dirs[aIdx].x; 
        tmpy = dirs[aIdx].y;
        dirs[aIdx].x = dirs[bIdx].x; 
        dirs[aIdx].y = dirs[bIdx].y;
        dirs[bIdx].x = tmpx; 
        dirs[bIdx].y = tmpy;

        collided[aIdx] = 1;
        collided[bIdx] = 1;
        collisionPair[aIdx][bIdx] = 1; 
        collisionPair[bIdx][aIdx] = 1;
      }
     }
   }
}

doInteractions()
{
   for(i=0; i<block_sx; i++)
   {
      for(j=0; j<block_sy; j++)
      {
         if( blockmap[i][j].num_particles > 0) // more than 1 block.
         {
         test( blockmap[i][j] );
         }
      }      
   }
}

clearGrid(){
   // 1. at each frame clear data
   for(i=0; i<block_sx; i++)
   {
      for(j=0; j<block_sy; j++)
      {
        for(k=0; k<max_particles_inside; k++){ blockmap[i][j].particles[k] = -1; }

        blockmap[i][j].isModified = 0;
        blockmap[i][j].num_particles = 0;
      }

   }
}

scan()
{ 
   // scan thru all particles and assign to blocks in blockmap
   for(i=0; i<MAX_BOXES; i++)
   {
      // 4 corners of a box...
      xTL = floor( boxes[i].xmin/(xres-1)*block_sx );
      yTL = floor( boxes[i].ymin/(yres-1)*block_sy );
      xTR = floor( boxes[i].xmax/(xres-1)*block_sx );
      yTR = floor( boxes[i].ymin/(yres-1)*block_sy );
      xBL = floor( boxes[i].xmin/(xres-1)*block_sx );
      yBL = floor( boxes[i].ymax/(yres-1)*block_sy );
      xBR = floor( boxes[i].xmax/(xres-1)*block_sx );
      yBR = floor( boxes[i].ymax/(yres-1)*block_sy );

      // Set blocks modified
      setBlock(xTL, yTL, i);
      setBlock(xTR, yTR, i);
      setBlock(xBL, yBL, i);
      setBlock(xBR, yBR, i);
   }   
}

// insert box i into blockmap[xp][yp] 
setBlock(xp,yp,i){
    
    for(j=0; j<max_particles_inside; j++)
    {
       if(j == max_particles_inside - 1) tooManyInOne = 1; // increase max particles inside array
       if(blockmap[xp][yp].particles[j] == i ) return; // allready registered

       if(blockmap[xp][yp].particles[j] == -1) // find an empty space in the ptr list
       {
          blockmap[xp][yp].particles[j] = i; // set this pos occupied by a particle
          blockmap[xp][yp].num_particles++; // increment num particles living in this block
          break; // found a space, exit loop
       }
    }
    blockmap[xp][yp].isModified = 1; // Set this block to modified
}

drawGrid(){
   incX = (xres/block_Sx);
   incY = (yres/block_Sy);
   setfont(4,6);

   for(i=0; i<block_Sx; i++)
   {
      for(j=0; j<block_Sy; j++)
      {
         screenPx = i*(incX);
         screenPy = j*(incY);
         
         setcol(0x333333);
         if( blockmap[i][j].isModified == 1 )
         {
            setcol(0x005500);
         }
         //drawrectfill(screenPx,screenPy,screenPx+incX,screenPy+incY);
         
         for(k=0; k<blockmap[i][j].num_particles; k++)
         {   
            pointer = blockmap[i][j].particles[k];
            //if(pointer > -1) // A block lives here!
            {
               setcol(0xffffff);
               moveto(screenPx,screenPy+2+k*9);
               printf("%.f",pointer);
            }
         }
         setcol(255,255,255);
         drawrectopen(screenPx,screenPy,(i+1)*(incX), (j+1)*(incY));
      }
   }
}

moveParticles(double dt){
  for(i=0; i<MAX_BOXES; i++)
  {
    boxes[i].xmin += dirs[i].x*dt;
    boxes[i].ymin += dirs[i].y*dt;
    boxes[i].xmax += dirs[i].x*dt;
    boxes[i].ymax += dirs[i].y*dt;
    if( boxes[i].xmin < 0) dirs[i].x *= -1;
    if( boxes[i].ymin < 0) dirs[i].y *= -1;
    if( boxes[i].xmax > xres) dirs[i].x *= -1;
    if( boxes[i].ymax > yres) dirs[i].y *= -1;
  }
}

drawParticles(boxesMade)
{
   setcol(0xffffff);
   for(i=0; i<boxesMade; i++)
   {
      if( collided[i] == 0){ setcol(255,0,0); }else{ setcol(0,255,0); } 
      collided[i] = 0;
      drawrectopen( boxes[i].xmin, boxes[i].ymin, boxes[i].xmax, boxes[i].ymax);
   }
}
drawrectfill(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }
