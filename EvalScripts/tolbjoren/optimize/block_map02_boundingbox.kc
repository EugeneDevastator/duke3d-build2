   // Bounding Box BlockMap by Torbjoern
   // source of inspiration: http://freespace.virgin.net/hugo.elias/models/m_colide.htm
   // divides space into blocks
   // 1. at each frame clear occupied blocks
   // 2. loop thru ALL particles and add to blocks they cover.
   // 3. loop thru all modified blocks
   // if block has more than 1 particle, perform interactions


enum{MAX_BOXES = 400}
enum{block_Sx = 10, block_Sy = 10}
enum{max_particles_inside = MAX_BOXES / block_Sx}
static tooManyInOne = 0;
enum{num_blocks = block_sx * block_sy}

//column-major access means: idx = (x*height+y)
static block_num_particles[num_blocks]; // Number of bounding box corners inside a block
// Use column-major on these two:
static block_pointer[num_blocks][max_particles_inside]; // for a given block, stores pointers (indices) to box corners inside
static block_isModified[num_blocks]; // any box corners inside?

struct bbox{
  double xmin;
  double ymin;
  double xmax;
  double ymax;
};

struct vec2d{
  double x, double y;
}

static bbox boxes[MAX_BOXES];
static vec2d dirs[MAX_BOXES];
static double collided[MAX_BOXES];
static collisionPair[MAX_BOXES][MAX_BOXES]; // Remember if what boxes have collided to prevent a pair beeing checked twice.

static oldmousx, oldmousy;
()
{
   cls(0); 
   
   if(numframes==0)
   {
      clearGrid();
      xmin = 10; xmax = xres-10;
      ymin = 10; ymax = yres-10;
      
      boxesMade = 0;
      for(i=0; i<MAX_BOXES; i++)
      {
        collided = 1;
        while( collided == 1) // generate a box with position, size and direction. Try again if it didnt fit in.
        {
          collided = 0;
          boxes[i].xmin = xmin+rnd*(xmax-xmin);
          boxes[i].ymin = ymin+rnd*(ymax-ymin);
          double siz = rnd*5;
          boxes[i].xmax = boxes[i].xmin + 3+siz;
          boxes[i].ymax = boxes[i].ymin + 3+siz;
          double ang = rnd*2*PI;
          spd = 1;
          dirs[i].x = cos(ang) * spd;
          dirs[i].y = sin(ang) * spd;
          for(j=0; j<boxesMade; j++)
          {
            if(i==j) continue;
            if( intersects2(boxes[i], boxes[j] )){ collided = 1; break; }
          }
          boxesMade+=1;
        }
       }
   }  


  iters = 10; // Move in small steps
  delta = 1.0 / iters;
  for(i=0; i<iters; i++){
   moveParticles(delta);
   clearCollisionPairs();
   if(0){ bruteForce(); // Set to 1 to see how much slower bruteForce is.
   } else {
     clearGrid();
     scan();
     doInteractions();
   }
  }   
   
  drawGrid();  
  drawParticles();

  //translateBox( boxes[0], mousx, mousy );
  /*dirs[0].x = mousx-oldmousx;
  dirs[0].y = mousy-oldmousy; 
  oldmousx=  mousx;
  oldmousy = mousy;*/
  moveto(0,0);
  setfont(12,16);
  setcol(0xffffff);
  printf("Too many? %g \n %g maximum", tooManyInOne, max_particles_inside);
}

  // does this rectangle intersect with the other one?
intersects(bbox a, bbox b) {
  return ! (( a.xmin > (b.xmax) ) || ( (a.xmax) < (b.xmin) ) || 
           ( (a.ymin) > (b.ymax) ) || ( (a.ymax) < (b.ymin) ) )
}

intersects2(bbox a, bbox b) {
  return 
  (a.xmin < b.xmax ) && (a.xmax > b.xmin ) &&
  (a.ymin < b.ymax ) && (a.ymax > b.ymin )
}

clearCollisionPairs(){
  for(i=0; i<MAX_BOXES; i++){
    for(j=0; j<MAX_BOXES; j++){ collisionPair[i][j] = -1; }
  }
}

bruteForce()
{
  for(aIdx=0; aIdx<MAX_BOXES; aIdx++){
    for(bIdx=0; bIdx<MAX_BOXES; bIdx++){
      if(aIdx==bIdx) continue;
      if( collisionPair[aIdx][bIdx]>-1 || collisionPair[bIdx][aIdx] > -1) continue; 
      if(intersects2(boxes[aIdx], boxes[bIdx] ) ){      
        tmpx = dirs[aIdx].x; 
        tmpy = dirs[aIdx].y;
        dirs[aIdx].x = dirs[bIdx].x; 
        dirs[aIdx].y = dirs[bIdx].y;
        dirs[bIdx].x = tmpx; 
        dirs[bIdx].y = tmpy;

        collided[aIdx] = 1;
        collided[bIdx] = 1;
        collisionPair[aIdx][bIdx] = 1; 
        collisionPair[bIdx][aIdx] = 1;
      }  
    }
  }
}

doInteractions()
{
   for(i=0; i<block_Sx; i++)
   {
      for(j=0; j<block_Sy; j++)
      {
         particlesInBlock = block_num_particles[i*block_sy+j];
         if( particlesInBlock > 0) // more than 1 block.
         {
            for(aPtr=0; aPtr<particlesInBlock; aPtr++){
              aIdx = block_pointer[i*block_sy+j][aPtr];

              for(bPtr=0; bPtr<particlesInBlock; bPtr++){
                if(aPtr == bPtr) continue;

                bIdx = block_pointer[i*block_sy+j][bPtr];
                if( aIdx == bIdx ) continue;
                
               
                if( collisionPair[aIdx][bIdx]>-1 || collisionPair[bIdx][aIdx] > -1) continue;                  
            
                if( intersects2(boxes[aIdx], boxes[bIdx]) ){          
                  tmpx = dirs[aIdx].x; 
                  tmpy = dirs[aIdx].y;
                  dirs[aIdx].x = dirs[bIdx].x; 
                  dirs[aIdx].y = dirs[bIdx].y;
                  dirs[bIdx].x = tmpx; 
                  dirs[bIdx].y = tmpy;

                  collided[aIdx] = 1;
                  collided[bIdx] = 1;
                  collisionPair[aIdx][bIdx] = 1; 
                  collisionPair[bIdx][aIdx] = 1;
                  

                }
              }
            }
         }
      }      
   }
}

clearGrid(){
   // 1. at each frame clear data
   for(i=0; i<num_blocks; i++)
   {
      block_isModified[i] = 0;
      for(j=0; j<max_particles_inside; j++)
      {
         block_pointer[i][j] = -1; // empty all pointers
         block_num_particles[i*block_sy+j] = 0;
      }
   }
}

scan()
{ 
   // scan thru all particles and assign to blocks
   for(i=0; i<MAX_BOXES; i++)
   {
      xTL = floor( boxes[i].xmin/(xres-1)*block_Sx );
      yTL = floor( boxes[i].ymin/(yres-1)*block_Sy );
      xTR = floor( boxes[i].xmax/(xres-1)*block_Sx );
      yTR = floor( boxes[i].ymin/(yres-1)*block_Sy );
      xBL = floor( boxes[i].xmin/(xres-1)*block_Sx );
      yBL = floor( boxes[i].ymax/(yres-1)*block_Sy );
      xBR = floor( boxes[i].xmax/(xres-1)*block_Sx );
      yBR = floor( boxes[i].ymax/(yres-1)*block_Sy );

      // Set blocks modified
      setBlock(xTL, yTL, i);
      setBlock(xTR, yTR, i);
      setBlock(xBL, yBL, i);
      setBlock(xBR, yBR, i);
   }   
}

setBlock(xp,yp,i){
    
    for(j=0; j<max_particles_inside; j++)
    {
       if(j == max_particles_inside - 1) tooManyInOne = 1; // increase max particles inside array
       if(block_pointer[xp*block_sy+yp][j] == i ) return; // allready registered

       if(block_pointer[xp*block_sy+yp][j] == -1) // find an empty space in the ptr list
       {
          block_pointer[xp*block_sy+yp][j] = i; // set this pos occupied by a particle
          block_num_particles[xp*block_sy+yp]++; // increment num particles living in this block
          break; // found a space, exit loop
       }
    }
    block_isModified[xp*block_sy+yp] = 1; // Set this block to modified
}

drawGrid(){
   incX = (xres/block_Sx);
   incY = (yres/block_Sy);
   setfont(4,6);//(6,8);

   for(i=0; i<block_Sx; i++)
   {
      for(j=0; j<block_Sy; j++)
      {
         screenPx = i*(incX);
         screenPy = j*(incY);
         
         setcol(0x333333);
         if(block_isModified[i*block_sy+j] == 1)
         {
            setcol(0x005500);
         }
         //texquad(screenPx,screenPy,incX, incY); // expensive!
         //drawrectfill(screenPx,screenPy,screenPx+incX,screenPy+incY); // also expensive.
         
         for(k=0; k<max_particles_inside; k++)
         {   
            pointer = block_pointer[i*block_sy+j][k];
            if(pointer > -1) // A block lives here!
            {
               setcol(0xffffff);
               moveto(screenPx,screenPy+2+k*9);
               printf("%.f",pointer);
            }
         }
         setcol(255,2555,255);
         drawrectopen(screenPx,screenPy,(i+1)*(incX), (j+1)*(incY));
      }
   }
}

moveParticles(double dt){
  for(i=0; i<MAX_BOXES; i++)
  {
    boxes[i].xmin += dirs[i].x*dt;
    boxes[i].ymin += dirs[i].y*dt;
    boxes[i].xmax += dirs[i].x*dt;
    boxes[i].ymax += dirs[i].y*dt;
    //translateBox( boxes[i], dirs[i].x, dirs[i].y );
    if( boxes[i].xmin < 0) dirs[i].x *= -1;
    if( boxes[i].ymin < 0) dirs[i].y *= -1;
    if( boxes[i].xmax > xres) dirs[i].x *= -1;
    if( boxes[i].ymax > yres) dirs[i].y *= -1;
  }
}

drawParticles()
{
   setcol(0xffffff);
   for(i=0; i<MAX_BOXES; i++)
   {
      if( collided[i] == 0){
        setcol(255,0,0);
      }else{
      //drawrectfill( boxes[i].xmin, boxes[i].ymin, boxes[i].xmax, boxes[i].ymax);
        setcol(0,255,0);
      }
      drawrectopen( boxes[i].xmin, boxes[i].ymin, boxes[i].xmax, boxes[i].ymax);
      collided[i] = 0;
      //xp = int( px[i]/xres*block_Sx );
      //yp = int( py[i]/yres*block_Sy );
      //moveto(px[i]-5,py[i]-15);
      //printf("%.f",i);
      
      //printf("\n\n\n(%.f,%.f)", xp, yp);   // block coordinate
   }
}

texquad(x,y,width,height)
{
   glBegin(GL_COMPLEX);
   glTexCoord(0,0);glVertex(x,y);
   glTexCoord(1,0);glVertex(x+width,y);
   glTexCoord(1,1);glVertex(x+width,y+height);
   glTexCoord(0,1);glVertex(x,y+height);
   glEnd();
}

//drawrectfill2(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }
drawrectfill(x0,y0,x1,y1) { for(x=x0;x<x1;x++) { moveto(x,y0); lineto(x,y1); } }
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }
