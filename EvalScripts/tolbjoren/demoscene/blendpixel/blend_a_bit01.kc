// todo: profile and optimize.
static screen[320][240];
static tempbuf[320][240];

static startBench = 0;
()
{
   cls(0);
   

   startBench = klock(0);

   render();
   
   t = klock(0);
   renderTime = t - startBench;
   startBench = t;
   


  
   
   scaleblit();
   
   t = klock(0);
   scaleTime = t - startBench;
   startBench = t;
   
   DrawScreen();
   
   t = klock(0);
   drawscreenTime = t - startBench;
   startBench = t;
   
   moveto(0,0); setcol(0xffffff); 
   printf("render%g secs", renderTime);   
   printf("\nscale %g secs", renderTime);
   printf("\ndrawscreen %g secs", drawscreenTime);
   
}

blendAvg(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);

   result = rgb( (r1+r2)/2 , (g1+g2)/2 , (b1+b2)/2 );   
   
   return result;
}

blendAdd(p1,p2) //src, target
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);
   
   r2 += r1;
   g2 += g1;
   b2 += b1;
   // Clipping to 0xff is done by rgb function
   result = rgb(r2-15,g2-15,b2-15);  
   return result;
}


blendMul(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);

   result = rgb( (r1*r2)/256 , (g1*g2)/256 , (b1*b2)/256 );   
   
   return result;
}


render()
{
   tick = klock(0)*400;
   
   d = 0;
   for(i=0; i<16; i++) // snake length
   {
      d = tick + i * 2;
      /*
      r = (sin(tick*.1+i)*0.234897) * 127+128;
      g = (sin(tick*.1+i)*0.123489) * 127+128;
      b = (sin(tick*.1+i)*0.312348) * 127+128;      
      */
      //r = rnd*255; g= rnd*255; b = rnd*255;      
/*      
      drawsprite(
      mousx+i,
      mousy, 
      hsvToRgb(d%360,1,1) );
*/
      drawsprite(
      160+sin(d*0.0034) * sin(d*0.0134) * 150,
      120+sin(d*0.0033) * sin(d*0.0234) * 110, 
      hsvToRgb(d%360,1,1) );

      //rgb(r,g,b) );
   }
   
   for(x=0; x<320; x++)
   for(y=0; y<320; y++)
   {
      tempbuf[x][y] = screen[x][y];
   }
}

drawsprite(x,y,c)
{
   screen[x][y] = c;
   screen[x+1][y] = c;
   screen[x+1][y+1] = c;
   screen[x][y+1] = c;
}

scaleblit()
{
   for(y=0; y<240; y++)
   for(x=0; x<320; x++)
   {
      //c = (y*0.95 + 12) 
      //   + (x*0.95 + 16);
      
      //setcol( blendadd(screen[x][y],0));
      //setpix(x,y);
      
      xofs = 8+nrnd/2;
      yofs = 6+nrnd/2;
      
      random = rnd;
      if(random < .9)   
      screen[x][y] = blendavg( screen[x][y], tempbuf[int(x*0.95+xofs)][int(y*0.95+yofs)] );
      else if(random < .98){
         screen[x][y] = blendadd( screen[x][y], tempbuf[int(x*0.95+xofs)][int(y*0.95+yofs)] );
      }
      else
      {
         //screen[x][y] = 0;//blendmul( screen[x][y], tempbuf[int(x*0.95+8+nrnd)][int(y*0.95+6+nrnd)] );
      }
      
      hole = 15;
      if(x < 160+hole && x > 160-hole && y < 120+hole && y > 120-hole){
         //screen[x][y] = 0;
         tempbuf[x][y]  = 0;
      }
      
   }
}

DrawScreen()
{
   for(y=0; y<240; y++)
   for(x=0; x<320; x++)
   {
      setcol(screen[x][y]);
      setpix(x,y);
   }
}

hex2rgb(mrgb,&r,&g,&b)
{  
   r = (mrgb / 2^16);
   g = (mrgb / 2^8) % 256;
   b = mrgb % 256;   
}

hsvToRgb(h,s,v){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
   return r*2^16 + g*2^8 + b; 
}

beginTime()
{
   startBench = klock(0);
}
endTime(){
   benchTime = klock(0) - startBench;
   printf("%g secs", benchTime);
}