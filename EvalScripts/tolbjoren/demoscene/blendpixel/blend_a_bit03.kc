// todo: profile and optimize.
// todo: maybe faster without all calls to hex2rgb and color conversion in blend funcs?
// No. not faster to use and array with an extra dimenstion for rgb.
// probably because of arraymath and boundscheck every time.
// putting the screen in one big array is fastest. prolly.

enum{W=128, H=128}
static screen[W][H][3];
static tempbuf[W][H][3];

static startBench = 0;

()
{
   
   

   if(numframes==0)
   {
      glCullFace(GL_BACK); 
      glDisable(GL_ALPHA_TEST);
      glDisable(GL_DEPTH_TEST);
   }

cls(0);

   renderTime = 0; scaleTime = 0; drawscreenTime = 0;
   
   t = klock(0);
   
   startBench = t;
      zeroToOne = (1+cos(t/2))/2;
      weight = 0.95 + zeroToOne/(20-1); //(mousx)/(xres-1);
      crossFade(weight); 
      t = klock(0);
   xfadeTime = t - startBench;
   
   startBench = t;   
      render(); // draws a "sprite" to the screen buf
      t = klock(0);
   renderTime = t - startBench;
   
   startBench = t;
      scaleblit(); // scales the screen, a blend between current and prev frame
      t = klock(0);
      scaleTime = t - startBench;
   startBench = t;
   
   //DrawScreen();
   
   static buf[H][W];
   for(y=0; y<H; y++)
   for(x=0; x<W; x++)
   {
      buf[y][x] = rgb(screen[x][y][0],screen[x][y][1],screen[x][y][2]);
      //tempbuf[x][y] = screen[x][y]; // copy screen into tempbuf for feedback
      tempbuf[x][y][0] = screen[x][y][0];
      tempbuf[x][y][1] = screen[x][y][1];
      tempbuf[x][y][2] = screen[x][y][2];   
   }
   b = glsettex(buf,W,H);
   setcol(0xffffff);
      
   texquad(0,0,xres,yres);
   
   glremovetex(b);
   

   
   t = klock(0);
   drawscreenTime = t - startBench;
   startBench = t;
   
   
   moveto(0,0); setcol(0xffffff); 
   printf("\nrender       %f mspf", renderTime*1000);   
   printf("\nscale        %f mspf", scaleTime*1000);
   printf("\ndrawscreen   %f mspf", drawscreenTime*1000);
   printf("\nxfade        %f mspf", xfadeTime*1000);
   printf("\nweight   %f ", weight);
   
}

crossFade(weight){
  
   for(x=0; x<W; x++)
   for(y=0; y<H; y++)
   {
      screen[x][y][0] = screen[x][y][0] * weight + 1 * (1.0-weight);
      screen[x][y][1] = screen[x][y][1] * weight + 1 * (1.0-weight); 
      screen[x][y][2] = screen[x][y][2] * weight + 1 * (1.0-weight);  
      
   }
}

blendAvg(r1,g1,b1,r2,g2,b2,&ro,&go,&bo)
{
   ro = (r1+r2)/2;
   go = (g1+g2)/2;
   bo = (b1+b2)/2;   
}


blendAdd(r1,g1,b1,r2,g2,b2,&ro,&go,&bo) //src, target
{
   r2 += r1;
   g2 += g1;
   b2 += b1;
   ro = r2;
   go = g2;
   bo = b2;
}

/*
blendMul(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);

   result = rgb( (r1*r2) , (g1*g2) , (b1*b2) );   
   
   return result;
}
*/

render()
{
   tick = klock(0)*400;

   originX = W/2;
   originY = H/2;   

   d = 0;
   for(i=0; i<16; i++) // snake length
   {
      d = tick + i;
      r=0; g=0; b=0;
      hsvToRgb(d % 360,1,1,r,g,b);

      drawsprite(
         originX + sin(d*0.0034) * sin(d*0.0134) * originX,
         originY + sin(d*0.0033) * sin(d*0.0234) * originY, 
         r,g,b);
   }
}

drawsprite(x,y,r,g,b)
{
   drawpix(x,y,r,g,b);
   drawpix(x+1,y,r,g,b);
   drawpix(x+1,y+1,r,g,b);
   drawpix(x,y+1,r,g,b);
}

drawpix(x,y,r,g,b){
   screen[x][y][0] = r;
   screen[x][y][1] = g;
   screen[x][y][2] = b;
}

scaleblit()
{
   xTranslate = W*0.028;
   yTranslate = H*0.028; 
   


   for(y=0; y<H; y++)
   for(x=0; x<W; x++)
   {
      xofs = int( x*0.95 + xTranslate + nrnd/3 );
      yofs = int( y*0.95 + yTranslate + nrnd/3 );
      r=0; g=0; b=0;      

      random = rnd;
      if(random < .94){   

      screen[x][y][0] = (screen[x][y][0]+tempBuf[xofs][yofs][0])/2;
      screen[x][y][1] = (screen[x][y][1]+tempBuf[xofs][yofs][1])/2;
      screen[x][y][2] = (screen[x][y][2]+tempBuf[xofs][yofs][2])/2;       

      /*
        blendavg( screen[x][y][0], screen[x][y][1], screen[x][y][2],
                   tempbuf[xofs][yofs][0], tempbuf[xofs][yofs][1], tempbuf[xofs][yofs][2],
                   r,g,b );
        screen[x][y][0] = r;
        screen[x][y][1] = g;
        screen[x][y][2] = b;
      */
        
      }
      else if(random < .95){
        /*
        blendadd( screen[x][y][0], screen[x][y][1], screen[x][y][2],
                   tempbuf[xofs][yofs][0], tempbuf[xofs][yofs][1], tempbuf[xofs][yofs][2],
                   r,g,b );
        screen[x][y][0] = r;
        screen[x][y][1] = g;
        screen[x][y][2] = b;
        */
      }
      else
      {
         //r=0; g=0; b=0; hex2rgb(tempbuf[x][y],r,g,b);
         //tempbuf[x][y] = rgb(r*0.8,g*0.8,b*0.8); //blendmul( screen[x][y], tempbuf[x][y] );
      }  
   }
}



drawScreen(){
   static linebuf[W];
   i=0;
   for(y=0; y<H; y++)
   {
      for(x=0; x<W; x++)
      {
         linebuf[x] = rgb(screen[x][y][0], screen[x][y][1], screen[x][y][2]);
         tempbuf[x][y][0] = screen[x][y][0];
         tempbuf[x][y][1] = screen[x][y][1];
         tempbuf[x][y][2] = screen[x][y][2];
      }
      sethlin(0, y+0, linebuf, W);
   }
}


/*
DrawScreen()
{

   for(y=0; y<H; y++)
   for(x=0; x<W; x++)
   {
      setcol(screen[x][y]);
      tempbuf[x][y] = screen[x][y]; 
      setpix(x,y);
   }
}
*/

hsvToRgb(hue,s,v,&r,&g,&b){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = hue / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
}



texquad(x,y,width,height)
{
   glBegin(GL_COMPLEX);
   glTexCoord(0,0);glVertex(x,y);
   glTexCoord(1,0);glVertex(x+width,y);
   glTexCoord(1,1);glVertex(x+width,y+height);
   glTexCoord(0,1);glVertex(x,y+height);
   glEnd();
}