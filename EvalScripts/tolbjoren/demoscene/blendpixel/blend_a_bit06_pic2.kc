// todo: Use GLSL or some shaderlang to do this!
enum{W=320/2, H=240/2}
enum{resx=W, resy=H};
static screen[W][H];
static tempbuf[W][H];

static startBench = 0;

enum{SPRITE_W = 8, SPRITE_H = 8, FRAMES = 12}
static sprite[FRAMES][SPRITE_W][SPRITE_H];
static spriteFrame = 0;

static time = 0;
()
{
   if(numframes==0)
   {
      glCullFace(GL_BACK); 
      glDisable(GL_ALPHA_TEST);
      glDisable(GL_DEPTH_TEST);
   }
   
   if(numframes==0){
      cls(0);
      setfont(6,8); setcol(0xffffff);
      for(frameCount = 0; frameCount < FRAMES; frameCount++)   
      for(x=0; x<SPRITE_W; x++)
      for(y=0; y<SPRITE_H; y++)
      {
         setcol(0xffffff);
         if(frameCount==0){  moveto(0,0); printf("H");}
         if(frameCount==1){  moveto(0,0); printf("E");}
         if(frameCount==2){  moveto(0,0); printf("L");}
         if(frameCount==3){  moveto(0,0); printf("L");}
         if(frameCount==4){  moveto(0,0); printf("O");}
         if(frameCount==5){  moveto(0,0); printf(" ");}
         if(frameCount==6){  moveto(0,0); printf("S");}
         if(frameCount==7){  moveto(0,0); printf("P");}
         if(frameCount==8){  moveto(0,0); printf("R");}
         if(frameCount==9){  moveto(0,0); printf("I");}
         if(frameCount==10){  moveto(0,0); printf("T");}
         if(frameCount==11){  moveto(0,0); printf("E");}
         r=0; g=0; b=0;
         getpix(x,y,r,g,b);
         sprite[frameCount][x][y] = rgb(r,g,b);
         setcol(0);
         setpix(x,y);
      }
   }

//cls();

   renderTime = 0; scaleTime = 0; drawscreenTime = 0;
   
   t = klock(0);
   time = t;
   
   startBench = t;
      zeroToOne = (1+cos(t/2))/2;
      weight = 0.90 + zeroToOne/(20-1); //(mousx)/(xres-1);
      crossFade(weight); 
      t = klock(0);
      xfadeTime = t - startBench;
   
   startBench = t;   
      render(); // draws a "sprite" to the screen buf
      t = klock(0);
   renderTime = t - startBench;
   
   startBench = t;
      //scaleblit(); // scales the screen, a blend between current and prev frame
      //static tmpRadial[W][H];
      //radial(screen,tmpRadial); // in out
      radial(tempBuf, screen);
      t = klock(0);
      scaleTime = t - startBench;
   startBench = t;
   
   //DrawScreen(screen);
   
   static buf[H][W];
   for(y=0; y<H; y++)
   for(x=0; x<W; x++)
   {
      // brighten pixels before outputting, compensation for crossfade darkens.
      buf[y][x] = blendmul(screen[x][y], 0x020202);
      tempbuf[x][y] = screen[x][y]; // copy screen into tempbuf for feedback
   }
   b = glsettex(buf,W,H);
   setcol(0xffffff);
      
   texquad(0,0,xres,yres);
   
   glremovetex(b);
   

   
   t = klock(0);
   drawscreenTime = t - startBench;
   startBench = t;
   
   spriteFrame = t*3;
   spriteFrame %= (FRAMES-1);
   
  
   moveto(0,0); setcol(0xffffff); 
   printf("\nrender       %f mspf", renderTime*1000);   
   printf("\nscale        %f mspf", scaleTime*1000);
   printf("\ndrawscreen   %f mspf", drawscreenTime*1000);
   printf("\nxfade        %f mspf", xfadeTime*1000);
   printf("\nweight   %f ", weight);
   
}

crossFade(weight){
  
   for(x=0; x<W; x++)
   for(y=0; y<H; y++)
   {
      r=0; g=0; b=0;
      r2=0; g2=0; b2=0;
      hex2rgb(screen[x][y],r,g,b);
      hex2rgb(tempBuf[x][y],r2,g2,b2);
      screen[x][y] = rgb( r * weight + 1 * (1.0-weight), 
                          g * weight + 1 * (1.0-weight),
                          b * weight + 1 * (1.0-weight));     
      //tempBuf[x][y] = screen[x][y];  
      
   }
}

blendAvg(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);

   result = rgb( (r1+r2)/2 , (g1+g2)/2 , (b1+b2)/2 );   
   
   return result;
}

blendAdd(p1,p2) //src, target
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);
   
   r2 += r1;
   g2 += g1;
   b2 += b1;
   // Clipping to 0xff is done by rgb function
   result = rgb(r2,g2,b2);  
   return result;
}


blendMul(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);

   result = rgb( (r1*r2) , (g1*g2) , (b1*b2) );   
   
   return result;
}


render()
{
   tick = klock(0)*100;

   originX = W/2;
   originY = H/2;   



   for(i=0; i<1; i++) // snake length
   {
      d = tick + i;
      tx = originX + sin(d*0.0034) * sin(d*0.0134) * originX;
      ty = originY + sin(d*0.0033) * sin(d*0.0234) * originY;

      if(0)
      {

         drawsprite(tx,ty, hsvToRgb(d % 360,1,1) );
      
      }else
      {
         hsvToRgb(d % 360,1,1);
         
         picSizX = 0;
         picSizY = 0;
         
         getpicsiz(picSizX, picSizY);
         picSizX = min(picSizX, resx); 
         picSizY = min(picSizY, resy);
         picWid2 = min(64,picSizX/2);  
         picHei2 = min(64,picSizY/2); 
      
         for(i=0; i<picSizX; i++)
         for(j=0; j<picSizY; j++)
         {
            setcol(255,255,255);
            screen[tx+i-picWid2][ty+j-picHei2] = pic(i,j);
         }
      }

   }


   
}
drawsprite(tx,ty,c)
{
   for(x=0; x<SPRITE_W; x++)
   for(y=0; y<SPRITE_H; y++)
   {
      pixel = sprite[SPRITEFRAME][x][y];
      if(pixel > 0)
      {
         screen[ max(0,min(resx, tx+x)) ][ max(0,min(resy,ty+y)) ] = c;
      }
   }
}


// shrinks prev frame, blends current and prev frame.
// position is randomized to smooth pixels out.
scaleblit()
{
   xTranslate = W*0.028;
   yTranslate = H*0.028; 
   


   for(y=0; y<H; y++)
   for(x=0; x<W; x++)
   {
      xofs = int( x*0.95 + xTranslate + nrnd/3 );
      yofs = int( y*0.95 + yTranslate + nrnd/3 );
      
      random = rnd;
      if(random < .94){   
         screen[x][y] = blendavg( screen[x][y], tempbuf[xofs][yofs] );
      }
      else if(random < .95){
         screen[x][y] = blendadd( screen[x][y], tempbuf[xofs][yofs] );
      }
      else
      {
         //r=0; g=0; b=0; hex2rgb(tempbuf[x][y],r,g,b);
         //tempbuf[x][y] = rgb(r*0.8,g*0.8,b*0.8); //blendmul( screen[x][y], tempbuf[x][y] );
      }  
   }
}

drawScreen(){
   static linebuf[W];
   i=0;
   for(y=0; y<H; y++)
   {
      for(x=0; x<W; x++)
      {
         linebuf[x] = screen[x][y];
         tempbuf[x][y] = screen[x][y];
         i++;
      }
      sethlin(0, y+0, linebuf, W);
   }
}

hex2rgb(mrgb,&r,&g,&b)
{  
   r = (mrgb / 65536);
   g = (mrgb / 256) % 256;
   b = mrgb % 256;   
}

hsvToRgb(hue,s,v){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = hue / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
   return r*2^16 + g*2^8 + b; 
}



texquad(x,y,width,height)
{
   glBegin(GL_COMPLEX);
   glTexCoord(0,0);glVertex(x,y);
   glTexCoord(1,0);glVertex(x+width,y);
   glTexCoord(1,1);glVertex(x+width,y+height);
   glTexCoord(0,1);glVertex(x,y+height);
   glEnd();
}


findVectorAndBlend(inBuf[resx][resy],outBuf[resx][resy],cx,cy,x,y,blurFactor)
{
   vecx = (cx-x);
   vecy = (cy-y);
   vecLen = sqrt(vecx*vecx + vecy*vecy);
   vecx /= vecLen;
   vecy /= vecLen;
   vecx *= blurFactor;
   vecy *= blurFactor;
   outBuf[x][y] = blendAvg(outBuf[x][y],inBuf[ floor(vecx+x) ][ floor(vecy+y) ]);
}

// Radial blur
// method found in the hugi diskmag
// check out: hugi.scene.org/
// also explained by kusma, here: http://www.scene.org/showforum.php?forum=11&topic=41672
radial(inBuf[resx][resy], outBuf[resx][resy])
{
   incX = .5; incY = .5; // for fine blur, step less than 1 pixel
   cx = (resx-1)  * 0.5;
   cy = (resy-1) * 0.5;
   blurFactor = 1.9; //1.8+abs(sin(time)*.2);
   
   // go from center of screen and blur 
   // up and left
   // up and right
   // down and left
   // down and right
   f = 0.25;   

   // A
   for(y=cy-f; y>1; y-=incY)
   for(x=cx-f; x>1; x-=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
   // B
   for(y=cy-f; y>1; y-=incY)
   for(x=cx+f; x<resx-1; x+=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
   
   // C
   for(y=cy+f; y<resy-1; y+=incY)
   for(x=cx-f; x>1; x-=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
   
   // D
   for(y=cy+f; y<resy-1; y+=incY)
   for(x=cx+f; x<resx-1; x+=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
    
}