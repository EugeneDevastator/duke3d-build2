// todo: replace flying lissajous dot with text or a real sprite

enum{W=320/2, H=240/2}
enum{resx=W, resy=H};
static screen[W][H];
static tempbuf[W][H];

static startBench = 0;

()
{
   if(numframes==0)
   {
      glCullFace(GL_BACK); 
      glDisable(GL_ALPHA_TEST);
      glDisable(GL_DEPTH_TEST);
   }

//cls();

   renderTime = 0; scaleTime = 0; drawscreenTime = 0;
   
   t = klock(0);
   
   startBench = t;
      zeroToOne = (1+cos(t/2))/2;
      weight = 0.95 + zeroToOne/(20-1); //(mousx)/(xres-1);
      crossFade(weight); 
      t = klock(0);
   xfadeTime = t - startBench;
   
   startBench = t;   
      render(); // draws a "sprite" to the screen buf
      t = klock(0);
   renderTime = t - startBench;
   startBench = t;

   scaleblit(); // scales the screen, a blend between current and prev frame
   //DrawScreen(screen);
   
   static buf[H][W];
   for(y=0; y<H; y++)
   for(x=0; x<W; x++)
   {
      // brighten pixels before outputting, compensation for crossfade darkens.
      buf[y][x] = blendmul(screen[x][y], 0x020202);
      tempbuf[x][y] = screen[x][y]; // copy screen into tempbuf for feedback
   }
   
   // Fullscreen streched
   if( 1 ){
      b = glsettex(buf,W,H);
      setcol(0xffffff);   
      texquad(0,0,xres,yres);
      glremovetex(b);
   }
   // pixies!
   else{
      for(y=0; y<H; y++){
         static linebuf[W];
         for(x=0; x<W; x++){
            linebuf[x] = buf[y][x];
         }
         sethlin(0,y, linebuf, W);
      }
   }

   startBench = t;
      
      //static tmpRadial[W][H];
      //radial(screen,tmpRadial); // in out
      radial(tempBuf, screen);
      t = klock(0);
      scaleTime = t - startBench;
   
   
   
   
   t = klock(0);
   drawscreenTime = t - startBench;
   startBench = t;
   
   
   moveto(0,0); setcol(0xffffff); 
   printf("\nrender       %f mspf", renderTime*1000);   
   printf("\nscale        %f mspf", scaleTime*1000);
   printf("\ndrawscreen   %f mspf", drawscreenTime*1000);
   printf("\nxfade        %f mspf", xfadeTime*1000);
   printf("\nweight   %f ", weight);
   
}

crossFade(weight){
  
   for(x=0; x<W; x++)
   for(y=0; y<H; y++)
   {
      r=0; g=0; b=0;
      r2=0; g2=0; b2=0;
      hex2rgb(screen[x][y],r,g,b);
      hex2rgb(tempBuf[x][y],r2,g2,b2);
      screen[x][y] = rgb( r * weight + 1 * (1.0-weight), 
                          g * weight + 1 * (1.0-weight),
                          b * weight + 1 * (1.0-weight));     
      //tempBuf[x][y] = screen[x][y];  
      
   }
}

blendAvg(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);

   result = rgb( (r1+r2)/2 , (g1+g2)/2 , (b1+b2)/2 );   
   
   return result;
}

blendAdd(p1,p2) //src, target
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);
   
   r2 += r1;
   g2 += g1;
   b2 += b1;
   // Clipping to 0xff is done by rgb function
   result = rgb(r2,g2,b2);  
   return result;
}


blendMul(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);

   result = rgb( (r1*r2) , (g1*g2) , (b1*b2) );   
   
   return result;
}


render()
{
   tick = klock(0)*300;

   originX = W/2;
   originY = H/2;   

   d = 0;
   for(i=0; i<16; i++) // snake length
   {
      d = tick + i;
         
      drawsprite(
         originX + sin(d*0.0034) * sin(d*0.0134) * originX/2,
         originY + sin(d*0.0033) * sin(d*0.0234) * originY/2, 
         hsvToRgb(d % 360,1,1) );
         
         /*
      drawsprite(
         originX + sin(d*.02) * originX/4,
         originY + cos(d*.02) * originY/4, 
         hsvToRgb(d % 360,1,1) );
         */
   }
   
}

drawsprite(x,y,c)
{
   screen[x][y] = c;
   screen[x+1][y] = c;
   screen[x+1][y+1] = c;
   screen[x][y+1] = c;
}


// shrinks prev frame, blends current and prev frame.
// position is randomized to smooth pixels out.
scaleblit()
{
   xTranslate = W*0.028;
   yTranslate = H*0.028; 
   


   for(y=0; y<H; y++)
   for(x=0; x<W; x++)
   {
      xofs = int( x*0.95 + xTranslate + nrnd/3 );
      yofs = int( y*0.95 + yTranslate + nrnd/3 );
      
      random = rnd;
      if(random < .94){   
         screen[x][y] = blendavg( screen[x][y], tempbuf[xofs][yofs] );
      }
      else if(random < .95){
         screen[x][y] = blendadd( screen[x][y], tempbuf[xofs][yofs] );
      }
      else
      {
         //r=0; g=0; b=0; hex2rgb(tempbuf[x][y],r,g,b);
         //tempbuf[x][y] = rgb(r*0.8,g*0.8,b*0.8); //blendmul( screen[x][y], tempbuf[x][y] );
      }  
   }
}

drawScreen(){
   static linebuf[W];
   i=0;
   for(y=0; y<H; y++)
   {
      for(x=0; x<W; x++)
      {
         linebuf[x] = screen[x][y];
         tempbuf[x][y] = screen[x][y];
         i++;
      }
      sethlin(0, y+0, linebuf, W);
   }
}

hex2rgb(mrgb,&r,&g,&b)
{  
   r = (mrgb / 65536);
   g = (mrgb / 256) % 256;
   b = mrgb % 256;   
}

hsvToRgb(hue,s,v){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = hue / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
   return r*2^16 + g*2^8 + b; 
}



texquad(x,y,width,height)
{
   glBegin(GL_COMPLEX);
   glTexCoord(0,0);glVertex(x,y);
   glTexCoord(1,0);glVertex(x+width,y);
   glTexCoord(1,1);glVertex(x+width,y+height);
   glTexCoord(0,1);glVertex(x,y+height);
   glEnd();
}


// Radial blur
// method taken from this pixelshader:
// http://www.gamerendering.com/2008/12/20/radial-blur-filter/
radial(inBuf[resx][resy],outBuf[resx][resy])
{
   sampleDist = 1;
   sampleStrength = 2.2;
   
   cx = 0.5*(resx+1);
   cy = 0.5*(resy+1); 

   // some sample positions
   static samples[10] = {-0.08,-0.05,-0.03,-0.02,-0.01,0.01,0.02,0.03,0.05,0.08};

   for(x=0; x<resx; x++)
   for(y=0; y<resy; y++)
   {
    // 0.5,0.5 is the center of the screen
    // so substracting uv from it will result in
    // a vector pointing to the middle of the screen 
    dx = cx-x;
    dy = cy-y;  

    // calculate the distance to the center of the screen
    dist = sqrt(dx*dx + dy*dy); 

    // normalize the direction (reuse the distance)
    dx = dx/dist; 
    dy = dy/dist;
 
    // this is the original colour of this fragment
    // using only this would result in a nonblurred version
    //vec4 color = texture2D(tex,uv); 
    color = inbuf[x][y];
 
    //vec4 sum = color;
    r=0; g=0; b=0; hex2rgb(color,r,g,b);
    sumr = r;
    sumg = g;
    sumb = b;

    // take 10 additional blur samples in the direction towards
    // the center of the screen
    for (i = 0; i < 10; i++)
    {
       c = inbuf[x + dx * samples[i] * sampleDist * resx][y + dy * samples[i] * sampleDist*resy];
       hex2rgb(c,r,g,b);
       sumr += r;
       sumg += g;
       sumb += b;
    }
 
    // we have taken eleven samples
    sumr *= 1.0/11.0;
    sumg *= 1.0/11.0;
    sumb *= 1.0/11.0;
 
    // weighten the blur effect with the distance to the
    // center of the screen ( further out is blurred more)
    t = dist * sampleStrength;
    //t = clamp( t ,0.0,1.0); //0 &lt;= t &lt;= 1
    t = min(1.0, max(0.0, t));   
 
    //Blend the original color with the averaged pixels
    //gl_FragColor = mix( color, sum, t );
    outBuf[x][y] = blendAvg(color, rgb(sumr*t,sumg*t,sumb*t) );
   }
}