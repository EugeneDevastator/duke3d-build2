// uses random floats
// not quite right, but looks more organic.

enum{maxpts=10000};
static numpts =0;
static ptc[maxpts];
static ptx[maxpts];
static pty[maxpts];
static ptz[maxpts];

enum{GRIDSIZ=128};
static particleX,particleY,particleZ;
static voxel[GRIDSIZ][GRIDSIZ][GRIDSIZ]; // bruteforce voxel structure. There are structures that use less mem.

enum{XYZ_FREEDOM=0, SLANT_FREEDOM=1, GREAT_FREEDOM=2, UBER_GREAT_FREEDOM=3  };

static time = 0;
static freedom = UBER_GREAT_FREEDOM;
static finish = 0;
static maxiters = 80000;
(){   
   if(numframes==0){ reset();  }
   time = klock(0);
   if(finish != 1) iterateDLA();
   render();
   if(keystatus[57]==1) {keystatus[57]=0; reset();}
}

iterateDLA(){
   for(i=0; i<maxiters; i++)
   {
      if(voxel[particleX][particleY][particleZ] == 0) // not allready occupied.
      if(particleX > 1 && particleX < GRIDSIZ-1)
      if(particleY > 1 && particleY < GRIDSIZ-1)
      if(particleZ > 1 && particleZ < GRIDSIZ-1)
      {
         x = particleX;
         y = particleY;
         z = particleZ;
         
         hasNeighbour = 0;
         if( freedom == XYZ_FREEDOM )
         {
            if(
             voxel[x][y][z-1] > 0 ||
             voxel[x][y][z+1] > 0 ||
             
             voxel[x][y-1][z] > 0 ||
             voxel[x][y+1][z] > 0 ||  
             
             voxel[x-1][y][z] > 0 ||
             voxel[x+1][y][z] > 0 ) hasNeighbour = 1;
         }
         else if( freedom == SLANT_FREEDOM )
         {
            if(
             voxel[x][y-1][z-1] > 0 ||
             voxel[x][y-1][z+1] > 0 ||
             voxel[x][y+1][z-1] > 0 ||
             voxel[x][y+1][z+1] > 0 ||
             
             voxel[x-1][y][z-1] > 0 ||
             voxel[x-1][y][z+1] > 0 ||
             voxel[x+1][y][z-1] > 0 ||
             voxel[x+1][y][z+1] > 0 ||
             
             voxel[x-1][y-1][z] > 0 ||
             voxel[x-1][y+1][z] > 0 ||
             voxel[x+1][y-1][z] > 0 ||
             voxel[x+1][y+1][z] > 0 ) hasNeighbour = 1;
         }
         else if( freedom == GREAT_FREEDOM ) 
         {
            if(
             voxel[x][y][z-1] > 0 || //x
             voxel[x][y][z+1] > 0 ||
             
             voxel[x][y-1][z] > 0 || //y
             voxel[x][y+1][z] > 0 ||  
             
             voxel[x-1][y][z] > 0 || // z
             voxel[x+1][y][z] > 0 ||
             
             voxel[x][y-1][z-1] > 0 || // yz
             voxel[x][y-1][z+1] > 0 ||
             voxel[x][y+1][z-1] > 0 ||
             voxel[x][y+1][z+1] > 0 ||
             
             voxel[x-1][y][z-1] > 0 || // xz
             voxel[x-1][y][z+1] > 0 ||
             voxel[x+1][y][z-1] > 0 ||
             voxel[x+1][y][z+1] > 0 ||
             
             voxel[x-1][y-1][z] > 0 || // xy
             voxel[x-1][y+1][z] > 0 ||
             voxel[x+1][y-1][z] > 0 ||
             voxel[x+1][y+1][z] > 0 ||

             voxel[x-1][y-1][z-1] > 0 || // xy -z
             voxel[x-1][y+1][z-1] > 0 ||
             voxel[x+1][y-1][z-1] > 0 ||
             voxel[x+1][y+1][z-1] > 0             
             
             
              ) hasNeighbour = 1; 
         }         
         else if( freedom == UBER_GREAT_FREEDOM ) // 3x3 cube - where particle is (0,0,0)
         {
            /*if(
            
             voxel[x][y][z-1] > 0 || //x
             voxel[x][y][z+1] > 0 ||
             
             voxel[x][y-1][z] > 0 || //y
             voxel[x][y+1][z] > 0 ||  
             
             voxel[x-1][y][z] > 0 || // z
             voxel[x+1][y][z] > 0 ||            

            // corners
             voxel[x-1][y-1][z-1] > 0 || // bottom left back corner
             voxel[x-1][y-1][z+1] > 0 ||
             voxel[x][y+1][z-1] > 0 ||
             voxel[x][y+1][z+1] > 0 ||
             
             voxel[x-1][y][z-1] > 0 ||
             voxel[x-1][y][z+1] > 0 ||
             voxel[x+1][y][z-1] > 0 ||
             voxel[x+1][y][z+1] > 0 ||
             
             voxel[x-1][y-1][z] > 0 ||
             voxel[x-1][y+1][z] > 0 ||
             voxel[x+1][y-1][z] > 0 ||
             voxel[x+1][y+1][z] > 0 ||
            //end slant 
             
             voxel[x][y-1][z-1] > 0 || // yz
             voxel[x][y-1][z+1] > 0 ||
             voxel[x][y+1][z-1] > 0 ||
             voxel[x][y+1][z+1] > 0 ||
             
             voxel[x-1][y][z-1] > 0 || // xz
             voxel[x-1][y][z+1] > 0 ||
             voxel[x+1][y][z-1] > 0 ||
             voxel[x+1][y][z+1] > 0 ||
             
             voxel[x-1][y-1][z] > 0 || // xy
             voxel[x-1][y+1][z] > 0 ||
             voxel[x+1][y-1][z] > 0 ||
             voxel[x+1][y+1][z] > 0 ||

             voxel[x-1][y-1][z-1] > 0 || // xy -z
             voxel[x-1][y+1][z-1] > 0 ||
             voxel[x+1][y-1][z-1] > 0 ||
             voxel[x+1][y+1][z-1] > 0 ||  

             voxel[x-1][y-1][z+1] > 0 || // xy +z
             voxel[x-1][y+1][z+1] > 0 ||
             voxel[x+1][y-1][z+1] > 0 ||
             voxel[x+1][y+1][z+1] > 0              
           
             
              ) hasNeighbour = 1;  */ 
            
// could unroll this loop for speed...
            hasNeighbour = 0; //try to disprove it has a neighbour
            breakAll = 0;
            
         // try limiting the growth dir by changing loop limits in 1 axis
         // can make it grow upwards like a tree. or lighning bolt..
            for(signx=-1; signx <= 1; signx++)
            {
               for(signy=-1; signy <= 1; signy++)
               {
                  for(signz=-1; signz <= 1; signz++)
                  {
                     if(signx != 0 && signy != 0 && signz != 0) // dont check self
                     {
                        if( voxel[x+signx][y+signy][z+signz] > 0 ) // found neighbour!! yay
                        {
                           hasNeighbour = 1; // got what we need, now escape those loops:
                           breakAll = 1;
                           break;
                        }
                     }
                     
                  } //ez
                  if(breakAll==1) break;
               } //ey
               if(breakAll==1)break;
            } //ex

         } 
       
         if(hasNeighbour)
         { 
            // Set Color
            hue = 360 * numpts/maxpts;
            r=0; g=0; b=0;
            hsv_to_rgb(hue % 360,1,1,r,g,b);
            voxel[particleX][particleY][particleZ] = rgb(r,g,b); // set occupied.
            
            // Add point to array.
            if(numpts < maxpts)
            {
               ptc[numpts] = voxel[particleX][particleY][particleZ];
               oneover = 1/GRIDSIZ;
               ptx[numpts] = 40*( (particleX-GRIDSIZ/2) *oneover);
               pty[numpts] = 40*( (particleY-GRIDSIZ/2) *oneover);
               ptz[numpts] = 40*( (particleZ-GRIDSIZ/2) *oneover);
               numpts++;
            }
            
            // stop when hit border
            if(particleX < 10 || particleX > GRIDSIZ-10) finish = 1;
            if(particleY < 10 || particleY > GRIDSIZ-10) finish = 1;
            if(particleZ < 10 || particleZ > GRIDSIZ-10) finish = 1;
            
            // reset pos
            setRandomParticle();
         }
   }   
   else
   {
      setRandomParticle();
   }

   moveParticle();

   if(particleX < 0 || particleX > GRIDSIZ || 
      particleY < 0 || particleY > GRIDSIZ || 
      particleZ < 0 || particleZ > GRIDSIZ){
         setRandomParticle();// if out of grid, reset pos.
   }

   } //end iters loop

}

reset(){
      bstatus= 0;
      numpts = 0;
      finish = 0;
      iters = 0;

      for(i=0; i<GRIDSIZ; i++)
      for(j=0; j<GRIDSIZ; j++)
      for(k=0; k<GRIDSIZ; k++){
         voxel[i][j][k] = 0;
      }
    
      // Re-seed  . Create a point in center   
      center = GRIDSIZ/2;
      voxel[center][center][center] = rgb(255,255,255);
      setRandomParticle();
}

render(){
   cls(0); clz(1e32);
   
   dist = -30;
   cameraAng = time*2; //2*PI*mousx/xres;
   setcam( dist*sin(cameraAng), 0, dist*cos(cameraAng),cameraAng,0 );
   
   
   for(i=0; i<numpts; i++){
      setcol(ptc[i]);
      drawsph(ptx[i], pty[i], ptz[i], .3);
   }
   setcol(0xffffff);
   drawsph(particleX,particleY,particleZ, 1);
   
   nx = xres/100;
   ny = yres/100;
   
   

   
   setcol(255,255,255);
   
   moveto(nx*25,ny*3); setfont(1.5*nx,6*ny,-1); printf("Diffusion Limited Aggregation");
   setfont(12,16);
   printf("\n\n\nReset = SPACEBAR");
   printf("\n\npts used %.1f percent", numpts/maxpts*100);
   
   maxiterSlider = maxiters / 1000;
   setfont(8,12);
   setcol(255,255,255); moveto(nx*15, ny*80); printf("Speed:"); sliderAdvanced(1,maxiterSlider,0,100,nx*15, ny*85, 100);
   maxiters = max(1000,maxiterSlider * 1000); 
   
   freedomSlider = freedom;
   setcol(255,255,255); moveto(nx*15, ny*92); printf("freedom of movement:"); sliderAdvanced(0,freedomSlider,0,3,nx*15, ny*95, 100);
   freedom = int(freedomSlider);
   
   if(freedom == XYZ_FREEDOM ) printf("\nfreedom type = XYZ");
   if(freedom == SLANT_FREEDOM ) printf("\nfreedom type = SLANT");
   if(freedom == GREAT_FREEDOM ) printf("\nfreedom type = GREAT");
   if(freedom == UBER_GREAT_FREEDOM ) printf("\nfreedom type = UBER GREAT");
   
}

moveParticle(){
   //particleX += cos(rnd+time%1)/4;
   //particleY += sin(rnd+time%1)/4;
   //particleZ += sin(rnd+time%1)/4;
            
   // organic movement, fast!
   /*
   particleX += nrnd;
   particleY += nrnd;
   particleZ += nrnd;
   */
   
   
   dir = int(rnd*6);
   if(dir==0){ particleX++; }
   if(dir==1){ particleX--; }   
   if(dir==2){ particleY++; }
   if(dir==3){ particleY--; }
   if(dir==4){ particleZ++; }
   if(dir==5){ particleZ--; }
   
}

setRandomParticle()
{
   //particleX = min(GRIDSIZ-10, max(10, rnd*GRIDSIZ ));
   //particleY = min(GRIDSIZ-10, max(10, rnd*GRIDSIZ )); // START WITHIN
   //particleZ = min(GRIDSIZ-10, max(10, rnd*GRIDSIZ ));
   if(rnd > .5) particleX = GRIDSIZ-20; else particleX = 20;
   if(rnd > .5) particleY = GRIDSIZ-20; else particleY = 20; // START ON EDGES
   if(rnd > .5) particleZ = GRIDSIZ-20; else particleZ = 20;
   
}


hsv_to_rgb(h,s,v,&r,&g,&b){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
}


sliderAdvanced(sliderNum, &value, minval, maxval, x, y, length)
{
   intrinsicRatio = (maxval-minval)/(length-0); // intrinsicRatio = (maxvalue-minvalue)/(endpoint2-endpoint1)
   sliderval = (value-minval) / intrinsicRatio;
   slider(sliderNum,sliderval,x,y,length); 
   value = (sliderval) * intrinsicRatio + minval; // Value = (thisPoint - endPoint1) * intrinsicRatio + minValue
   //printf("\n intRatio:%g", intrinsicRatio);
   //printf("\nvalue=%.3f", value);
   moveto(x+length+5,y-5);
   setfont(8,12); printf("value=%g",value);
}

slider(sliderNum,&value,x,y,length)
{
   enum{numSliders=10};
   static mouseLock[numSliders];
   // Constructor, set slider to mid position
   if(numframes==0)
   {
      //value = .5 * length; // this is what makes the adv slider work. :S
      mouseLock[sliderNum] = 0;
   }  
   // Draw slider
   setcol(255,255,255);
   moveto(x,y);
   lineto(x+length,y);
   drawsph(x+value,y,-10);
   //moveto(x+length+5,y-5);
   //setfont(8,12); printf("value=%g",value);
   
   // mouse input
   //mouseValue = mousx/(xres/2)-1;

   // Check if anyone else has lock, if so exit.
   if(mouseLock[sliderNum] == 0)
   for(i=0; i<numSliders; i++)
   {
      if(i==sliderNum) continue; // if we have lock no problem
      if(mouseLock[i]) return; // someone else has lock
   }   

   if(bstatus==1)
   {
      mx = mousx; my = mousy; 
      if(mouseLock[sliderNum]) // mouse has lock-on, move slider
      {
         setcol(255,0,0);
         drawsph(x+value, y,-5);
         if(mx <= (x+length) && mx >= x) // limit movement to slider line
         {
            intrinsicRatio = (length-0)/( (length+x)-x);
            value = ( mx-x)*intrinsicRatio + 0;
         }
         else if(mx > (x+length) )
         {
            value = length;
         }
         else if(mx < x)
         {
            value = 0;
         }
      }
      else // check for collision
      {
         if( isColliding(mx,my,x+value,y,10) ) mouseLock[sliderNum] = 1; 
      }
   }
   else // mouse released
   {
      mouseLock[sliderNum] = 0;
   }

}

isColliding(x1,y1,x2,y2,radius)
{
   if((x1-x2)^2 + (y1-y2)^2 < radius^2 ) return 1;
   return 0;
}