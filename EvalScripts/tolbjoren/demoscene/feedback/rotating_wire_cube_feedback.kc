// todo: Use GLSL or some shaderlang to do this!
enum{W=300, H=300}
enum{resx=W, resy=H};
static screen[W][H];
static tempbuf[W][H];

static startBench = 0;

static time = 0;

static red=0; 
static green=0;
static blue=0;
()
{
   if(numframes==0)
   {
      glCullFace(GL_BACK); 
      glDisable(GL_ALPHA_TEST);
      glDisable(GL_DEPTH_TEST);
   }
   
   renderTime = 0; scaleTime = 0; drawscreenTime = 0;
   
   t = klock(0);
   time = t;
   
   startBench = t;
      zeroToOne = (.5+cos(t*5)*.5);
      weight = 0.5 + 0.5*zeroToOne; 
      //weight = (mousx)/(xres-1);
      crossFade(weight); 
      t = klock(0);
      xfadeTime = t - startBench;
   
   startBench = t;   
      render(); // draws a "sprite" to the screen buf
      t = klock(0);
   renderTime = t - startBench;
   
   startBench = t;
      scaleblit(); 
      //radial(tempBuf, screen);
      t = klock(0);
      scaleTime = t - startBench;
   startBench = t;
   
 
   
   //#define FULLSCREEN
   #ifdef FULLSCREEN
      
      for(y=0; y<H; y++)
      for(x=0; x<W; x++)
      {
         tempbuf[x][y] = screen[x][y]; // copy screen into tempbuf for feedback
      }   

      b = glsettex(screen,W,H);
      setcol(0xffffff);
      texquad(0,0,xres,yres);
      glremovetex(b);
   #else
      static linebuf[W];
      i=0;
      for(y=0; y<H; y++){
         for(x=0; x<W; x++){
            linebuf[x] = screen[x][y];
            tempbuf[x][y] = screen[x][y]; // Feedback
            i++;
         }
         sethlin(0, y+0, linebuf, W);
      }
   #endif

   
   t = klock(0);
   drawscreenTime = t - startBench;
   startBench = t;

   moveto(0,0); setcol(0xffffff); 
   printf("\nrender       %f mspf", renderTime*1000);   
   printf("\nscale        %f mspf", scaleTime*1000);
   printf("\ndrawscreen   %f mspf", drawscreenTime*1000);
   printf("\nxfade        %f mspf", xfadeTime*1000);
   printf("\nweight   %f ", weight);
   
}

// Our all important render function, it decides what
// we start out with on the screen surface
render()
{
   xrot = time;
   yrot = time;
   
   for(sc = 0.1; sc <= 2; sc += 0.2)
   //for(sc=2; sc >= 0.1; sc-=0.2)
   {
      hsvToRgb( (sc*.5)*360, 1,1 );
      cube(sc,xrot+sc*4, yrot+sc*4) ;
   }
}

crossFade(weight){
  
   for(x=0; x<W; x++)
   for(y=0; y<H; y++)
   {
      r=0; g=0; b=0;
      r2=0; g2=0; b2=0;
      hex2rgb(screen[x][y],r,g,b);
      hex2rgb(tempBuf[x][y],r2,g2,b2);
      screen[x][y] = rgb( r * weight + 1 * (1.0-weight), 
                          g * weight + 1 * (1.0-weight),
                          b * weight + 1 * (1.0-weight));      
   }
}

blendAvg(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);

   result = rgb( (r1+r2)/2 , (g1+g2)/2 , (b1+b2)/2 );   
   
   return result;
}

blendAdd(p1,p2) //src, target
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);
   
   r2 += r1;
   g2 += g1;
   b2 += b1;
   // Clipping to 0xff is done by rgb function
   result = rgb(r2,g2,b2);  
   return result;
}

blendMul(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);

   result = rgb( (r1*r2) , (g1*g2) , (b1*b2) );   
   
   return result;
}

// shrinks prev frame, blends current and prev frame.
// position is randomized to smooth pixels out.
scaleblit()
{
   xTranslate = W*0.028;
   yTranslate = H*0.028; 

   for(y=0; y<H; y++)
   for(x=0; x<W; x++)
   {
      xofs = int( x*0.95 + xTranslate + (rnd-0.5)/2 );
      yofs = int( y*0.95 + yTranslate + (rnd-0.5)/2 );
      
      #define STARDUST_FX
      #ifdef STARDUST_FX
         random = rnd;
         if(random < .995){   
            screen[x][y] = blendavg( screen[x][y], tempbuf[xofs][yofs] );
         }
         else if(random >= .995){
            screen[x][y] = blendadd( screen[x][y], tempbuf[xofs][yofs] );
         }
      #else
         screen[x][y] = blendavg( screen[x][y], tempbuf[xofs][yofs] );
      #endif
      
   }
}

hex2rgb(mrgb,&r,&g,&b)
{  
   r = (mrgb / 65536);
   g = (mrgb / 256) % 256;
   b = mrgb % 256;   
}

hsvToRgb(hue,s,v){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = hue / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
   red = r;
   green = g;
   blue = b;
   return r*2^16 + g*2^8 + b; 
}

texquad(x,y,width,height)
{
   glBegin(GL_COMPLEX);
   glTexCoord(0,0);glVertex(x,y);
   glTexCoord(1,0);glVertex(x+width,y);
   glTexCoord(1,1);glVertex(x+width,y+height);
   glTexCoord(0,1);glVertex(x,y+height);
   glEnd();
}

findVectorAndBlend(inBuf[resx][resy],outBuf[resx][resy],cx,cy,x,y,blurFactor)
{
   vecx = (cx-x);
   vecy = (cy-y);
   vecLen = sqrt(vecx*vecx + vecy*vecy);
   vecx /= vecLen;
   vecy /= vecLen;
   vecx *= blurFactor;
   vecy *= blurFactor;
   outBuf[x][y] = blendAvg(outBuf[x][y],inBuf[ floor(vecx+x) ][ floor(vecy+y) ]);
}

// Radial blur
// method found in the hugi diskmag
// check out: hugi.scene.org/
// also explained by kusma, here: http://www.scene.org/showforum.php?forum=11&topic=41672
radial(inBuf[resx][resy], outBuf[resx][resy])
{
   incX = .5; incY = .5; // for fine blur, step less than 1 pixel
   cx = (resx-1)  * 0.5;
   cy = (resy-1) * 0.5;
   blurFactor = 1.9; //1.8+abs(sin(time)*.2);
   
   // go from center of screen and blur 
   // up and left
   // up and right
   // down and left
   // down and right
   f = 0.25;   

   // A
   for(y=cy-f; y>1; y-=incY)
   for(x=cx-f; x>1; x-=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
   // B
   for(y=cy-f; y>1; y-=incY)
   for(x=cx+f; x<resx-1; x+=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
   
   // C
   for(y=cy+f; y<resy-1; y+=incY)
   for(x=cx-f; x>1; x-=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
   
   // D
   for(y=cy+f; y<resy-1; y+=incY)
   for(x=cx+f; x<resx-1; x+=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }  
}

cube(sc, xr, yr)
{
   //static v0[3];
   //set(v0, -1,-1,-1);
   
   static v0[3]; set(v0,-sc,-sc,-sc);
   static v1[3]; set(v1,-sc,-sc,+sc);
   static v2[3]; set(v2,-sc,+sc,-sc);
   static v3[3]; set(v3,-sc,+sc,+sc);
   
   static v4[3]; set(v4,+sc,-sc,-sc);
   static v5[3]; set(v5,+sc,-sc,+sc);
   static v6[3]; set(v6,+sc,+sc,-sc);
   static v7[3]; set(v7,+sc,+sc,+sc);
   
   static mx[9];
   static my[9];
   //static mz[9];

   makeX( mx, xr );
   makeY( my, yr );
   //makeZ( mz, ang );
   static m[9];
   //makeZ( m, mousx/xres);
   mult(m,mx,my);
   
   tform(m,v0);
   tform(m,v1);
   tform(m,v2);
   tform(m,v3);
   tform(m,v4);
   tform(m,v5);
   tform(m,v6);
   tform(m,v7);
   
   // Translate forwards in Z-dir
   tz = 20;
   v0[2] += tz;
   v1[2] += tz;
   v2[2] += tz;
   v3[2] += tz;
   v4[2] += tz;
   v5[2] += tz;
   v6[2] += tz;
   v7[2] += tz;
   
   // bottom quad
   drawline(v0,v1);
   drawline(v0,v4);
   drawline(v4,v5);
   drawline(v1,v5);
   // top quad
   drawline(v2,v3);
   drawline(v2,v6);
   drawline(v6,v7);
   drawline(v7,v3);
   
   // connectors top/bottom quad
   drawline(v0,v2);
   drawline(v4,v6);
   drawline(v1,v3);
   drawline(v7,v5);
}

set(v[3],x,y,z){
   v[0]=x; v[1]=y; v[2] = z;
}

makeX(m[9], r)
{
   c = cos(r); s=sin(r);
   m[0] = 1; m[1] = 0;  m[2] = 0;
   m[3] = 0; m[4] = c;  m[5] = -s;
   m[6] = 0; m[7] = s;  m[8] = c;
}
   // Y axis
   // | c 0  s |
   // | 0 1  0 |
   // | -s 0 c |
makeY(m[9], r)
{
   c = cos(r); s=sin(r);
   m[0] = c; m[1] = 0; m[2] = s;
   m[3] = 0; m[4] = 1;  m[5] = 0;
   m[6] = -s; m[7] = 0;  m[8] = c;
}
   // Z axis
   // | c -s 0 |
   // | s c  0 |
   // | 0 0  1 |
makeZ(m[9], r)
{
   c = cos(r); s=sin(r);
   m[0] = c; m[1] = -s; m[2] = 0;
   m[3] = s; m[4] = c;  m[5] = 0;
   m[6] = 0; m[7] = 0;  m[8] = 1;
}

// C = AB, multiplies A and B, puts result in C
mult(c[9],a[9],b[9])
{
   C[0] = A[0]*B[0] + A[1]*B[3] + A[2]*B[6];
   C[1] = A[0]*B[1] + A[1]*B[4] + A[2]*B[7];
   C[2] = A[0]*B[2] + A[1]*B[5] + A[2]*B[8];
   
   C[3] = A[3]*B[0] + A[4]*B[3] + A[5]*B[6];
   C[4] = A[3]*B[1] + A[4]*B[4] + A[5]*B[7];
   C[5] = A[3]*B[2] + A[4]*B[5] + A[5]*B[8];
   
   C[6] = A[6]*B[0] + A[7]*B[3] + A[8]*B[6];
   C[7] = A[6]*B[1] + A[7]*B[4] + A[8]*B[7];
   C[8] = A[6]*B[2] + A[7]*B[5] + A[8]*B[8];
}

tform(m[9], v[3])
{
   x = v[0]; y = v[1]; z = v[2];
   v[0] = m[0] * x + m[1] * y + m[2] * z;
   v[1] = m[3] * x + m[4] * y + m[5] * z;
   v[2] = m[6] * x + m[7] * y + m[8] * z;
}

drawline(v1[3], v2[3])
{
   x1=0; y1=0; x2=0; y2=0;
   projectcorrect(1.57/2, v1, RESX,RESY, x1,y1);
   projectcorrect(1.57/2, v2, RESX,RESY, x2,y2);
   
   drawline(x1,y1,x2,y2);
}

ProjectCorrect(fov, input[3], width, height, &outX, &outY)
{
  aspect_w = width / tan(fov / 2);
  aspect_h = height / tan(fov / 2);
 
  if(input[2] == 0){
    outx = 0;
    outy = 0;
  }
  else
  {
    outx = (input[0] * aspect_w) / input[2] + width / 2;
    outy = (input[1] * aspect_h) / input[2] + height / 2;
  }
}

plot(x,y)
{
   p1 = rgb(red,green,blue);
   p2 = screen[x][y];
   screen[x][y] = blendAdd(p1,p2);
   //screen[x][y] = rgb(red,green,blue);
}

//bresenham
// gets same perf as evaldraws builtin
drawline(x1, y1, x2, y2)
{
   x=0; y=0; 
   dx=0; dy=0; 
   incx=0;
   incy=0;
   balance = 0;

   if (x2 >= x1)
   {
      dx = x2 - x1;
      incx = 1;
   }
   else
   {
      dx = x1 - x2;
      incx = -1;
   }

   if (y2 >= y1)
   {
      dy = y2 - y1;
      incy = 1;
   }
   else
   {
      dy = y1 - y2;
      incy = -1;
   }

   x = x1;
   y = y1;

   if (dx >= dy)
   {
      dy *= 2;
      balance = dy - dx;
      dx *= 2;

      while ( fabs(x-x2) > 0.5 )
      {
         plot(x,y);
         if (balance >= 0)
         {
            y += incy;
            balance -= dx;
         }
         balance += dy;
         x += incx;
      } 
      plot(x,y); 
   }
   else
   {
      dx *= 2;
      balance = dx - dy;
      dy *= 2;

     while ( fabs(y-y2) > 0.55 )
      {
         plot(x,y); 
         if (balance >= 0)
         {
            x += incx;
            balance -= dy;
         }
         balance += dx;
         y += incy;
      } 
      plot(x,y);
   }
}