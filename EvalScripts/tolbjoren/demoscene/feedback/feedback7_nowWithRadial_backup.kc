/* 
   // Written by Torbjoern
   would be fast in a shader

   *Added Radial-blur -23. august 2009

*/

enum{WIDTH=128, HEIGHT=128};

static buf[HEIGHT][WIDTH];
static copy[HEIGHT][WIDTH];
static screen[HEIGHT][WIDTH];

enum{SPRITE_W = 10*7, SPRITE_H = 8, FRAMES = 12}
static sprite[FRAMES][SPRITE_W][SPRITE_H];
static spriteFrame = 0;

static time;

// Had a Mem Access Violation problem... 
// evaldraw doesnt complain because it checks bounds silently. I think...
static maxgx, maxgy;
static minpx, minpy; // destination of copy buf
()
{

   if(numframes==0){
      cls(0);
      setfont(6,8); setcol(0xffffff);
      for(frameCount = 0; frameCount < FRAMES; frameCount++)   
      for(x=0; x<SPRITE_W; x++)
      for(y=0; y<SPRITE_H; y++)
      {
         setcol(0xffffff);
         if(frameCount==0){  moveto(0,0); printf("H E L L O");}
         if(frameCount==1){  moveto(0,0); printf("E");}
         if(frameCount==2){  moveto(0,0); printf("L");}
         if(frameCount==3){  moveto(0,0); printf("L");}
         if(frameCount==4){  moveto(0,0); printf("O");}
         if(frameCount==5){  moveto(0,0); printf(" ");}
         if(frameCount==6){  moveto(0,0); printf("S");}
         if(frameCount==7){  moveto(0,0); printf("P");}
         if(frameCount==8){  moveto(0,0); printf("R");}
         if(frameCount==9){  moveto(0,0); printf("I");}
         if(frameCount==10){  moveto(0,0); printf("T");}
         if(frameCount==11){  moveto(0,0); printf("E");}
         r=0; g=0; b=0;
         getpix(x,y,r,g,b);
         sprite[frameCount][x][y] = rgb(r,g,b);
         setcol(0);
         setpix(x,y);
      }
   }

   cls(0);
   time = klock();
 

   warp();
   //BlurAndMixColors(); // <- OLD box blur
   radial(screen,buf); // <----------- new shiny radial !
   
   drawFeedback();
   //drawCopy(0,0);
   setcol(0xffffff);
   moveto(0,0);
}

BlurAndMixColors()
{   
   for(y=0; y<HEIGHT; y++)
   for(x=0; x<WIDTH; x++)
   {
      r = screen[y][x] / 2^16;
      g = screen[y][x] / 2^8 % 256;
      b = screen[y][x] % 256;
           
      nr = buf[y][x] / 2^16;
      ng = buf[y][x] / 2^8 % 256;
      nb = buf[y][x] % 256;
      
      div1 = 2;
      div2 = 2.3;
      //buf[y][x] = rgb(nr/2.1,ng/2.1,nb/2.1)+ rgb(r/2,g/2,b/2);
      buf[y][x] = rgb(nr/div1,ng/div1,nb/div1)+ rgb(r/div2,g/div2,b/div2);
   } 
}

//////////// NEW!
findVectorAndBlend(inBuf[WIDTH][HEIGHT],outBuf[WIDTH][HEIGHT],cx,cy,x,y,blurFactor)
{
   vecx = (cx-x);
   vecy = (cy-y);
   vecLen = sqrt(vecx*vecx + vecy*vecy);
   vecx /= vecLen;
   vecy /= vecLen;
   vecx *= blurFactor;
   vecy *= blurFactor;
   outBuf[x][y] = blendAvg(outBuf[x][y] ,inBuf[ floor(vecx+x) ][ floor(vecy+y) ]);
}

// Radial blur
// method found in the hugi diskmag
// check out: hugi.scene.org/
// also explained by kusma, here: http://www.scene.org/showforum.php?forum=11&topic=41672
radial(inBuf[WIDTH][HEIGHT],outBuf[WIDTH][HEIGHT])
{
   incX = .5; incY = .5; // for fine blur, step less than 1 pixel
   cx = (WIDTH-1)  * 0.5;
   cy = (HEIGHT-1) * 0.5;
   blurFactor = 1.2; //1.8+abs(sin(time)*.2);
   
   // go from center of screen and blur 
   // up and left
   // up and right
   // down and left
   // down and right
   f = 0.25;   

   // A
   for(y=cy-f; y>1; y-=incY)
   for(x=cx-f; x>1; x-=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
   // B
   for(y=cy-f; y>1; y-=incY)
   for(x=cx+f; x<WIDTH-1; x+=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
   
   // C
   for(y=cy+f; y<HEIGHT-1; y+=incY)
   for(x=cx-f; x>1; x-=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
   
   // D
   for(y=cy+f; y<HEIGHT-1; y+=incY)
   for(x=cx+f; x<WIDTH-1; x+=incX)
   {
      findVectorAndBlend(inBuf,outBuf,cx,cy,x,y,blurFactor);
   }
    
}

blendAvg(p1,p2)
{
   r1=0; g1=0; b1=0;
   r2=0; g2=0; b2=0;
   hex2rgb(p1,r1,g1,b1);
   hex2rgb(p2,r2,g2,b2);
   f = 0.85;
   r1 *= f;
   g1 *= f;
   b1 *= f;
   result = rgb( (r1+r2)/2.0 , (g1+g2)/2.0 , (b1+b2)/2.0 );   //<-- real avg
   return result;
}

hex2rgb(mrgb,&r,&g,&b)
{  
   r = (mrgb / 2^16);
   g = (mrgb / 2^8) % 256;
   b = mrgb % 256;   
}

//////////// OLD!

// Do rotations, scaling, etc here
warp()
{ 
  // scalePic(WIDTH*1.01); //WIDTH+ (cos(time*5)+0.5 )*25 );

   outColor = 3*hsv_to_rgb( numframes*4 % 360 ,1,1);

   for(ix=0; ix<3; ix++)
   for(iy=0; iy<3; iy++)
   {
      px = max(0, min( WIDTH, mousx+ix ) );
      py = max(0, min( HEIGHT, mousy+iy ) );
      
      //screen[px][py] = outColor;
   }
   outColor = 2*hsv_to_rgb( 80 ,1,1);
   
   drawsprite(mousx,mousy,outColor);
   
}

drawsprite(tx,ty,c)
{
   for(x=0; x<SPRITE_W; x++)
   for(y=0; y<SPRITE_H; y++)
   {
      pixel = sprite[SPRITEFRAME][x][y];
      if(pixel > 0)
      {
         screen[tx+x][ty+y] = c;
      }
   }
}

drawFeedback()
{
   static line[WIDTH];
   for(y=0; y<HEIGHT; y++)
   {
      for(x=0; x<WIDTH; x++)
      {
         line[x] = buf[y][x];
         screen[y][x] = buf[y][x];
         
         setcol( line[x] );
         setpix(y,x);
      }
      //sethlin(0,y,line,WIDTH);
   }
}

// This could perhaps be smoother?
// could use bicubic?

scalePic(scale)
{
   sx = scale; sy = scale;
   deltax = WIDTH/sx; deltay = HEIGHT/sy;
   gx = 0; gy = 0;   // must be float, increment how often to read a pixel from src

   // Begin in the middle of screen
   for(y=HEIGHT/2; y<HEIGHT*2; y++)
   {
      yposcopy = max(0, y-scale/2);
      for(x=WIDTH/2; x<WIDTH*2; x++)
      {
         
         copy[y-scale/2][x-scale/2] = buf[int(gy) ][int(gx)]; // Grab a pixel from buf
         //copy[y][x] = buf[int(gy) ][int(gx)];
         
         gx += deltax;
         if(gx > WIDTH) break;
      }
      
      if(gx > maxgx) maxgx = gx;
      if(gy > maxgy) maxgy = gy;
      if(x-scale/2 < minpx) minpx = x-scale/2;
      if(yposcopy < minpy) minpy = yposcopy;
      
      gx = 0;
      gy += deltay;
      if(gy > HEIGHT) break;
   }
   
   
   // Copy scaled image back
   for(y=0; y<HEIGHT; y++)
   {
      for(x=0; x<WIDTH; x++)
      {
         buf[y][x] = copy[y][x]; //copy[y-scale/2][x-scale/2];
      }
   }
}


drawCopy(xofs,yofs)
{
   // draw
   static line[WIDTH];
   for(y=0; y<HEIGHT; y++)
   {
      for(x=0; x<WIDTH; x++)
      {
         line[x] = copy[y][x];
      }
      sethlin(xofs,y+yofs,line,WIDTH);
   }
}

hsv_to_rgb(h,s,v)
{
   if(v==0){r=0; g=0; b=0;} // no brightness, black
   else if(s==0){r=v; g=v; b=v;} // grayscale, no saturation
   else{
      hf = h / 60.0;
      i = floor(hf);
      f = hf - i;
      pv = v* (1-s);
      qv = v * (1-s*f);
      tv = v * (1-s*(1-f));
      if(i==0){r=v; g=tv; b=pv;}
      if(i==1){r=qv; g=v; b=pv;}
      if(i==2){r=pv; g=v; b=pv;}
      if(i==3){r=pv; g=qv; b=v;}
      if(i==4){r=tv; g=pv; b=v;}
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}
   
   }
   r = int(r*255);
   g = int(g*255);
   b = int(b*255);
   col =  rgb(r,g,b); // returns last value
   //return r*2^16 + g*2^8 + b;
}