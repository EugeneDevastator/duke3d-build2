struct sph{
   x,y;
   r;
   tx,ty;
   customFreq;
};

enum{MAX_CIRCLES=100}
static sph sphrs[MAX_CIRCLES];
static margin;
static interval;
static outlineFatness = 1;

static time,dt;
()
{
   newTime = klock();
   dt = newTime - time;
   time = newTime;

   cls(0);
   clz(1e32);
   /*
   sphrs[0].x = xres/2;
   sphrs[0].y = yres/2;
   sphrs[1].x = mousx;
   sphrs[1].y = mousy;
   */
   if(numframes==0)
   {
      margin = 100;
      //interval = min(xres,yres) - 2*margin;   
      interval = xres - 2*margin;   

      for(i=0; i<MAX_CIRCLES; i++)
      {
         sphrs[i].x = xres/2;
         sphrs[i].y = yres/2;
         sphrs[i].r = 10 + 20*rnd;
         sphrs[i].customFreq = 105*rnd;
   
         sphrs[i].tx = margin+interval * rnd;
         sphrs[i].ty = margin+interval * rnd;
         
            sphrs[i].x = margin+interval * rnd;
            sphrs[i].y = 2*yres*rnd+yres;

            sphrs[i].tx = sphrs[i].x;
            sphrs[i].ty = -sphrs[i].r*2;
      }
   }
   
   for(i=0; i<MAX_CIRCLES; i++)
   {
         vecx = sphrs[i].tx - sphrs[i].x;
         vecy = sphrs[i].ty - sphrs[i].y;
         dist = sqrt(vecx*vecx + vecy*vecy );
         vecx /= dist;
         vecy /= dist;
         sphrs[i].x += vecx * dt * 100;
         sphrs[i].y += vecy * dt * 100;      
         
         //if( dist < 3 )
         {
            //sphrs[i].tx = margin+interval * rnd;
            //sphrs[i].ty = margin+interval * rnd;
         }
         if( sphrs[i].y < sphrs[i].ty )
         {
            sphrs[i].customFreq = 105*rnd;         

            sphrs[i].x = margin+interval * rnd;
            sphrs[i].y = yres + 100;

            sphrs[i].tx = sphrs[i].x;
            sphrs[i].ty = -100;
         }
         
         sphrs[i].tx = sphrs[i].x + sin(time*5+sphrs[i].customFreq)*200;
   }
   
   if(0)
   {
      setcol(255,255,255);
      for(i=0; i<MAX_CIRCLES; i++)
      {
         x1 = sphrs[i].x; y1 = sphrs[i].y;   
         r1 = sphrs[i].r;
   
         for(j=i; j<MAX_CIRCLES; j++)
         {
            x2 = sphrs[j].x; y2 = sphrs[j].y;   
            r2 = sphrs[j].r;  
      
            ang1 = atan2(y2-y1, x2-x1);    
            ang2 = atan2(y1-y2, x1-x2); 
            drawcone( x1+cos(ang1)*r1, y1+sin(ang1)*r1, outlineFatness,
            x2+cos(ang2)*r2, y2+sin(ang2)*r2,outlineFatness);
         }
      }
   }
   
   setcol(255,255,255);
   sizx=0; sizy=0;
   getpicsiz(sizx, sizy);
   drawspr(xres/2, yres/2, sizx,0);
   //texquad(0,0,sizx,sizy);
   
   glEnable(GL_DEPTH_TEST);
   glDisable(GL_DEPTH_TEST);
   glEnable(GL_ALPHA_TEST);
   glCullface(GL_NONE);
   
   static tex[2][2];
   for(i=0; i<2; i++)
   for(j=0; j<2; j++)
   {
      tex[i][j] = rgb(255,255,255);
   }     
   handle = glsettex(tex,2,2);   
   glremovetex(handle);

   for(i=0; i<MAX_CIRCLES; i++)
   {
      x1 = sphrs[i].x; y1 = sphrs[i].y;   
      r1 = sphrs[i].r;
   
      setcol(255,255,255);
      drawCirc( x1,y1, -r1 );
   }
   
   for(i=0; i<MAX_CIRCLES; i++)
   {
      x1 = sphrs[i].x; y1 = sphrs[i].y;
      r1 = sphrs[i].r;   
      //setcol(0x4dacdb);
      //drawSph( x1, y1, r1-outlineFatness+.5 );
      setcol(255,255,255);
      texCirc(x1,y1,r1-outlineFatness+.5);
   }
   

   
   
   setcol(255,255,255);
   texCirc(mousx,mousy,35);


}

// really wanted to make a transparent texture and use
// whats drawn before it
// but z-ordering aint correct
// so, using look-up from texture at pos instead
texCirc(x,y,r)
{
   segs = 18;
   ang_delta = 2*PI / (segs-1);
   ang = 0;
   glBegin(GL_POLYGON);
   for(i=0; i<segs; i++)
   {  
      // pseudo lenz like effect
      if(0)
      {
         u = (x)/xres + ( (cos(ang) +1) * .5) / r;
         v = (y)/yres + ( (sin(ang) +1) * .5) / r;
      }else
      {
         u = (x-r)/xres + ( (cos(ang) +1) * .5) / (r/4);
         v = (y-r)/yres + ( (sin(ang) +1) * .5) / (r/4);
      }
      
      xp = x+r*cos(ang);
      yp = y+r*sin(ang);
      ang += ang_delta;
      
      glTexCoord(u,v); 
      glVertex(xp,yp);       
   }
   glEnd();
}

drawCirc(x,y,r)
{
   segs = 200;
   ang_delta = 2*PI / (segs-1);
   ang = 0;
   for(i=0; i<segs; i++)
   {
      xp = x+r*cos(ang);
      yp = y+r*sin(ang);
      ang += ang_delta;
      drawsph(xp,yp,outlineFatness);
   }
}

texquad(x,y,width,height)
{
   
   glBegin(GL_COMPLEX);
   glTexCoord(0,0);glVertex(x,y);
   glTexCoord(1,0);glVertex(x+width,y);
   glTexCoord(1,1);glVertex(x+width,y+height);
   glTexCoord(0,1);glVertex(x,y+height);
   glEnd();
   
   /*
   glBegin(GL_QUADS);
   glTexCoord(0,0);glVertex(x,y);
   glTexCoord(1,0);glVertex(x+width,y);
   glTexCoord(1,1);glVertex(x+width,y+height);
   glTexCoord(0,1);glVertex(x,y+height);
   glEnd();
   */
}
