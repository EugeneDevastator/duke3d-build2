#define _DEBUG
struct vec{ x,y,z; }

struct boid_t
{
   vec pos;
   vec vel;
   vec move_target;
   seeking_target;
   radius;
   alive;
   is_selected;
};

enum{ MAX_BOIDS = 256 }
static boid_t boids[MAX_BOIDS];
static vec targets[MAX_BOIDS];

static generic_radius = 4;

static time, oldtime;
()
{

   if ( numframes == 0 )
   {
      for(i=0; i<256; i++)
      {
         createBoid( xres/2 - 200 + rnd*400, yres/2 -200 + rnd * 400 );
      }
   }

   cls(0);
   
   time = klock(0);
   delta = time - oldtime;
   oldtime = time;
   
   update_boids(delta);
   
   static vec selection_start;
   static started_sel = 0;
   static old_bstatus = 0;
   
   if ( bstatus==1 && old_bstatus == 0 )
   {   
      vecset( selection_start, mousx, mousy, 0 );
      started_sel = 1;
   }
   
   if ( started_sel )
   {
      if ( bstatus == 0 ) // finished selection
      {
         started_sel = 0;
         
         vec selection_end;
         vecset( selection_end, mousx, mousy, 0 );
         mark_selected( selection_start, selection_end );
            
      }else{
         drawrectopen( selection_start.x, selection_start.y, mousx, mousy );
      }
   }
   

   // Movement
   
   if ( bstatus==2 )
   {
      num_selected = 0;
      for(i=0; i<MAX_BOIDS; i++)
      {
         if ( boids[i].alive && boids[i].is_selected ) 
         {
            //vecset( boids[i].move_target, mousx, mousy, 0 );
            boids[i].seeking_target = 1;
            num_selected++;
         }   
      }
      
      side_by_side = int( sqrt(num_selected) );
      dx = generic_radius * 4.5;
      x = 0;
      y = 0;
      
      
      for(i=0; i<num_selected; i++)
      {

         tx = -0.5 * dx * side_by_side + mousx + x*dx;
         ty = -0.5 * dx * side_by_side + mousy + y*dx;
         
         vecset( targets[i], tx, ty, 0 );

         x++;
         if ( x > side_by_side ){
            x = 0;
            y++;
         }    
           
         //drawsph( tx, ty, -5 );

      }
      
      find_way(num_selected);
      
      
   }
   
   
   
   old_bstatus = bstatus;

}

getSelectionCentroid( vec cent, num_selected )
{
   vecset(cent,0,0,0);
   for(i=0; i<num_selected; i++)
   {   
      vecadd( cent, cent, targets[i] );
   }
   cent.x /= num_selected;
   cent.y /= num_selected;
}

getUnitCentroid( vec cent, num_selected )
{
   vecset(cent,0,0,0);
   for(i=0; i<MAX_BOIDS; i++)
   {
      if ( boids[i].alive && boids[i].is_selected ) {   
         vecadd( cent, cent, boids[i].pos );
      }
   }
   cent.x /= num_selected;
   cent.y /= num_selected;
}

find_way(num_selected)
{
      static occupied[ MAX_BOIDS ];
      static satisfied[ MAX_BOIDS ];
      
      for(i=0; i<MAX_BOIDS; i++){
         occupied[i] = 0;
         satisfied[i] = 0;
      }
      
      #define NJU
      
      #ifdef NJU
      
      #define USE_UNIT_CLOSEST
      #define USE_TARG_CLOSEST
      
      vec centroid;
      getSelectionCentroid( centroid, num_selected ); 
      
      vec unit_centroid;
      getUnitCentroid( unit_centroid, num_selected ); 
      
      vec diff;
      vecsub( diff, centroid, unit_centroid );
      vecadd( centroid, centroid, diff );

      vec anti_centroid;
      mindist = 0;
      targ_furthest = 0;
      for(i=0; i<num_selected; i++)
      {
         if ( occupied[i]==0 ) 
         {
            d = vecdistance( targets[i], centroid );
            if ( d > mindist )
            {
               mindist = d;
               targ_furthest = i;
            }
            
         }
      }//targ furthest away from centroid
      vecset( anti_centroid, targets[targ_furthest] );
      
      setcol(255,0,0);
      drawsph( centroid.x, centroid.y, -8 * sqrt(num_selected) );

      places_taken = 0;
      while( places_taken < num_selected )
      {
         unit_closest = 0;
         #ifdef USE_UNIT_CLOSEST
            mindist = 1e32;
         #else
            mindist = -1;
         #endif
         
         for(i=0; i<MAX_BOIDS; i++)
         {
            if ( boids[i].alive && boids[i].is_selected ) 
            {
               if ( satisfied[i] ) continue; 
               d = vecdistance( boids[i].pos, centroid );
               
               #ifdef USE_UNIT_CLOSEST
                  if ( d < mindist )
               #else
                  if ( d > mindist )
               #endif
               {
                  mindist = d;
                  unit_closest = i;
               }
               
            }
         }//unit closest to cent
         
         target_closest = 0;
         
         
         #ifdef USE_TARG_CLOSEST
            mindist = 1e32;
         #else
            mindist = -1;
         #endif
         
         for(i=0; i<num_selected; i++)
         {
            if ( occupied[i]==0 ) 
            {
               d = vecdistance( targets[i], centroid );
               #ifdef USE_TARG_CLOSEST
                  if ( d < mindist )
               #else
                  if ( d > mindist )
               #endif
               {
                  mindist = d;
                  target_closest = i;
               }
               
            }
         }//targ closest to cent
         
         vecset( boids[unit_closest].move_target, targets[target_closest] );
         satisfied[ unit_closest ] = 1;
         occupied[ target_closest ] = 1;
         places_taken++;
         

      }      

      #else
      
      cnt = 0;
      for(i=0; i<MAX_BOIDS; i++)
      {
         if ( boids[i].alive && boids[i].is_selected ) 
         {
            tx = targets[cnt].x;
            ty = targets[cnt].y;
            vecset( boids[i].move_target, tx, ty, 0  );
            cnt++;
         }
      
      }
      #endif
}

drawrectfill(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }

mark_selected( vec selection_start, vec selection_end )
{

   for(i=0; i<MAX_BOIDS; i++)
   {
      if ( boids[i].alive==1 ) 
      {
         vec p;
         vecset( p, boids[i].pos );
         
         sel_x = min( selection_start.x, selection_end.x );
         sel_y = min( selection_start.y, selection_end.y );

         size_x = fabs( selection_start.x - selection_end.x );
         size_y = fabs( selection_start.y - selection_end.y );
         
         if ( PointInRect(p.x,p.y,
                  sel_x, sel_y,
                  size_x, size_y ) )
         {
            boids[i].is_selected = 1;
         }else{
            boids[i].is_selected = 0;
         }
      }
   }

}

// Doesnt take negative width/height into account
PointInRect(testx,testy,rx,ry,w,h)
{
   if(testx >= rx && testx <= rx+w)
   if(testy >= ry && testy <= ry+h)
      return 1; 
   return 0;
}

createBoid( x, y )
{
   for(i=0; i<MAX_BOIDS; i++){
      if ( boids[i].alive==0 ) 
      {
         boids[i].alive = 1;
         vecset( boids[i].pos, x, y, 0 );
         vecset( boids[i].move_target, boids[i].pos );
         boids[i].radius = generic_radius;
         boids[i].is_selected = 0;
         return;
      }
   }
}

draw_boid( b )
{
   setcol( 255, 255, 0 );

   x = boids[b].pos.x;
   y = boids[b].pos.y;
   drawsph( x, y, -boids[b].radius );
   
   if ( boids[b].is_selected )
   {
      setcol( 0, 255, 0 );
      drawsph( x, y, -(boids[b].radius+2) );
   }
   
   dist_to_targ = vecDistance( boids[b].pos, boids[b].move_target );
   
   #ifdef _DEBUG
   if ( boids[b].seeking_target )
   {
      setcol( 0, 255, 0 );
      tx = boids[b].move_target.x;
      ty = boids[b].move_target.y ;
      moveto( x, y ); 
      lineto( tx,ty );
      //drawsph( tx, ty, -(boids[b].radius+2) );
   }
   #endif
}

update_boids(delta)
{
   speed = 100; // Pix per sec
   
   for(i=0; i<MAX_BOIDS; i++)
   {
      if ( !boids[i].alive ) continue;
      
      if ( boids[i].seeking_target )
      {
         dist_to_targ = vecDistance( boids[i].pos, boids[i].move_target );
         
         if ( dist_to_targ > 1e-1 )//boids[i].radius*0.1 )
         {
            vecsub( boids[i].vel, boids[i].move_target, boids[i].pos );
            normalize( boids[i].vel );
            boids[i].vel.x *= delta * speed;
            boids[i].vel.y *= delta * speed;
            vecadd( boids[i].pos, boids[i].pos, boids[i].vel );
         }else{
            boids[i].seeking_target = 0;
         }
      }
      

   }
   
   for(i=0; i<MAX_BOIDS; i++)
   {
      if ( !boids[i].alive ) continue;
      seperation( i ); // Keep dist
      avoidance( i );
   }
   
// Apply seperation
   /*
   for(i=0; i<MAX_BOIDS; i++)
   {
      if ( !boids[i].alive ) continue;
      
      vecsub( boids[i].pos, boids[i].pos, boids[i].avoid_delta );
      vecset( boids[i].avoid_delta, 0,0,0);
   }
   */

   for(i=0; i<MAX_BOIDS; i++)
   {
      if ( !boids[i].alive ) continue;
      draw_boid( i );
   }
   
   
}

seperation( b )
{
   sum_dx = 0;
   sum_dy = 0;
   
   for(i=0; i<MAX_BOIDS; i++)
   {
      if ( i==b ) continue;
      
      if ( !boids[i].alive ) continue;
      

      d = vecDistance( boids[i].pos, boids[b].pos );
      if ( d < (boids[i].radius+boids[b].radius) )
      {
         sum_dx = (boids[i].pos.x - boids[b].pos.x) / d;
         sum_dy = (boids[i].pos.y - boids[b].pos.y) / d;
      }
      
   }
   
   boids[b].pos.x -= sum_dx;
   boids[b].pos.y -= sum_dy;
}

avoidance( b )
{
   sum_dx = 0;
   sum_dy = 0;
   
   vec old_p;
   vecset( old_p, boids[b].pos );
   
   for(i=0; i<MAX_BOIDS; i++)
   {
      if ( i==b ) continue;
      
      if ( !boids[i].alive ) continue;
      

      d = vecDistance( boids[i].pos, boids[b].pos );
      if ( d < (boids[i].radius+boids[b].radius) )
      {
         sum_dx = (boids[i].vel.x) / d;
         sum_dy = (boids[i].vel.y) / d;
      }
      
   }
   
   boids[b].pos.x -= -sum_dy;
   boids[b].pos.y -= sum_dx;
   
   if ( boids[b].seeking_target == 0 ){
      //vecset( boids[b].move_target, old_p );
      boids[b].seeking_target = 1;
   }
}

vecDistance( vec a, vec b )
{
   return sqrt( (a.x-b.x)^2 + (a.y-b.y)^2 + (a.z-b.z)^2 );
}

vecset(vec a, x,y,z){
   a.x = x; a.y = y; a.z = z;
}

vecset(vec a, vec other){
   a.x = other.x; a.y = other.y; a.z = other.z;
}

vecAdd( vec out, vec a, vec b)
{
   out.x = a.x + b.x;
   out.y = a.y + b.y;
   out.z = a.z + b.z;   
}
vecSub( vec out, vec a, vec b)
{
   out.x = a.x - b.x;
   out.y = a.y - b.y;
   out.z = a.z - b.z;   
}

vecDot( vec a, vec b)
{
   return a.x*b.x + a.y*b.y + a.z*b.z;
}

length( vec v )
{
   return sqrt( vecdot(v,v) );
}

normalize( vec v )
{
   len = length(v);
   if ( len )
   {
      v.x /= len; v.y /= len; v.z /= len;
   }
}