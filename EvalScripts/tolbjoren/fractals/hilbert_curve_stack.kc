/*
Simple L-system of Hilbert Curve
written by Torbjoern Haugen 26. aug. 2013

Variables: A,B
Constants: +,-,F (+ is rotate 90* right, - is rotate 90* left, F is move forward)
Start: A
Rules: (A -> -BF+AFA+FB-), (B -> +AF-BFB-FA+)
*/
enum{MAX_STACK = 1024*500}
static stack[2][MAX_STACK];
static stackCounters[2];
static stackNum = +1;
static drawScale = 10;
static numIters = 4;
#define FORW 1
#define ROTL 2
#define ROTR 3
#define RULA 4
#define RULB 5

()
{
  cls(0);

  numIters=int(mousx/xres*8);
  if (numIters>8)numIters=8;
  if (numIters<0)numIters=0;	
	
  produce();
  
	stackToDraw = 0;  
  if (stackNum==1) stackToDraw=1;  
  draw(stackToDraw);
	
  setcol(255,255,255);
	moveto(0,0);
  printf("%g\n%g", stackCounters[stackToDraw], MAX_STACK);
}
produce()
{  
	stackCounters[0] = 0;
	stackCounters[1] = 0;
	
	insert_a_stack(0); // init stack 0 with rule A
	stackNum = +1;  // next gen will be in stack 1
	
	
	for(i=0; i<numIters; i++)
	{
	  if (stackNum==-1) replace(0,1);
		if (stackNum==+1) replace(1,0);
		stackNum *= -1;
	}
}

replace(from,to)
{
  cnt = stackCounters[from];
  for(i=0; i<cnt; i++)
	{
    if (stack[from][i]==FORW) { insert(to, FORW); }
		else if (stack[from][i]==ROTL) { insert(to, ROTL); }
		else if (stack[from][i]==ROTR) { insert(to, ROTR); }
		else if (stack[from][i]==RULA) { insert_a_stack(to); }
		else if (stack[from][i]==RULB) { insert_b_stack(to); }
	}
	// can now empty stack we read from
	stackCounters[from] = 0;
}

insert(stackNum, CMD)
{
 stack[stackNum][ stackCounters[stackNum]++ ] = CMD;
}

insert_a_stack(s)
{
  insert(s,ROTL);
  insert(s,RULB);
  insert(s,FORW);
  insert(s,ROTR);
  insert(s,RULA);
  insert(s,FORW);
  insert(s,RULA);
  insert(s,ROTR);
  insert(s,FORW);
  insert(s,RULB);
  insert(s,ROTL);
}
insert_b_stack(s)
{
  insert(s,ROTR);
  insert(s,RULA);
  insert(s,FORW);
  insert(s,ROTL);
  insert(s,RULB);
  insert(s,FORW);
  insert(s,RULB);
  insert(s,ROTL);
  insert(s,FORW);
  insert(s,RULA);
  insert(s,ROTR);
}


draw(stackNum)
{
  curveLen = pow(2,numIters) - 1/pow(2,numIters);
  squareSideLen = 400;
  drawScale = squareSideLen / curveLen;
  x = xres/2 + squareSideLen/2;
  y = yres/2 - squareSideLen/2;
  setcol(64,64,64);
  drawrectopen(x-squareSideLen, y+squareSideLen,x,y); 
	
	dx = -1;
	dy = 0;
	moveto(xres-x,yres-y);
	cnt = stackCounters[stackNum];
  for(i=0; i<cnt; i++)
	{
	  setcol( hsv_to_rgb(i/cnt*240,1,1) );
    if (stack[stackNum][i]==FORW) 
		{ 
		  forwards(x,y,dx,dy); 
			lineto(xres-x,yres-y);
		}
		else if (stack[stackNum][i]==ROTL) { rotateL(dx,dy); }
		else if (stack[stackNum][i]==ROTR) { rotateR(dx,dy); }
		//refresh();
		//sleep(10);
	}
}

forwards(&x,&y,dx,dy)
{
  x = x + drawScale*dx;
  y = y + drawScale*dy;
}
rotateL(&dx,&dy)
{
  if (dx==0 && dy==1) {dx=1; dy=0;}
	else if (dx==1 && dy==0) {dx=0; dy=-1;}
	else if (dx==0 && dy==-1) {dx=-1; dy=0;}
	else if (dx==-1 && dy==0) {dx=0; dy=1;}
}

rotateR(&dx,&dy)
{
  if (dx==+0 && dy==+1) {dx=-1; dy=0;}
	else if (dx==-1 && dy==+0) {dx=0; dy=-1;}
	else if (dx==+0 && dy==-1) {dx=1; dy=0;}
	else if (dx==+1 && dy==+0) {dx=0; dy=1;}
}

hsv_to_rgb(h,s,v){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   return rgb( r*255, g*255, b*255 ); 
}
drawrectfill(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }
