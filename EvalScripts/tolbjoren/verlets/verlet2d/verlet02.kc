// physics body can be a rope! but drawbody code isnt made for it. collision works!

// before collision normal is added
enum{MAXVERTS=100}
static px[MAXVERTS];
static py[MAXVERTS];
static opx[MAXVERTS];
static opy[MAXVERTS];
static ax[MAXVERTS];
static ay[MAXVERTS];
static pointCount = 0;


enum{MAXEDGES=200}
static edgeV1[MAXEDGES];
static edgeV2[MAXEDGES];
static edgeOriginalLength[MAXEDGES];
static edgeCount = 0;


enum{MAX_BODIES = 10}
enum{MAX_BODY_VERTS = 20, MAX_BODY_EDGES = 20}
static physBodyVertCount[MAX_BODIES];
static physBodyEdgeCount[MAX_BODIES];
static physBodyVerts[MAX_BODIES][MAX_BODY_VERTS];
static physBodyEdges[MAX_BODIES][MAX_BODY_EDGES];
static bodyCount = 0;

static bodyCollided[MAX_BODIES];

static timeStep = 0.01;

static xmin,xmax,ymin,ymax;

static ropeIndex = 0;
static boxIdx = 0;

static error = 0; // global that is set to 1 if something should go bump in the night
()
{
   cls(0);
   
   if(numframes==0)
   {
      xmin = 10;
      xmax = xres-10;
      ymin = 10;
      ymax = yres-50;   

      
      boxIdx = makeBox(mousx,mousy, 120,120);
      
      for(i=0; i<3; i++)
      {
         scale = rnd*100;
         makeBox(10*xres/100 + i*200, yres/2, 50+scale,50+scale);
      }
        
      ropeIndex = makeRope(20*xres/100, yres/2, 5, 5);
      
   }
   
   moveto(0,ymax); lineto(xmax,ymax);

   px[boxIdx] = mousx;
   py[boxIdx] = mousy; 
   

   
   drawBodies();
 
   updateEdges();   
   physiks();
   checkCollision();
   
   moveto(0,0); printf("error: %g",error);
   printf("\npointCount: %g/%g",pointCount,MAXVERTS);
   printf("\nedgeCount: %g/%g",edgeCount,MAXEDGES);
   printf("\nbodyCount: %g/%g",bodyCount,MAX_BODIES);
}

drawBodies()
{
   for(i=0; i<bodyCount; i++)
   {
      // sumxy find the middle of the object. 
      sumx = 0;
      sumy = 0;
      for(j=0; j<physBodyEdgeCount[i]; j++)
      {
         // edges come in pairs. the physBodyEdges array points to e1 and e2
         e1 = edgeV1[ physBodyEdges[i][j] ];   
         e2 = edgeV2[ physBodyEdges[i][j] ];
         // find point using edge indice
         edgeV1x = px[e1]; edgeV1y = py[e1];       
         edgeV2x = px[e2]; edgeV2y = py[e2];        
         moveto( edgeV1x, edgeV1y );
         lineto( edgeV2x, edgeV2y );
         
         if(bodyCollided[i]==1)
            drawsph(edgeV2x, edgeV2y,10);
         else drawsph(edgeV2x, edgeV2y,-10);
         
         sumx += edgeV1x;
         sumy += edgeV1y;
      }   
      
      sumx /= physBodyEdgeCount[i];
      sumy /= physBodyEdgeCount[i];

      // coulld sum up and find middle point
      moveto( sumx,sumy-60 );
      printf("%.0f",i);
      
   }
}

checkCollision(){
   for(a=0; a<bodyCount; a++)
   {
   bodyCollided[a] = 0; // reset collision
   for(b=0; b<bodyCount; b++)
   {
      if(a==b) continue;
      
      if( detectCollision(a,b) == 1)
      {
         bodyCollided[a] = 1;
      }
      
   }
   }
}

// make a rope at x,y with a number of segments with dist between each
makeRope(x,y,segments,dist) // perhaps specify a normal in dir segs are created initially.
{
   p1 = createPoint(x,y);
   physBodyVerts[bodyCount][0] = p1;   
   ropeIdx = p1;

   for(i=1; i<segments; i++)
   {
      p2 = createPoint(x,y + i*25);
      physBodyVerts[bodyCount][i] = p2;
      
      e = createContraint(p1,p2);
      physBodyEdges[bodyCount][i-1] = e;
      
      //px[p2] += rnd/2;
      p1 = p2;
   }
   
   physBodyVertCount[bodyCount] = segments;    
   physBodyEdgeCount[bodyCount] = segments-1;
   bodyCount++;  
   return ropeIdx;
}

makeBox(x,y,w,h){
      v1x = x-w/2;
      v1y = y-h/2;

      v2x = x-w/2;
      v2y = y+h/2;

      v3x = x+w/2;
      v3y = y+h/2;
      
      v4x = x+w/2;
      v4y = y-h/2;
      
      v5x = x; v5y = y;   

      p1 = createPoint(v1x,v1y);
      p2 = createPoint(v2x,v2y);
      p3 = createPoint(v3x,v3y);
      p4 = createPoint(v4x,v4y);
      p5 = createPoint(v5x,v5y);
      
      e1 = createContraint(p1,p2);
      e2 = createContraint(p2,p3);
      e3 = createContraint(p3,p4);
      e4 = createContraint(p4,p1);
      
      // crossbars
      e5 = createContraint(p1,p5);
      e6 = createContraint(p2,p5);
      e7 = createContraint(p3,p5); 
      e8 = createContraint(p4,p5); 
      
      physBodyVertCount[bodyCount] = 5;
      physBodyEdgeCount[bodyCount] = 8; // 8
      physBodyVerts[bodyCount][0] = p1;
      physBodyVerts[bodyCount][1] = p2;
      physBodyVerts[bodyCount][2] = p3;
      physBodyVerts[bodyCount][3] = p4;
      physBodyVerts[bodyCount][4] = p5;
      
      physBodyEdges[bodyCount][0] = e1;
      physBodyEdges[bodyCount][1] = e2;
      physBodyEdges[bodyCount][2] = e3;
      physBodyEdges[bodyCount][3] = e4;
      
      physBodyEdges[bodyCount][4] = e5;
      physBodyEdges[bodyCount][5] = e6;
      physBodyEdges[bodyCount][6] = e7;
      physBodyEdges[bodyCount][7] = e8;
      bodyCount++;
      
      return p5;
}

physiks()
{
   for(i=0; i<pointCount; i++)
   {
      tmpx = px[i];
      tmpy = py[i];
      px[i] += px[i] - opx[i] + ax[i]*timeStep^2;
      py[i] += py[i] - opy[i] + ay[i]*timeStep^2;
      opx[i] = tmpx;
      opy[i] = tmpy;
      
      if(px[i] < xmin) px[i] = xmin;
      if(px[i] > xmax) px[i] = xmax;      
      if(py[i] < ymin) py[i] = ymin;
      if(py[i] > ymax) {py[i] = ymax;}
      
      px[ropeIndex] = 20*xres/100;
      py[ropeIndex] = yres/2;
            
      //drawsph(px[i], py[i], -5);
   }   
}

updateEdges(){
   for(i=0; i<edgeCount; i++)
   {
      edgeV1x = px[edgeV1[i]];  
      edgeV1y = py[edgeV1[i]];  

      edgeV2x = px[edgeV2[i]];  
      edgeV2y = py[edgeV2[i]]; 

      // Calculate vector
      v1v2x = edgeV1x-edgeV2x;
      v1v2y = edgeV1y-edgeV2y;
      v1v2length = sqrt( v1v2x^2 + v1v2y^2 );
      // Calc difference from original length
      diff = v1v2length - edgeOriginalLength[i];
      // normalize v1v2
      v1v2x /= v1v2length;
      v1v2y /= v1v2length;
      
      // Put both vertices apart by half of the differance respectively
      edgeV1x -= v1v2x*diff*0.5;
      edgeV1y -= v1v2y*diff*0.5;
      edgeV2x += v1v2x*diff*0.5;
      edgeV2y += v1v2y*diff*0.5;
            
      // copy constrained values back into points.
      px[edgeV1[i]] = edgeV1x;
      py[edgeV1[i]] = edgeV1y;
      
      px[edgeV2[i]] = edgeV2x;
      py[edgeV2[i]] = edgeV2y;
   }

}

createPoint(x,y){
   px[pointCount] = x;
   py[pointCount] = y;
   opx[pointCount] = x;
   opy[pointCount] = y;
   ax[pointCount] = 0;
   ay[pointCount] = 200;
   pointCount++;
   return pointCount-1;
}
createContraint(p1,p2){
   edgeV1[edgeCount] = p1;
   edgeV2[edgeCount] = p2; 

   edgeOriginalLength[edgeCount] = sqrt( (px[p1]-px[p2])^2 + (py[p1]-py[p2])^2 );

   edgeCount++;
   return edgeCount-1;
}

// 2d projection is the dot product of the projection axis and the point we want to proj.
projectToAxis(bodyIdx, axisx, axisy, &min, &max)
{
   dotP = axisx * px[physBodyVerts[bodyIdx][0]] + axisy * py[physBodyVerts[bodyIdx][0]];
   
   // Set max and min values to proj of 1st vert
   min = dotP;
   max = dotP;
   
   for(i=1; i<physBodyVertCount[bodyIdx]; i++)
   {
      dotP = axisx * px[physBodyVerts[bodyIdx][i]] + axisy * py[physBodyVerts[bodyIdx][i]];
      min = min( dotP, min );  
      max = max( dotP, max );  
   }
}

detectCollision(body1, body2){
   for(i=0; i<physBodyEdgeCount[body1] + physBodyEdgeCount[body2]; i++)
   {
      edge = -1;
      if( i < physBodyEdgeCount[body1] ) edge = physBodyEdges[body1][i];
      else edge = physBodyEdges[body2][i];
      
      // calculate the axis perp to this edge and normalize it
      axisx = py[edgeV1[edge]] - py[edgeV2[edge]];
      axisy = px[edgeV1[edge]] - px[edgeV2[edge]];
      len = sqrt(axisx^2 + axisy^2);
      axisx/=len; axisy/=len;
      
      mina=0; minb=0; maxa=0; maxb=0; // project both bodies onto the perp axis
      projectToAxis(body1, axisx, axisy, mina, maxa);
      projectToAxis(body2, axisx, axisy, minb, maxb);
      
      // calc dist between two intervals
      distance = intervalDistance(minA, maxA, minB, maxB);
      
      if(distance > 0.0) return 0;
   }
   return 1;
}


intervalDistance(minA, maxA, minB, maxB){
   if(minA < minB) return minB-MaxA;
   else return minA - maxB;
}