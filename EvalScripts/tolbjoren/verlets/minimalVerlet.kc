

// added for collision normal info
static minDistance = 0;
static collisionDepth = 0;
static collisionNormalx = 0;
static collisionNormaly = 0;
static collisionEdge = -1;
static collisionVert = -1;
static collisionEdgeParent = -1;

enum{MAX_POINTS=2000, MAX_EDGES = 2000}
static isDead[MAX_EDGES];
static lastCreatedEdge = 0;
static edgeV1[MAX_EDGES];
static edgeV2[MAX_EDGES];
static edgeOriginalLength[MAX_EDGES];
static edgeIsSelected[MAX_EDGES];
static stress[MAX_EDGES];

static px[MAX_POINTS];
static py[MAX_POINTS];
static opx[MAX_POINTS];
static opy[MAX_POINTS];
static ax[MAX_POINTS];
static ay[MAX_POINTS];
static vx[MAX_POINTS];
static vy[MAX_POINTS];
static pIsFrozen[MAX_POINTS];
static pointCount = 0;


static linestarted=0;
static ox,oy;

static grabi = -1;
enum{COPY=1, MAKEBODY=2}
static timestep = 0; //tmp
static timResolveCollision = 0;
static frameCount = 0;

static mousDirX, mousDirY;
enum{MOUSE_SAMPLES = 20}

static oldmousx,oldmousy;
static mouseSampX[MOUSE_SAMPLES], mouseSampY[MOUSE_SAMPLES];
static samplePos=0;

static dt = 0.01;
static oldtim;

static accumulator = 0.0; // fix your timestep
()
{
   
   if(numframes==0){

      for(i=0; i<MAX_EDGES; i++){
         isDead[i] = 1;
      }  
      
      // Make BEAM
      siz = 5;
      len = 260;
      if( siz*len > xres-siz ){
         siz = 5;
         len = (xres-15)/siz;
      }
      
      make_beam(xres/2-len*siz/2,yres/2,siz,len);
   }


   cls(0); tim = klock(0); dt = tim-oldtim; oldtim = tim;
   
   inputMakePoint(); // Make points by LEFT-CLICKing
   inputDragPoint(); // Drag em about with right mouse


   for(i=0; i<MAX_EDGES; i++)
   {
      if( isDead[i] ) continue;
      
      if (edgeIsSelected[i]==1){ 
         setcol(255,0,0);
      }else{
         setcol(255,255,255);
      }
      
      e1 = edgeV1[i];
      e2 = edgeV2[i];
      edgeV1x = px[e1];  
      edgeV1y = py[e1];  

      edgeV2x = px[e2];  
      edgeV2y = py[e2]; 
      
      // Calculate vector
      v1v2x = edgeV1x-edgeV2x;
      v1v2y = edgeV1y-edgeV2y;
      v1v2length = sqrt( v1v2x^2 + v1v2y^2 );
      diff = edgeOriginalLength[i] - v1v2length;
      stress[i] *= 0.05;
      stress[i] += diff;
      
      if( abs(stress[i]) > 2 )
      {
      moveto( px[e1]-v1v2x*.5, py[e1]-v1v2y*.5 );
      printf("%.2f",stress[i]);
      }

      //setcol( roygbiv[96 + max(-95, -stress[i]*95)] );  
      diff2 = diff^2*512;
      setcol( 128+diff2, 128-diff2, 128-diff2 );      

      //moveto(mousx,mousy); printf("stress: %.10f", stress);

      moveto( px[edgeV1[i]], py[edgeV1[i]] );
      lineto( px[edgeV2[i]], py[edgeV2[i]] );
   }

   for(i=0; i<MAX_EDGES; i++)
   {
      if( isDead[i] ) continue;
      if( abs(stress[i]) > 20 ) isDead[i] = 1;
   }

   d=1e32;
   pt = findClosest(mousx,mousy,d);
   if( d < 10*10 )
   {
      drawsph( px[pt], py[pt], -10);
   }
   
   dt = 0.016;

   if(keystatus[2]==1)
   {
      accumulator+=dt;
      while(accumulator>=dt)
      {
         UpdateVerlet(dt);
         //t += dt;
         accumulator -= dt;      

      }
   }
   else
   {
      for(i=0; i<pointCount; i++) // dont accumulate velocity when not sim.
      {
         opx[i] = px[i];
         opy[i] = py[i];
      }
   }

   IterateCollisions();
   constrainPoints();
   
   setcol(255,255,255);
   moveto(0,0); setfont(6,10);
   printf("pointcount %g\n",pointcount);
   printf("FrameDT = %g\n",dt);
   
   frameCount++;
 
   oldmousx = mousx;
   oldmousy = mousy;
}

updateVerlet(h)
{
   for(i=0; i<pointCount; i++)
   {
      if(pIsFrozen[i]) continue; // skip if frozen
      
      tmpx = px[i];
      tmpy = py[i]; 
      px[i] = 2*px[i]-opx[i]-h^2*ax[i];
      py[i] = 2*py[i]-opy[i]-h^2*ay[i]; 
      vx[i] = (px[i] - tmpx)/h;
      vy[i] = (py[i] - tmpy)/h;  
      
      vx[i] *= (0.999);
      vy[i] *= (0.999);

      opx[i] = px[i] - h * vx[i]; 
      opy[i] = py[i] - h * vy[i];  

   }   
}

inputMakePoint(){
   if( bstatus==1 && linestarted==0 )
   {
      bstatus = 0;
      linestarted = 1;
      ox = mousx;
      oy = mousy;
      
   }
   else if( bstatus==1 && linestarted==1 )
   {
      bstatus = 0;
      linestarted = 0;
      makEdge(ox,oy,mousx,mousy);
   }
   
/* hax*/
   if( bstatus==4 && linestarted==0 )
   {
      bstatus = 0;
      linestarted = 1;
      ox = mousx;
      oy = mousy;
      
   }
   else if( bstatus==4 && linestarted==1 )
   {
      bstatus = 0;
      linestarted = 0;
      makEdge(ox,oy,mousx,mousy);
      p1 = edgeV1[lastCreatedEdge];
      p2 = edgeV2[lastCreatedEdge];
      pIsFrozen[p1] = 1; pIsFrozen[p2] = 1;
   }   


   blink = rnd;
   setcol(255*blink,255*blink,255*blink);
   if( linestarted==1)
   {
      moveto(ox,oy); 
      lineto(mousx,mousy);
   }
}

inputDragPoint(){
   if( bstatus == 2 && grabi == -1 )
   {
      closestPt = -1;
      closestD = 1e32;
      for(i=0; i<pointCount; i++){
         dSq = (px[i]-mousx)^2 + (py[i]-mousy)^2;
         
         if( dSq < closestD ){
            closestD = dSq;
            closestPt = i;
         } 
      }
      
      if( closestD < 10*10){
         grabi = closestPt;
         px[closestPt] = mousx;
         py[closestPt] = mousy;
         opx[closestPt] = mousx;
         opy[closestPt] = mousy;
      }
   }
   else if(bstatus==0){
      grabi = -1;
   }
   else if( grabi > -1){
         px[grabi] = mousx;
         py[grabi] = mousy;
         opx[grabi] = mousx;
         opy[grabi] = mousy;
   }
}

findPointsInRect(markAsSelected)
{
   for(i=0; i<MAX_EDGES; i++)
   {
      if( isDead[i] ) continue;
      wx = mousx-ox;
      wy = mousy-oy;
      v1 = edgeV1[i];
      edgeIsSelected[i] = 0;
      if( RectCollide( px[v1], py[v1], ox,oy, wx,wy ) )
      {
         edgeIsSelected[i] = markAsSelected;
         drawsph( px[v1], py[v1], 5);
      }
      v2 = edgeV2[i];
      if( RectCollide( px[v2], py[v2], ox,oy, wx,wy ) )
      {
         drawsph( px[v2], py[v2], 5);
      }
   }
}

RectCollide(testx,testy,rx,ry,w,h) // prolly better ways.
{
   gotx=0; goty=0;
   if(w < 0 )
   {
      if(testx <= rx && testx >= rx+w) gotx = 1;
   }else{
      if(testx >= rx && testx <= rx+w) gotx = 1;
   }
   if(h < 0)
   {
      if(testy <= ry && testy >= ry+h) goty = 1;
   }else{
      if(testy >= ry && testy <= ry+h) goty  = 1;
   }
   if( gotx == 1 && goty == 1 ) return 1;
}

drawRect(sx, sy, wx, wy)
{   
   moveto(sx, sy);
   lineto(sx+wx, sy+0);
   
   moveto(sx, sy+wy);
   lineto(sx+wx, sy+wy);
   
   moveto(sx, sy);
   lineto(sx, sy+wy);
   
   moveto(sx+wx, sy);
   lineto(sx+wx, sy+wy);
}

constrainPoints(){
   for(i=0; i<pointCount; i++)
   {
      // Reset acceleration forces
      ax[i] = 0;
      ay[i] = -20;//-1000;//.0001;   

      if(px[i] < 1) px[i] = 1;
      if(px[i] > xres-1) px[i] = xres-1;
      if(py[i] < 1) py[i] = 1;
      if(py[i] > yres-1) py[i] = yres-1;
   }
}

findClosest(x,y, &closestD)
{
   closestPt = -1;
   closestD = 1e32;
   for(i=0; i<pointCount; i++)
   {
      dSq = (px[i]-x)^2 + (py[i]-y)^2;
      
      if( dSq < closestD ){
         closestD = dSq;
         closestPt = i;
      }
   }
   
   return closestPt;
}

makPoint(x1,y1)
{
   px[pointCount] = x1; py[pointCount] = y1;
   opx[pointCount] = x1; opy[pointCount] = y1; // make velocity zero by setting now and old same
   pointCount++;
   return pointCount-1;
}

makEdge2(p1,p2)
{
   newEdge = getFreeEdge();
   edgeV1[newEdge] = p1; edgeV2[newEdge] = p2;
   edgeOriginalLength[newEdge] = sqrt( (px[p1]-px[p2])^2 + (py[p1]-py[p2])^2);
   lastCreatedEdge = newEdge;
   return newEdge;
}

makEdge(x1,y1,x2,y2)
{
   newEdge = getFreeEdge();
   // if another point is close enough, merge with it.
   closestD = 1e32;
   pt = findClosest(x1,y1, closestD); // merge with start?
   if(pt != -1 && closestD < 10*10 )
   {
      pt2 = findClosest(x2,y2, closestD); // merge with end?
      if(pt2 != -1 && closestD < 10*10 )
      {
         makEdge2( pt, pt2 );
         return;
      }
      else // nop. make new point at end.
      {
         p2 = makPoint(x2,y2);
         makEdge2( pt, p2 );
         return;
      }
   }
   // did not merge with any, mak 2 new pts.
   px[pointCount] = x1; py[pointCount] = y1; edgeV1[newEdge] = pointCount; pointCount++;
   px[pointCount] = x2; py[pointCount] = y2; edgeV2[newEdge] = pointCount; pointCount++;
   edgeOriginalLength[newEdge] = sqrt( (x1-x2)^2 + (y1-y2)^2);
   
   lastCreatedEdge = newEdge;
   return newEdge;
}

getFreeEdge()
{
   newEdge = -1;
   for(i=0; i<MAX_EDGES; i++){
      if( isDead[i] == 1 ){
         newEdge = i;
         isDead[newEdge] = 0;
         break; 
      }
   }
   return newEdge;
}

// Makes sure springs are correct length
// modify to make stiffer/softer springs, springs that accelerate.
// springs that shrink/expand.
updateEdges(){
   for(i=0; i<MAX_EDGES; i++)
   {
      if( isDead[i] ) continue;
      e1 = edgeV1[i];
      e2 = edgeV2[i];
      edgeV1x = px[e1];  
      edgeV1y = py[e1];  

      edgeV2x = px[e2];  
      edgeV2y = py[e2]; 
      
      // Calculate vector
      v1v2x = edgeV1x-edgeV2x;
      v1v2y = edgeV1y-edgeV2y;
      v1v2length = sqrt( v1v2x^2 + v1v2y^2 );
      diff = v1v2length - edgeOriginalLength[i];
         // Calc difference from original length
         // normalize v1v2
         v1v2x /= v1v2length;
         v1v2y /= v1v2length;
         
         // Put both vertices apart by half of the differance respectively
         if( !pIsFrozen[e1] )
         {
            px[e1] -= v1v2x*diff*0.5;
            py[e1] -= v1v2y*diff*0.5;
         }
         if( !pIsFrozen[e2] )
         {
            px[e2] += v1v2x*diff*0.5;
            py[e2] += v1v2y*diff*0.5;
         }
   }
}


IterateCollisions(){
   phys_iterations = 10;
   
   for(it=0; it<phys_iterations; it++)
   {
      updateEdges(); 
   }
}

make_beam(x, y, length, segments)
{
   top = makPoint(x, y);
   bottom = makPoint(x, y+length);
   for(i=1; i<segments; i++){
      new_top = makPoint(x+i*length, y);
      new_bottom = makPoint(x+i*length, y+length);
      makEdge2(top, new_top);
      makEdge2(bottom, new_bottom);
      makEdge2(new_top, new_bottom);
      makEdge2(top, new_bottom);
      top = new_top;
      bottom = new_bottom;
   }
}
