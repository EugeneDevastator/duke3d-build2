static posx = 0;
static posy = 0;
static posz = 15;
static posh = 0; // left right
static posv = 1*PI;

static gvec[3];
static A[9];
static ang=0;
static tim,oldtim,dt;



struct vec3{
   x,y,z;
};

struct quad
{
   vec3 v0,v1,v2,v3;
};

enum{MAXPTS = 20}
static ptx[MAXPTS];
static pty[MAXPTS];
static ptz[MAXPTS];
static numpts;

static anim;
()
{
   if(numframes==0)
   {
      setpt(0, -10,5, 0);
      setpt(1,   0,5, 0);
      setpt(2,  10,5, 0);
      
      setpt(3, -10, 0, 0);
      setpt(4,   0, 0, 5);
      setpt(5,  10, 0, 0);
      
      setpt(6, -10, -5, 0);
      setpt(7,   0,-5, 0);
      setpt(8,  10,-5, 0);
      numpts = 9;
   }

   anim = mousx/xres*2*PI;
   cls(0);
   clz(1e32);
   tim = klock(0);
   dt = tim-oldtim;
   oldtim = tim;
   ang+=dt;
   r = -15;

   //setcam(r*sin(ang),0,r*cos(ang),ang,0);
   playercontrols();
   
   
   //drawsph(0,0,0,0.5);
   
   enum{segs=50};
   static verts[3*segs*segs];
   rangeU = 1;
   rangeV = 1;
   
   //ox=0; oy=0; oz=0;
   //s(0,0,ox,oy,oz);

if(0)
{   
lightx = -3*cos(tim*.5);
lighty = -3*sin(tim*.5);
lightz = 2;
}
setcol(255,255,255);
drawsph(lightx,lighty,lightz,.5);
   
setcol(0,255,0);
numpts = 9;
for(i=0; i<numpts; i++)
{
   drawsph(ptx[i],pty[i],ptz[i],.2);
}
setcol(255,255,0);

setpt(4,   0, 0, -25+50*mousx/xres);

glEnable(GL_DEPTH_TEST);
glDisable(GL_ALPHA_TEST);
glCullface(GL_NONE);
//glCullface(GL_FRONT);

   static quad mesh[2*segs*segs];
   meshpos = 0;   

   vertIdx = 0;
   for(i=0; i<segs; i++)
   {
      //glbegin(GL_TRIANGLE_STRIP);
      //glbegin(GL_LINE_STRIP);
      //glBegin(GL_QUAD_STRIP);
         u = i*rangeU / (segs-1.0);
         
         
         p0x=0; p0y=0; p0z=0;
         p1x=0; p1y=0; p1z=0;
         p2x=0; p2y=0; p2z=0;
      
         numpts=3;
         for(it=0; it<numpts; it++){
            wu = bernstein(numpts-1,it,u);
            p0x += wu*ptx[it];
            p0y += wu*pty[it];
            p0z += wu*ptz[it];
            
            //wu = bernstein(numpts-1,it,u);
            p1x += wu*ptx[3+it];
            p1y += wu*pty[3+it];
            p1z += wu*ptz[3+it];
            
            //wu = bernstein(numpts-1,it,u);
            p2x += wu*ptx[6+it];
            p2y += wu*pty[6+it];
            p2z += wu*ptz[6+it];
            

         } 
      
      for(j=0; j<segs; j+=2)
      {
         v = j*rangeV / (segs-1.0);      
         fx=0; fy=0; fz=0;  
         {
            wv = bernstein(numpts-1,0,v);
            fx += wv * p0x;
            fy += wv * p0y;
            fz += wv * p0z;
            
            wv = bernstein(numpts-1,1,v);
            fx += wv * p1x;
            fy += wv * p1y;
            fz += wv * p1z;
            
            wv = bernstein(numpts-1,2,v);
            fx += wv * p2x;
            fy += wv * p2y;
            fz += wv * p2z;
         }
         verts[vertIdx+0] = fx;
         verts[vertIdx+1] = fy;
         verts[vertIdx+2] = fz;
         vertIdx+=3;
         drawsph(fy,fx,fz,.1);
                  
         
      }
   }
   

}

hfunc(t,&x,&y,&z)
{
   x = 5*sin(t);
   y = 5*cos(t);
   z = 0;
}

hderivative(t,&x,&y,&z) 
{
   x = 5*cos(t);
   y = 5*-sin(t);
   z = 0;
}
gfunc(t,&x,&y,&z)
{


   x = 1*cos(t);
   y = 0;
   z = 1*sin(t);
}

// Rotasjonsmtx
make_A_mtx(t,mtx[9])
{
   // finn h'(v) / (h(v).length
   hdx=0; hdy=0; hdz=0;
   hderivative(t,hdx,hdy,hdz);
   len = sqrt(hdx*hdx + hdy*hdy + hdz*hdz);
   hdx /= len; hdy /= len; hdz /= len;
   
   mtx[ 0] = hdx;
   mtx[ 1] = hdy;
   mtx[ 2] = hdz;
   
   mtx[ 3] = 0;
   mtx[ 4] = 1;
   mtx[ 5] = 0;
   
   mtx[ 6] = mtx[1]*mtx[5]-mtx[2]*mtx[4]; // X=YZ-ZY
   mtx[ 7] = mtx[2]*mtx[3]-mtx[0]*mtx[5];
   mtx[ 8] = mtx[0]*mtx[4]-mtx[1]*mtx[3];
   
   // correct up vec
   mtx[ 3] = mtx[7]*mtx[2]-mtx[8]*mtx[1]; // X=YZ-ZY
   mtx[ 4] = mtx[8]*mtx[0]-mtx[6]*mtx[2];
   mtx[ 5] = mtx[6]*mtx[1]-mtx[7]*mtx[0];
}
vecCross(a[3],b[3],c[3])
{
   c[0] = a[1]*b[2] - a[2]*b[1];
   c[1] = a[2]*b[0] - a[0]*b[2];
   c[2] = a[0]*b[1] - a[1]*b[0];
}
normalize(vec[3]){
   rlen = 1.0/sqrt(vec[0]*vec[0] + vec[1]*vec[1] + vec[2]*vec[2]);
   vec[0] *= rlen;
   vec[1] *= rlen;
   vec[2] *= rlen;
}


// tilsvarer rad dottet med kolonne.
// element00 er raden 0 i matrisen dottet med hele vec
mtx_mult_vec(mat[9], vec[3], &x, &y, &z)
{

/* //correct
   x = mat[0] * vec[0] + mat[1] * vec[1] + mat[2] * vec[2];
   y = mat[3] * vec[0] + mat[4] * vec[1] + mat[5] * vec[2];
   z = mat[6] * vec[0] + mat[7] * vec[1] + mat[8] * vec[2];  
*/

// transpose mat and mult
   x = mat[0] * vec[0] + mat[3] * vec[1] + mat[6] * vec[2];
   y = mat[1] * vec[0] + mat[4] * vec[1] + mat[7] * vec[2];
   z = mat[2] * vec[0] + mat[5] * vec[1] + mat[8] * vec[2]; 
   // before
   // 0 1 2
   // 3 4 5
   // 6 7 8
   // after
   // 0 3 6
   // 1 4 7
   // 2 5 8
}

/*
// a1 -- left matrix
// a2 -- right matrix
// a3 -- answer matrix
Matrix_Mult(a1[3][3],a2[3][4],a3[3][3])
{
   i=0;
   j=0;
   k=0;
   for(i=0; i<3; i++)
      for(j=0; j<3; j++)
      a3[i][j] = 0.0;
   
   for(i=0; i<3; i++)
      for(j=0; j<3; j++)
         for(k=0; k<3; k++)
            a3[i][j] += a1[i][k] * a2[k][j];

}
*/


// Camera and movement code taken from /games/
//Handle input and player movement
playercontrols()
{
   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

   f = .1;
   if (keystatus[0x2a]) f /= 4;
   if (keystatus[0x36]) f *= 4;
   vx = (keystatus[32]-keystatus[30])*f; //D-A
   vy = (keystatus[17]-keystatus[31])*f; //W-S  
   vz = (keystatus[0x52]-keystatus[0x9d])*f; //KP0-RCtrl
   
   static mat[9]; 
   ang2mat(posh,posv,mat); // Convert angles to rotation matrix
   
   // find new position
   posx += mat[0]*vx + mat[3]*vz + mat[6]*vy;
   posy += mat[1]*vx + mat[4]*vz + mat[7]*vy;
   posz += mat[2]*vx + mat[5]*vz + mat[8]*vy; 
   // mousespeed values are tweaked for 60 fps
   mouseSpeedX = (mousx - oldMouseX) * 0.01;
   mouseSpeedY = (mousy - oldMouseY) * 0.01;
   oldMouseX = mousx;
   oldMouseY = mousy;
   if(bstatus==1)
   {
      posh -= mouseSpeedX;
      posv += mouseSpeedY;
   }
   // Right,down,forwards unit vectors.
   setcam(posx,posy,posz,
          mat[0],mat[1],mat[2],
          mat[3],mat[4],mat[5],
          mat[6],mat[7],mat[8]);
}
/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}

bernstein(n,i,u)
{
  num = fact(n);
  den = fact(i)*fact(n-i);
  binom = num / den;
  y = binom * pow(u,i) * pow( (1-u), (n-i));
}

setpt(i,x,y,z)
{
   ptx[i] = x;
   pty[i] = y;
   ptz[i] = z;
}