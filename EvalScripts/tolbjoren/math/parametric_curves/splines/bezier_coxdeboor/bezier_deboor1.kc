
enum{PTS = 5}

struct Vec3{
   x,y,z;
}

static bpolys[PTS][PTS];
static result[PTS][PTS];
static pointmat[PTS][PTS];
()
{   
   cls(0);
   static Vec3 Points[PTS];
   if(numframes==0)
   for(i=0; i<PTS; i++)
   {
      Points[i].x = xres*rnd;
      Points[i].y = yres*rnd;
   }   
   
// Mouse Grab
   mindist = 1e32;
   minIdx = -1;
   for(i=0; i<PTS; i++)
   {

      dist = sqrt( (mousx-Points[i].x)^2 +  (mousy-Points[i].y)^2);
      if( dist < 10 )
      {
         setcol(0,0,255);
         drawsph( Points[i].x, Points[i].y, 10);  
      }else{
         setcol(128,128,128);
         drawsph( Points[i].x, Points[i].y, -10); 
         
      }
      setcol(255,128,0);
      moveto(Points[i].x-4, Points[i].y-3); printf("%.0f",i);
         

      if(dist < mindist )
      {
         mindist = dist;
         minIdx = i;
      }
   }
   if(bstatus==1)
   {
      Points[minIdx].x = mousx;
      Points[minIdx].y = mousy;
   }
   
   
   
  
   t = 0;
   numSteps = 200;
   du = 1.0 / (numSteps-1);

   setcol(255,255,255);
   moveto(points[0].x, points[0].y);
   for(step=0; step<numSteps; step++)
   {
      t = step*1.0 / (numSteps-1);
      
      bernstein(bpolys,t,1);
      //inverse(bpolys,result);

      // Q(t) = UMG
      // Q - interpolated pt
      // U - interpolants
      // M - coeff matrix
      // G - pts on curve 
      
      for(i=0; i<PTS; i++)
      {
         pointmat[i][0] = points[i].x;
         pointmat[i][1] = points[i].y;
         pointmat[i][2] = points[i].z;
      }
      matrixMultiply( bpolys, pointmat, result);
      px = result[0][0];
      py = result[0][1];
      pz = result[0][2];
      
      //setpix( px, 
      //        py);
              
      lineto( px, 
              py);
   } 

   // Vis et punkt
   t = clamp(mousx/xres,0,1);
   bernstein(bpolys,t,1);
      for(i=0; i<PTS; i++)
      {
         pointmat[i][0] = points[i].x;
         pointmat[i][1] = points[i].y;
         pointmat[i][2] = points[i].z;
      }
      matrixMultiply( bpolys, pointmat, result);
      px = result[0][0];
      py = result[0][1];
      pz = result[0][2];
   drawsph( px, py, 10 );
   moveto( px, py);
   printf("t=%.1f",t);

   drawMatrix();

}

clamp(v,lo,hi)
{
   return min(hi,max(lo,v));
}

drawMatrix()
{
   t = mousx/xres;
   bernstein(bpolys,t,1);
   
   
   moveto(0,0);
   for(i=0; i<PTS; i++)
   {
      for(j=0; j<PTS; j++){
         b = bpolys[i][j];
         if( b > -1e-7 )
         {
            printf("+%.2f  ", bpolys[i][j]);
         }else{
            printf("%.2f  ", bpolys[i][j]);
         }
      }
      printf("\n");
   }
   printf("\n");
   
   if(0)
   {
      inverse(bpolys,result);
      for(i=0; i<PTS; i++)
      {
         for(j=0; j<PTS; j++){
            b = result[i][j];
            if( b > -1e-7 )
            {
               printf("+%.3f  ", result[i][j]);
            }else{
               printf("%.3f  ", result[i][j]);
            }
         }
         printf("\n");
      }
   }

   printf("\n");
   printf("\n");
   for(i=0; i<PTS; i++)
   {
      for(j=0; j<PTS; j++){
         printf("%.g%g  ", i,j);
         
      }
      printf("\n");
   }
}

bernstein(B[PTS][PTS],t,delta) 
{
      //_bernsteinPoly.setDim(d+1,d+1);
      d = pts-1; //d = degree
      
//set bottom row
      B[d-1][0] = 1-t;
      B[d-1][1] = t;
// work from bottom and upwards
      for(i=(d-2); i>=0; i--)
      {
            B[i][0] = (1-t) * B[i+1][0];
            for(j=1; j< (d-i); j++)
            {
                  B[i][j] = t*B[i+1][j-1] + (1-t)*B[i+1][j];
                  
            }
            B[i][d-i] = t*B[i+1][d-i-1];

      }
   
   if(0) // want derivatives?
   {
      B[d][0] = -delta;
      B[d][1] = delta;
      
      for(k=2; k<=d; k++)
      {
            s = k*delta;
            for(i=d; i>d-k; i--)
            {
               B[i][k] = s*B[i][k-1];
               for(j=k-1; j>0; j--)
               {
                 B[i][j] = s*(B[i][j-1]-B[i][j]);
               }
               B[i][0] = -s*B[i][0];
            }
      }
   }
}


MultiplyMatrixVector3(mat[3][3], vec[3], &x, &y, &z)
{
    x = vec[0] * mat[0][0] + vec[1] * mat[1][0] + vec[2] * mat[2][0];
    y = vec[0] * mat[0][1] + vec[1] * mat[1][1] + vec[2] * mat[2][1];
    z = vec[0] * mat[0][2] + vec[1] * mat[1][2] + vec[2] * mat[2][2];
}

//http://stackoverflow.com/questions/983999/simple-3x3-matrix-inverse-code-c

determinantOfMinor( theRowHeightY,
                    theColumnWidthX,
                    theMatrix [/*Y*/3] [/*X=*/3] )
{
  x1 = theColumnWidthX == 0 ? 1 : 0;  /* always either 0 or 1 */
  x2 = theColumnWidthX == 2 ? 1 : 2;  /* always either 1 or 2 */
  y1 = theRowHeightY   == 0 ? 1 : 0;  /* always either 0 or 1 */
  y2 = theRowHeightY   == 2 ? 1 : 2;  /* always either 1 or 2 */

  return ( theMatrix [y1] [x1]  *  theMatrix [y2] [x2] )
      -  ( theMatrix [y1] [x2]  *  theMatrix [y2] [x1] );
}


determinant( theMatrix [/*Y=*/3] [/*X=*/3] )
{
  return ( theMatrix [0] [0]  *  determinantOfMinor( 0, 0, theMatrix ) )
      -  ( theMatrix [0] [1]  *  determinantOfMinor( 0, 1, theMatrix ) )
      +  ( theMatrix [0] [2]  *  determinantOfMinor( 0, 2, theMatrix ) );
}


inverse( theMatrix [/*Y=*/3] [/*X=*/3],
         theOutput [/*Y=*/3] [/*X=*/3] )
{
  det = determinant( theMatrix );

    /* Arbitrary for now.  This should be something nicer... */
  if ( abs(det) < 1e-2 )
  {
    //memset( theOutput, 0, sizeof theOutput );
    return 0;
  }

  oneOverDeterminant = 1.0 / det;

  for (   y = 0;  y < 3;  y ++ )
    for ( x = 0;  x < 3;  x ++   )
    {
        /* Rule is inverse = 1/det * minor of the TRANSPOSE matrix.  *
         * Note (y,x) becomes (x,y) INTENTIONALLY here!              */
      theOutput [y] [x]
        = determinantOfMinor( x, y, theMatrix ) * oneOverDeterminant;

        /* (y0,x1)  (y1,x0)  (y1,x2)  and (y2,x1)  all need to be negated. */
      if( 1 == ((x + y) % 2) )
        theOutput [y] [x] = - theOutput [y] [x];
    }

  return 1;
}

matrixMultiply( theMatrixA [/*Y=*/PTS] [/*X=*/PTS],
                theMatrixB [/*Y=*/PTS] [/*X=*/PTS],
                theOutput  [/*Y=*/PTS] [/*X=*/PTS]  )
{
  for (   y = 0;  y < PTS;  y ++ )
    for ( x = 0;  x < PTS;  x ++   )
    {
      theOutput [y] [x] = 0;
      for ( i = 0;  i < PTS;  i ++ )
        theOutput [y] [x] +=  theMatrixA [y] [i] * theMatrixB [i] [x];
    }
}
