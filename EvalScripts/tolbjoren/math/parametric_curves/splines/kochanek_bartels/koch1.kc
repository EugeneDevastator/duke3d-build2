/* Coefficients for Matrix M */
static M11 = 0.0;
static M12 = 1.0;
static M13 = 0.0;
static M14 = 0.0;

static M21 = -0.5;
static M22 = 0.0;
static M23 = 0.5;
static M24 = 0.0;

static M31 = 1.0;
static M32 = -2.5;
static M33 = 2.0;
static M34 = -0.5;

static M41 = -0.5;
static M42 = 1.5;
static M43 = -1.5;
static M44 = 0.5;


struct Point{
   x,y;
};
enum{NUMPTS = 16}
static Point pts[NUMPTS];
()
{
   cls(0); clz(1e32);
   

   if( numframes == 0)
   {
      cx = xres/2;
      cy = yres/2;
      for(i=0; i<NUMPTS; i++)
      {
         ang = i * 2 * PI / NUMPTS;
         r = 100;
         pts[i].x = cx + r*cos(ang);
         pts[i].y = cy + r*sin(ang);
      }
   }
   
   mind=1e32;
   grabidx = -1;
   for(i=0; i<NUMPTS; i++)
   {
      dx = mousx - pts[i].x;
      dy = mousy - pts[i].y;
      distSq = dx*dx + dy*dy;
      if( distSq < mind )
      {
         mind = distSq;
         grabidx = i;
      }
   }
   
   if( bstatus == 1 )
   if( grabidx != -1 )
   {
      pts[grabidx].x = mousx;
      pts[grabidx].y = mousy;
   }
   
   playerx = 0;
   playery = 0;
   
   interpolant = mousx/xres;
   t0 = floor( interpolant * numPts);
   t1 = ceil( interpolant * numPts);   

   currPt = t1;
   
   x = interpolant * numPts;
   t = (x - t0 ) / (t1 - t0);   

   playerx = catmullRomSpline( t, pts[currPt-1].x, pts[currPt].x, pts[currPt+1].x, pts[currPt+2].x ); 
   playery = catmullRomSpline( t, pts[currPt-1].y, pts[currPt].y, pts[currPt+1].y, pts[currPt+2].y ); 
   
   //playerdx = catmullRomSplineDerv( t, pts[currPt-1].x, pts[currPt].x, pts[currPt+1].x, pts[currPt+2].x ); 
   //playerdy = catmullRomSplineDerv( t, pts[currPt-1].y, pts[currPt].y, pts[currPt+1].y, pts[currPt+2].y ); 

   dy0 = pts[currPt+1].y - pts[currPt-1].y;
   dx0 = pts[currPt+1].x - pts[currPt-1].x;
   
   dy1 = pts[currPt+2].y - pts[currPt].y;
   dx1 = pts[currPt+2].x - pts[currPt].x;

   //len = sqrt(dx*dx+dy*dy);
   

   playerdx = dx0 + t*(dx1-dx0);
   playerdy = dy0 + t*(dy1-dy0);

   drawsph( playerx, playery, -10 );
   moveto( playerx, playery );
   lineto( playerx + playerdx, playery + playerdy );
      

// Setting these global for all spline segs for now...
// could be unique pr spline seg
   t = 0;
	 c = 0;
	 b = 0;

   // "Cheating" using evaldraw wraparound when arrays are pow 2
   // achive same using modulus?
   iters = 0;
   for(i=0; i<NUMPTS; i++)
   {
      for(t = 0; t < 1; t+= 0.01 )
      {
         px = kb( t, pts[i-1].x, pts[i].x, pts[i+1].x, pts[i+2].x ); 
         py = kb( t, pts[i-1].y, pts[i].y, pts[i+1].y, pts[i+2].y );
      
			   //px=0; py=0;
				 
				 //if ( i%2==0 ) {
			   //px = kbSpline_in( t, c, b, pts[i-1].x, pts[i].x, pts[i+1].x);
				 //py = kbSpline_in( t, c, b, pts[i-1].y, pts[i].y, pts[i+1].y);
				 //} else {
				 //px = kbSpline_out( t, c, b, pts[i-1].x, pts[i].x, pts[i+1].x);
				 //py = kbSpline_out( t, c, b, pts[i-1].y, pts[i].y, pts[i+1].y);
				 //}

         //dx = catmullRomSplineDerv( t, pts[i-1].x, pts[i].x, pts[i+1].x, pts[i+2].x ); 
         //dy = catmullRomSplineDerv( t, pts[i-1].y, pts[i].y, pts[i+1].y, pts[i+2].y );   

         //tx = catmullRomSplineTang( t, pts[i-1].x, pts[i].x, pts[i+1].x, pts[i+2].x ); 
         //ty = catmullRomSplineTang( t, pts[i-1].y, pts[i].y, pts[i+1].y, pts[i+2].y );      
    
         if( t == 0 )
         {
            //moveto( px, py );
         }else
         {
            //lineto( px, py );
         }
      
         if( iters % 15 == 0 )
         {
            #ifdef SHOW_NORMAL
            
               setcol(255,0,0);
               moveto( px,py );
            
               // Normalize derivative
               len = sqrt( dx*dx + dy*dy );
               dx /= len;
               dy /= len;
               
               lineto( px+dx*15, py+dy*15 );     
            #endif 
            

						#ifdef SHOW_TANGENT
            moveto( px,py );
            
            setcol(0,0,255);
            
            // Normalize tangent
            len = sqrt( tx*tx + ty*ty );
            tx /= len;
            ty /= len;
            
            lineto( px+tx*15, py+ty*15 );   
						#endif
         }
         setcol(255,255,255);
         setpix(px, py);
         iters++;
      }
      
   }
   
   for(i=0; i<NUMPTS; i++)
   {
      drawsph( pts[i].x, pts[i].y, 3 );
   }
}

/*
t - tensioon
c - continuity
b - basis

all these parameters are valid within the range [-1, 1]
set them all to 0 and we have a Catmull-Rom spline
*/

kbSpline_in( t, c, b, prev, now, next)
{
	return
  ((1-t)*(1-c)*(1-b)) / 2 * (next-now) +
	((1-t)*(1+c)*(1+b)) / 2 * (now-prev);
	
}

kbSpline_out( t, c, b, prev, now, next)
{
	return
  ((1-t)*(1+c)*(1-b)) / 2 * (next-now) +
	((1-t)*(1-c)*(1+b)) / 2 * (now-prev);
}

catmullRomSpline(t, v0, v1, v2,v3)
{
   double c1,c2,c3,c4;

   c1 = M12*v1;
   c2 = M21*v0          + M23*v2;
   c3 = M31*v0 + M32*v1 + M33*v2 + M34*v3;
   c4 = M41*v0 + M42*v1 + M43*v2 + M44*v3;

   return(((c4*t + c3)*t +c2)*t + c1);
}

catmullRomSplineDerv(t, v0, v1, v2,v3)
{
   double c1,c2,c3,c4;

   c1 = M12*v1;
   c2 = M21*v0          + M23*v2;
   c3 = M31*v0 + M32*v1 + M33*v2 + M34*v3;
   c4 = M41*v0 + M42*v1 + M43*v2 + M44*v3;

   return( 3*c4*t^2 + 3*t^2 + c2 );
}

catmullRomSplineTang(t, v0, v1, v2,v3)
{
   double c1,c2,c3,c4;

   c1 = M12*v1;
   c2 = M21*v0          + M23*v2;
   c3 = M31*v0 + M32*v1 + M33*v2 + M34*v3;
   c4 = M41*v0 + M42*v1 + M43*v2 + M44*v3;

   return( 6*c4*t + 6*t );
}