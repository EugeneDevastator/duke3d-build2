
struct Vec3{
   x,y,z;
};

struct Point{
   x,y,z;
};
enum{NUMPTS = 64}
static Point pts[NUMPTS];

static time, dt;
static interpolant = 0;
()
{
   now = klock(0);
   dt = time - now;
   time = now;

   cls(0); clz(1e32);
   
   

   if( numframes == 0)
   {
      glCullface(GL_NONE);
      glEnable(GL_DEPTH_TEST);
      
      static tex[2][2];
      tex[0][0] = rgb(255,255,255);
      tex[0][1] = rgb(255,0,0);
      tex[1][0] = rgb(0,255,0);
      tex[1][1] = rgb(0,0,255);
   
      handle=glsettex(tex,2,2);
      
      handle=glsettex("wood.png");
   }
   
   if (numframes==0)
   {

      for(i=0; i<NUMPTS; i++)
      {
         ang = i * 2 * PI / NUMPTS;
         r = 10;
         ofs = sin(time*2+ang*4);
         pts[i].x = r*cos(ang) + ofs;
         pts[i].y = cos(time*2+ang*4);
         pts[i].z = r*sin(ang) + ofs;
      }
   }
   
   playerx = 0;
   playery = 0;
   playerz = 0;
   
   //interpolant = mousx/xres;
   interpolant -= dt * 0.1;
   //if( interpolant >= 1 ) interpolant = 0;   

   // Calc control pts for a given interpolant
   t0 = floor( interpolant * numPts);
   t1 = ceil( interpolant * numPts);   

   currPt = t1;
   
   x = interpolant * numPts;
   t = (x - t0 ) / (t1 - t0);   

   playerx = catmullRomSpline( t, pts[currPt-1].x, pts[currPt].x, pts[currPt+1].x, pts[currPt+2].x ); 
   playery = catmullRomSpline( t, pts[currPt-1].y, pts[currPt].y, pts[currPt+1].y, pts[currPt+2].y ); 
   playerz = catmullRomSpline( t, pts[currPt-1].z, pts[currPt].z, pts[currPt+1].z, pts[currPt+2].z ); 
   
   dx0 = pts[currPt+1].x - pts[currPt-1].x;
   dy0 = pts[currPt+1].y - pts[currPt-1].y;
   dz0 = pts[currPt+1].z - pts[currPt-1].z;   

   dx1 = pts[currPt+2].x - pts[currPt].x;
   dy1 = pts[currPt+2].y - pts[currPt].y;
   dz1 = pts[currPt+2].z - pts[currPt].z;
   
   playerdx = dx0 + t*(dx1-dx0);
   playerdy = dy0 + t*(dy1-dy0);
   playerdz = dz0 + t*(dz1-dz0);

   // Normalize forward dir   
   len = sqrt(playerdx^2 + playerdy^2 + playerdz^2);
   rlen = 1/len;
   playerdx *= rlen;
   playerdy *= rlen;
   playerdz *= rlen;

   // Desired up dir
   upx = 0;
   upy = 1;
   upz = 0;
   // side/right vector
   rx = playerdy * upz - playerdz * upy;
   ry = playerdz * upx - playerdx * upz;
   rz = playerdx * upy - playerdy * upx;
   // "corrected" up vector
   realUpx = playerdy * rz - playerdz * ry;
   realUpy = playerdz * rx - playerdx * rz;
   realUpz = playerdx * ry - playerdy * rx;
   
   t = -(mousx-xres/2)/ (xres/2);
   t = max(-1,t);
   t = min(+1,t);
   playerx += t * rx;
   playery += t * ry;
   playerz += t * rz;
      

   // Draw player pos and side, up, forward vectors   
   setcol(0,0,255);

   drawsph( playerx, playery, playerz, .1);
#ifdef DRAW_VECTORS
   scaler = .5;
   drawcone( playerx, playery, playerz, -.05,
            playerx + playerdx*scaler, playery + playerdy*scaler, playerz + playerdz*scaler, -.05 );   


   setcol(255,0,0);
   drawcone( playerx, playery, playerz, -.05,
             playerx + rx*scaler, playery + ry*scaler, playerz + rz*scaler, -.05 ); 
   
   setcol(0,255,0);
   drawcone( playerx, playery, playerz, -.05,
             playerx + realUpx*scaler, playery + realUpy*scaler, playerz + realUpz*scaler, -.05 );
#endif

   // right, down, forwards, RDF
   if (1)
   {         
      f=-2;
      setcam( playerx+playerdx*f, playery+playerdy*f -1, playerz+playerdz*f, 
           -rx, -ry, -rz,
           -realUpx, -realUpy, -realUpz,
           //Upx, Upy, Upz,
           playerdx, playerdy, playerdz );
   }
   else
   {
      setcam(0,-10,-10, 0,PI/3);
   }     
           

   // Draw control pts
   /*
   setcol(255,255,255);
   for(i=0; i<NUMPTS; i++){
      drawsph( pts[i].x, pts[i].y, pts[i].z, .1 );
   }
   */
 

   iters = 0;
   glBegin(GL_TRIANGLE_STRIP);
   for(i=0; i<NUMPTS; i++)
   {
      segs = 4;
      for(j=0; j<segs; j++)
      {
         t = j/(segs-1);
         px = catmullRomSpline( t, pts[i-1].x, pts[i].x, pts[i+1].x, pts[i+2].x ); 
         py = catmullRomSpline( t, pts[i-1].y, pts[i].y, pts[i+1].y, pts[i+2].y );
         pz = catmullRomSpline( t, pts[i-1].z, pts[i].z, pts[i+1].z, pts[i+2].z );
      
         // find deltas
         dx0 = pts[i+1].x - pts[i-1].x;
         dy0 = pts[i+1].y - pts[i-1].y;
         dz0 = pts[i+1].z - pts[i-1].z;   
         
         dx1 = pts[i+2].x - pts[i].x;
         dy1 = pts[i+2].y - pts[i].y;
         dz1 = pts[i+2].z - pts[i].z;
         
         // lerp based on t
         fx = dx0 + t*(dx1-dx0);
         fy = dy0 + t*(dy1-dy0);
         fz = dz0 + t*(dz1-dz0);
         
         // Normalize forward vec, saves us normalizing anything else
         len = sqrt(fx^2+fy^2+fz^2);
         fx /= len;
         fy /= len;
         fz /= len;
         // desired up vector
         upx = 0;
         upy = 1;
         upz = 0;
         // Right vector
         rx = fy * upz - fz * upy;
         ry = fz * upx - fx * upz;
         rz = fx * upy - fy * upx;
         // Up vector
         ux = fy * rz - fz * ry;
         uy = fz * rx - fx * rz;
         uz = fx * ry - fy * rx;
         
   
         //setcol(128*rx+128, 128*ry+128, 128*rz+128);
         setcol(127,127,127);
         gltexcoord(0,0);
         glVertex( px-rx, py-ry, pz-rz );
         
         gltexcoord(1,1);
         glVertex( px+rx, py+ry, pz+rz );
         
            
         if( iters % 16 == 0){
            static m[9];
            m[0] = rx; m[1] = ry; m[2] = rz;
            m[3] = ux; m[4] = uy; m[5] = uz;
            m[6] = fx; m[7] = fy; m[8] = fz;
            drawring(px,py,pz,m);
         }


         iters++;
      }
   }

}

// Draws a ring in the xy plane, at position tx,ty,tz, and gives it the orientation in mtx
drawring(tx,ty,tz,mtx[9])
{
   segs = 12;
   r = 2.;
   
   for(i=0; i<segs; i++)
   {
      ang = i/segs*2*PI;
      x1 = cos(ang)*r;
      y1 = sin(ang)*r;
      z1 = 0;
      ang = (i+1)/segs*2*PI;
      x2 = cos(ang)*r;
      y2 = sin(ang)*r;
      z2 = 0;
      
      // Transform the circle points
      tformvert(mtx,x1,y1,z1);
      tformvert(mtx,x2,y2,z2);
         
      radi = 0.1;
      drawcone(tx + x1, ty + y1, tz + z1,radi,
               tx + x2, ty + y2, tz + z2,radi);
   }
}

// Takes a 3x3 rotation matrix and a point xyz
tformvert(m[9], &x, &y, &z)
{
   tx = m[0] * x + m[1] * y +  m[2] * z; 
   ty = m[3] * x + m[4] * y +  m[5] * z; 
   tz = m[6] * x + m[7] * y +  m[8] * z; 
   // put transformed values back into xyz
   x=tx; y=ty; z=tz;
}


catmullRomSpline(x, v0, v1, v2,v3)
{
/* Coefficients for Matrix M */
static M11 = 0.0;
static M12 = 1.0;
static M13 = 0.0;
static M14 = 0.0;
static M21 = -0.5;
static M22 = 0.0;
static M23 = 0.5;
static M24 = 0.0;
static M31 = 1.0;
static M32 = -2.5;
static M33 = 2.0;
static M34 = -0.5;
static M41 = -0.5;
static M42 = 1.5;
static M43 = -1.5;
static M44 = 0.5;


   double c1,c2,c3,c4;

   c1 = M12*v1;
   c2 = M21*v0          + M23*v2;
   c3 = M31*v0 + M32*v1 + M33*v2 + M34*v3;
   c4 = M41*v0 + M42*v1 + M43*v2 + M44*v3;

   return(((c4*x + c3)*x +c2)*x + c1);
}

