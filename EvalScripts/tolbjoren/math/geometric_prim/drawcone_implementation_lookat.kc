struct vec{ x,y,z; }

static mtx[9];
()
{
   cls(0); clz(1e32);
 
   vec worldup;
   vecset( worldup, 0, -1, 0 );
   
   vec eyeCenter;
   vec target;
   vecset( eyeCenter, 3,3,3 );
     
   t = klock(0);
   r = 2;
   vecset( target, r*cos(t), 2 + sin(t*3), r*sin(t) );
   
   lookAt( eyeCenter, target, worldUp, mtx );
   setcam(0,-3,-6,0,0);
   setcam2( eyeCenter, mtx );
   
   setcol(0xffffff);
   
   for(i=0; i<10; i++)
   {
      for(j=0; j<10; j++)
      {
         u = -1 + (i / 10) * 2;
         v = -1 + (j / 10) * 2;
         drawsph( 3*u, 0, 3*v, .2 );
      }
   }
   
   // Make a kv6 look at something too
   vec cowPos;
   vecset(cowPos, -1.5, 2, -2 );
   lookAt(cowPos, target, worldup, mtx );
   
/*
   drawspr("cow.kv6", cowpos.x, cowpos.y, cowpos.z,
                      mtx[0], mtx[1], mtx[2],
                      mtx[3], mtx[4], mtx[5],
                      -mtx[6], -mtx[7], -mtx[8] );

*/ 
   
   setcol(0,0,511);
   drawsph( target.x, target.y, target.z, .1 );
   

   vec v1, v2;
   vecset(v1, cowPos);
   vecSet(v2, target);
   

   CreateCone(v1,v2,.25,.25);
}

tform(m[9], vec v)
{
   x = v.x; y = v.y; z = v.z;
   v.x = m[0] * x + m[1] * y + m[2] * z;
   v.y = m[3] * x + m[4] * y + m[5] * z;
   v.z = m[6] * x + m[7] * y + m[8] * z;
}

setcam2( vec p, m[9] )
{
   setcam(p.x, p.y, p.z,
          m[0], m[1], m[2],
          m[3], m[4], m[5],
          m[6], m[7], m[8]);
}

lookAt(vec eye, vec pos, vec worldup, mtx[9])
{
   vec fwd;
   vec up;
   vec side;
   
   // find forward dir
   vecsub( fwd, pos, eye );
   normalize(fwd);
   
   // find up vector as close to world up as possible   
   dotprod = vecDot(worldUp,fwd);
   static part2[3];
   vecscalar( part2, fwd, dotprod);
   
   vecsub(up, worldUp, part2);
   normalize(up);

   static side[3];
   vecCross(side,fwd,up);
   normalize(side);
  
   buildMatrix( mtx, side, up, fwd ); 
}

vecScalar( vec out, vec a, s )
{
   out.x = a.x * s;
   out.y = a.y * s;
   out.z = a.z * s;
}

vecAdd( vec out, vec a, vec b)
{
   out.x = a.x + b.x;
   out.y = a.y + b.y;
   out.z = a.z + b.z;   
}
vecSub( vec out, vec a, vec b)
{
   out.x = a.x - b.x;
   out.y = a.y - b.y;
   out.z = a.z - b.z;   
}

vecCross( vec out, vec a, vec b)
{
   out.x = a.y*b.z - a.z*b.y;
   out.y = a.z*b.x - a.x*b.z;
   out.z = a.x*b.y - a.y*b.x;
}

vecset(vec a, x,y,z){
   a.x = x; a.y = y; a.z = z;
}

vecset(vec a, vec other){
   a.x = other.x; a.y = other.y; a.z = other.z;
}

vecDot( vec a, vec b)
{
   return a.x*b.x + a.y*b.y + a.z*b.z;
}

length( vec v )
{
   return sqrt( vecdot(v,v) );
}

normalize( vec v )
{
   len = length(v);
   if ( len )
   {
      v.x /= len; v.y /= len; v.z /= len;
   }
}

buildMatrix( mtx[9], vec side, vec up, vec fwd )
{
   mtx[0] = side.x; mtx[1] = side.y; mtx[2] = side.z;
   mtx[3] = up.x;   mtx[4] = up.y;   mtx[5] = up.z;
   mtx[6] = fwd.x;  mtx[7] = fwd.y;  mtx[8] = fwd.z;
}

// Based on code by Paul Bourke found at
// http://paulbourke.net/miscellaneous/sphere_cylinder/opengl.c
// and
// http://paulbourke.net/miscellaneous/sphere_cylinder/
CreateCone(vec p1,vec p2,r1,r2)
{
   theta1 = 0;
   theta2 = 2*pi;
   m = 16;
   
   vec p1p2, p, perp;

   /* Normal pointing from p1 to p2 */
   vecsub(p1p2, p2, p1 );

   /*
      Create two perpendicular vectors perp and q
      on the plane of the disk
   */
   vecset( perp, p1p2 );
   if (p1p2.x == 0 && p1p2.z == 0)
   {
      p1p2.x += 0.001;
   }
   else
   {
      p1p2.y += 0.001;
   }
   
   vec a, b;
   veccross(a,perp, p1p2 );
   veccross(b,p1p2,A);
   normalize(a);
   normalize(b);
   
   vec p1a;
   vecadd(p1a, p1, a);
   moveto(p1.x, p1.y, p1.z);
   lineto(p1a.x, p1a.y, p1a.z);

   vec p1b;
   vecadd(p1b, p1, b);
   moveto(p1.x, p1.y, p1.z);
   lineto(p1b.x, p1b.y, p1b.z);

   //glBegin(GL_QUAD_STRIP);
   
   //glBegin(GL_POINTS);
   glBegin(GL_TRIANGLE_STRIP);
   //for (i=0;i<=m;i++) {
   for (i=m;i>=0;i--) {
      theta = theta1 + i * (theta2 - theta1) / m;

      vec normal;
      normal.x = cos(theta) * a.x + sin(theta) * b.x;
      normal.y = cos(theta) * a.y + sin(theta) * b.y;
      normal.z = cos(theta) * a.z + sin(theta) * b.z;
      normalize(normal);

      p.x = p2.x + r2 * normal.x;
      p.y = p2.y + r2 * normal.y;
      p.z = p2.z + r2 * normal.z;
      setcol(255+255*normal.x, 255+255*normal.y, 255+255*normal.z);
      //glTexCoord2f(i/(double)m,1.0);
      glVertex(p.x,p.y,p.z);

      p.x = p1.x + r1 * normal.x;
      p.y = p1.y + r1 * normal.y;
      p.z = p1.z + r1 * normal.z;
      setcol(255+255*normal.x, 255+255*normal.y, 255+255*normal.z);
      //glTexCoord2f(i/(double)m,0.0);
      glVertex(p.x,p.y,p.z);
   }
   glEnd();

}
