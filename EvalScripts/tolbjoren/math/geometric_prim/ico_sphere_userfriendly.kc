struct vec{x,y,z;}
static triangleCount = 0;
()
{
   triangleCount = 0;
   cls(0); clz(1e32); setcam(0,0,-5,0,0);
   setcol(0xffffff);
   
srand(0);
   
   for(i=0; i<10; i++){
      x = -2.5 + rnd * 5;
      y = -2.5 + rnd * 5;
      z = -2.5 + rnd * 5;
      
      vec p;
      vecset(p,x,y,z);
      ico_sphere( p, 0.1 + rnd*.5 );
   }
}

vecScalar( vec out, vec a, s )
{
   out.x = a.x * s;
   out.y = a.y * s;
   out.z = a.z * s;
}
vecAdd( vec out, vec b)
{
   out.x += b.x;
   out.y += b.y;
   out.z += b.z;   
}
  
vecAdd( vec out, vec a, vec b)
{
   out.x = a.x + b.x;
   out.y = a.y + b.y;
   out.z = a.z + b.z;   
}
vecSub( vec out, vec a, vec b)
{
   out.x = a.x - b.x;
   out.y = a.y - b.y;
   out.z = a.z - b.z;   
}
vecDot( vec a, vec b)
{
   return a.x*b.x + a.y*b.y + a.z*b.z;
}
normalize( vec v )
{
   len = length(v);
   if ( len )
   {
      v.x /= len; v.y /= len; v.z /= len;
   }
}
vecSet(vec a, x,y,z){
   a.x = x; a.y = y; a.z = z;
}


length( vec v )
{
   return sqrt( v.x^2 + v.y^2 + v.z^2 );
}


ico_sphere( vec pos, radi ){
   subDivDepth = 2;
   
   vec v1,v2,v3;

   enum{   
      xx = 0.525731112119133606,
      zz = 0.850650808352039932
   }

   // xx and zz constants make sure the distance from the origin to any of the verts of the iscosahedron is 1.0
   static vertexData[12][3] = {    
         -xx, 0.0, zz   ,  xx, 0.0, zz   ,  -xx, 0.0, -zz  ,  xx, 0.0, -zz  ,    0.0, zz, xx  , 
         0.0, zz, -xx   , 0.0, -zz, xx   ,  0.0, -zz, -xx   ,  zz, xx, 0.0  ,   -zz, xx, 0.0   , 
         zz, -xx, 0.0  ,   -zz, -xx, 0.0   
   };

   // indices used to construct triangles by linking vertices together
   static tindices[20][3] = { 
      0,4,1,   0,9,4,   9,5,4,   4,5,8,   4,8,1,
      8,10,1,  8,3,10,  5,3,8,  5,2,3,  2,7,3,    
      7,10,3,   7,6,10,   7,11,6,   11,0,6,   0,1,6,
      6,1,10,   9,0,11,  9,11,2,   9,2,5,   7,2,11   
   };

    for (i = 0; i < 20; i++)
    { 
      vecset(v1,  vertexData[ tindices[i][0] ][0],  vertexData[ tindices[i][0] ][1],  vertexData[ tindices[i][0] ][2] ); 
      vecset(v2,  vertexData[ tindices[i][1] ][0],  vertexData[ tindices[i][1] ][1],  vertexData[ tindices[i][1] ][2] );
      vecset(v3,  vertexData[ tindices[i][2] ][0],  vertexData[ tindices[i][2] ][1],  vertexData[ tindices[i][2] ][2] );

      subdivide(pos,radi, v1,v2,v3,subDivDepth);
    }
}



drawtriangle(vec pos, radi, vec v1, vec v2, vec v3) 
{ 
   setcol(255,0,0);
   s = radi;  
   
   glBegin(GL_TRIANGLES); 
      glvertex(pos.x + v1.x*s, pos.y + v1.y*s, pos.z + v1.z*s); 
      glvertex(pos.x + v2.x*s, pos.y + v2.y*s, pos.z + v2.z*s); 
      glvertex(pos.x + v3.x*s, pos.y + v3.y*s, pos.z + v3.z*s);    
   glEnd();
   
   setcol(255,255,255);
 
   s = radi + 0.01;  
   glBegin(GL_LINE_STRIP);
      glvertex(pos.x + v1.x*s, pos.y + v1.y*s, pos.z + v1.z*s); 
      glvertex(pos.x + v2.x*s, pos.y + v2.y*s, pos.z + v2.z*s); 
      glvertex(pos.x + v3.x*s, pos.y + v3.y*s, pos.z + v3.z*s);   
   glEnd();

   triangleCount++;
}

subdivide(vec pos, radi, vec v1, vec v2, vec v3, depth) 
{ 
  if(depth == 0)
  {
    drawtriangle(pos, radi, v1,v2,v3);
    return;
  }
  
  vec v12; vecadd(v12, v1,v2);
  vec v23; vecadd(v23, v2,v3);
  vec v31; vecadd(v31, v1,v3);
  normalize(v12);    
  normalize(v23); 
  normalize(v31); 
  subdivide(pos, radi, v1,v12,v31, depth-1);
  subdivide(pos, radi, v2,v23,v12, depth-1);
  subdivide(pos, radi, v3,v31,v23, depth-1);
  subdivide(pos, radi, v12,v23,v31, depth-1);
}