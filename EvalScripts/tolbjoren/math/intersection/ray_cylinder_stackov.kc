struct vec
{
   x,y,z;
}


struct ray_t
{
   vec origin;
   vec dir;
}

struct sphere_t
{
   x,y,z;
   radi;
}


struct cylinder_t
{
   vec a;
   vec b;
   radi;
}

enum{ MAX_SPHERES = 10}
static cylinder_t cyl_list[MAX_SPHERES];

()
{   
   if (numframes == 0)
   {
      for (i = 0; i< MAX_SPHERES; i++)
      {
         r = 10;
         a = 2*PI * i/(MAX_SPHERES);
         initCylinder( cyl_list[i], r*cos(a),-2,r*sin(a), 1.0+2*rnd );
      }
   }

   cls(0); 
   clz(1e32);
   glEnable(GL_DEPTH_TEST);
   
   setcam(0,-30,0,0,0.5*PI);
  
//#define CAM
#ifdef CAM
   setcam(0,5,-10,
         1,0,0, // right
         0,-1,0, // down
         0,0,1); // fwd
#else
   setcam(0,15,0,
          0,-1.57);                  
 
#endif
   setcol(255,255,255);
   
   drawgridXZ(-20,20);
   

   p1x = 0;
   p1y = 0;
   p1z = 0;

   t = klock(0);
   a = 6.28 * mousx/xres;
   r = 10;
   p2x = p1x+cos(a)*r;
   p2y = p1y;
   p2z = p1z+sin(a)*r;
   
   ray_t ray;
   ray.origin.x = p1x;
   ray.origin.y = p1y;
   ray.origin.z = p1z;
   
   ray.dir.x = (p2x-p1x);
   ray.dir.y = (p2y-p1y);
   ray.dir.z = (p2z-p1z);
   
   normalize(ray.dir);
   

   
   moveto(p1x,p1y,p1z);
   lineto(p2x,p2y,p2z);

   mint = 1e32;
   for (i = 0; i< MAX_SPHERES; i++)
   {
      t = 1e32;
      if( ray_cylinder_isect( ray, cyl_list[i] , t ) != -1 )
      {
         
         if ( t >= 0.0 )
         {
            if ( t < mint )
            {
               mint = t;
            }

         setcol(0,255,0);
         
         drawsph( ray.origin.x + ray.dir.x*t,
                  ray.origin.y + ray.dir.y*t,
                  ray.origin.z + ray.dir.z*t,
                  .5 ); 
         
         
         }
         
         
         setcol(255,0,0);
      }else{
         setcol(255,255,255);
      }
      
      

      
      draw_cylinder( cyl_list[i] );  
      

      
   
   }
   
   setcol(0xffffff);
   moveto( 0,0 );
   printf("%g\n", mint);

}

initCylinder(cylinder_t cyl, x,y,z,r)
{
   cyl.a.x = x;
   cyl.a.y = y + 5;
   cyl.a.z = z;

   cyl.b.x = x + 0;
   cyl.b.y = y + -5; 
   cyl.b.z = z + 0;

   cyl.radi = r;
}

// http://stackoverflow.com/questions/4078401/trying-to-optimize-line-vs-cylinder-intersection
// http://www.gamedev.net/community/forums/topic.asp?topic_id=467789
ray_cylinder_isect( ray_t ray, cylinder_t cyl, &t_out)
{
   vec ab, ao, aoxab, vxab;

   vecSub( ab, cyl.b, cyl.a );
   vecSub( ao, ray.origin, cyl.a ); 
   vecCross( aoxab, ao, ab );
   vecCross( vxab, ray.dir, ab );
   double ab2 = dot(ab,ab);
   double a = dot( vxab, vxab );
   double b = 2 * dot( vxab, aoxab );
   double c = dot( aoxab, aoxab ) - ( cyl.radi^2 * ab2 );
   
   disc = b^2 - 4*a*c;
   if ( disc < 0.0 ) return -1;
   t_out = (-b - sqrt( disc ) )/ (2.0*a);
   if ( t_out < 0.0 ) return -1;
   
   return t_out;
}

normalize( vec v )
{
   len = sqrt( v.x^2 + v.y^2 + v.z^2 );
   if(len)
   {
      v.x /= len;
      v.y /= len;
      v.z /= len;
   }
}

vecSub( vec out, vec a, vec b)
{
   out.x = a.x - b.x;
   out.y = a.y - b.y;
   out.z = a.z - b.z;   
}

vecCross( vec out, vec a, vec b)
{
   out.x = a.y*b.z - a.z*b.y;
   out.y = a.z*b.x - a.x*b.z;
   out.z = a.x*b.y - a.y*b.x;
}


dot( vec a, vec b)
{
   return a.x*b.x + a.y*b.y + a.z*b.z;
}

drawgridXZ(min,max)
{
   range = max-min;
   segs = 5;
   for(i=0; i<segs; i++)
   {
      t = i/(segs-1);
      moveto(min,0, min + range*t);
      lineto(max,0, min + range*t);
   
      moveto(min + range*t,0, min);
      lineto(min + range*t,0, max);
   }
}

draw_cylinder(cylinder_t cyl )
{
   r = cyl.radi;
   
   drawcone( cyl.a.x, cyl.a.y, cyl.a.z, -r, 
             cyl.b.x, cyl.b.y, cyl.b.z, -r );
}

cyl(u,v,&x,&y,&z)
{
   s = u*2*PI;
   t = v*PI;
   
   x = cos(s);
   y = cos(t);
   z = sin(s);
}
