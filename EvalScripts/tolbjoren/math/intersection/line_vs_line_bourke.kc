// original src:
// http://local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/
struct point {
    x;
    y;
};

struct line {
    point p1;
    point p2;
};

()
{
   cls(0);
   point a,b,c,d;
   
   a.x = 100;
   a.y = yres/2;

   b.x = a.x+50;
   b.y = a.y+50;
   
   c.x = 400;
   c.y = yres/2;   
   d.x =c.x-30;
   d.y =c.y-50;
   
   d.x = mousx;
   d.y = mousy;
   
   moveto(a.x,a.y); lineto(b.x,b.y);
   moveto(c.x,c.y); lineto(d.x,d.y);
   
   line l1,l2;
   point hit;
   
   l1.p1.x = a.x;
   l1.p1.y = a.y;
   l1.p2.x = b.x;
   l1.p2.y = b.y;   

   l2.p1.x = c.x;
   l2.p1.y = c.y;
   l2.p2.x = d.x;
   l2.p2.y = d.y;  
   
   r = check_lines2(l1,l2,hit);
   if(r)
   {
      drawsph(hit.x,hit.y,-25);
   }
}

/* check_lines:
 * It takes two lines as inputs and returns 1 if they intersect, 0 if they do
 * not.  hitp returns the point where the two lines intersected.  
 */
 
check_lines(line line1, line line2, point hitp)
{
    /* Introduction:
     * This code is based on the solution of these two input equations:
     *  Pa = P1 + ua (P2-P1)
     *  Pb = P3 + ub (P4-P3)
     *
     * Where line one is composed of points P1 and P2 and line two is composed
     *  of points P3 and P4.
     *
     * ua/b is the fractional value you can multiple the x and y legs of the
     *  triangle formed by each line to find a point on the line.
     *
     * The two equations can be expanded to their x/y components:
     *  Pa.x = p1.x + ua(p2.x - p1.x) 
     *  Pa.y = p1.y + ua(p2.y - p1.y) 
     *
     *  Pb.x = p3.x + ub(p4.x - p3.x)
     *  Pb.y = p3.y + ub(p4.y - p3.y)
     *
     * When Pa.x == Pb.x and Pa.y == Pb.y the lines intersect so you can come 
     *  up with two equations (one for x and one for y):
     *
     * p1.x + ua(p2.x - p1.x) = p3.x + ub(p4.x - p3.x)
     * p1.y + ua(p2.y - p1.y) = p3.y + ub(p4.y - p3.y)
     *
     * ua and ub can then be individually solved for.  This results in the
     *  equations used in the following code.
     */

    /* Denominator for ua and ub are the same so store this calculation */
    d   =   (line2.p2.y - line2.p1.y)*(line1.p2.x-line1.p1.x) -
                (line2.p2.x - line2.p1.x)*(line1.p2.y-line1.p1.y);
                
    /* n_a and n_b are calculated as seperate values for readability */
    n_a =   (line2.p2.x - line2.p1.x)*(line1.p1.y-line2.p1.y) - 
                (line2.p2.y - line2.p1.y)*(line1.p1.x-line2.p1.x);
                
    n_b =   (line1.p2.x - line1.p1.x)*(line1.p1.y - line2.p1.y) -
                (line1.p2.y - line1.p1.y)*(line1.p1.x - line2.p1.x);
              
    /* Make sure there is not a division by zero - this also indicates that
     * the lines are parallel.  
     *
     * If n_a and n_b were both equal to zero the lines would be on top of each 
     * other (coincidental).  This check is not done because it is not 
     * necessary for this implementation (the parallel check accounts for this).
     */
    if(d == 0)
        return 0;
        
    /* Calculate the intermediate fractional point that the lines potentially
     *  intersect.
     */
    ua = (n_a )/d;
    ub = (n_b )/d;
    
    /* The fractional point will be between 0 and 1 inclusive if the lines
     * intersect.  If the fractional calculation is larger than 1 or smaller
     * than 0 the lines would need to be longer to intersect.
     */
    if(ua >=0 && ua <= 1 && ub >= 0 && ub <= 1)
    {
        hitp.x = line1.p1.x + ua * (line1.p2.x - line1.p1.x);
        hitp.y = line1.p1.y + ua * (line1.p2.y - line1.p1.y);
        return 1;
    }
    return 0;
}

// returns 0 if parallell or not hit
// returns 1 if hit
check_lines2(line line1, line line2, point hitp)
{
    d   =   (line2.p2.y - line2.p1.y)*(line1.p2.x-line1.p1.x) - (line2.p2.x - line2.p1.x)*(line1.p2.y-line1.p1.y);
    n_a =   (line2.p2.x - line2.p1.x)*(line1.p1.y-line2.p1.y) - (line2.p2.y - line2.p1.y)*(line1.p1.x-line2.p1.x);
    n_b =   (line1.p2.x - line1.p1.x)*(line1.p1.y - line2.p1.y) - (line1.p2.y - line1.p1.y)*(line1.p1.x - line2.p1.x);          
    if(d == 0) return 0;
    ua = n_a/d;
    ub = n_b/d;
    if(ua >=0 && ua <= 1 && ub >= 0 && ub <= 1){
        hitp.x = line1.p1.x + ua * (line1.p2.x - line1.p1.x);
        hitp.y = line1.p1.y + ua * (line1.p2.y - line1.p1.y);
        return 1;
    }
    return 0;
}
