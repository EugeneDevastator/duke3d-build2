

static box1, boy1, box2, boy2;
static ox, oy, nx, ny;

static myRandoms[10];
static tix=0; static tiy=0;
()
{
   cls(0);
   
   moveto(0,0);
   for(i=0; i<10; i++)
   {
      printf("\n %g", myRandoms[i]);
   }
   
   if(numframes==0 || keystatus[57])
   {
      keystatus[57] = 0;
      for(i=0; i<10; i++)
      {
         myRandoms[i] = BlitzRnd(500,502);
      }
      makeTest();
      
      boxIntersect(ox,oy,nx,ny,box1,boy1,box2,boy2,tix,tiy);
      
   }
   
   setcol(0xffffff);
   DrawLine( box1,boy1,box2,boy1 );
   DrawLine( box1,boy1,box1,boy2 );
   DrawLine( box1,boy2,box2,boy2 );
   DrawLine( box2,boy1,box2,boy2 );


   
   moveto(ox,oy); lineto(nx,ny); 
   drawsph(tix,tiy,-6);
   

   static lsx; static lsy;
   if(bstatus==1){ lsx=mousx, lsy=mousy; bstatus=0; }
   lex = mousx; ley = mousy;
   DrawLine(lsx,lsy,lex,ley);
   
   tix2 = 0; tiy2 = 0;
   boxIntersect(lsx,lsy,lex,ley,box1,boy1,box2,boy2,tix2,tiy2); 
   drawsph(tix2,tiy2,-6);
}

drawline(x1,y1,x2,y2)
{
   moveto(x1,y1); lineto(x2,y2);
}

makeTest()
{
   box1 = 200+rnd*100;
   boy1 = 100+rnd*100;
   box2 = 500+rnd*100;
   boy2 = 400+rnd*100;
   
   nx = BlitzRnd(box1, box2);
   ny = BlitzRnd(boy1, boy2);
   an = rnd*360;
   ox = 300*cos(an)+400;
   oy = 300*sin(an)+300;
}

BlitzRnd(min,max)
{
   area = rnd * (max-min);
   return min + area;
}

// original code: Warpy of the blitzbasic.com forums
boxIntersect(last_x, last_y, x, y, bx1, by1, bx2, by2, &ix, &iy)
{
   // Finds the point of intersection of line from (last_x, last_y) to (x,y)
   // with the box (bx1,by1,bx2,by2). The ix and iy parameters are pointers
   // which means the function fills in the values of the point of intersection in
   // the variables that you give.
   // the funciton also returns true if there is an intersection, false if there is none
   
   if( (x>=bx1 && x<=bx2 && y>=by1 && y<=by2) ){}else{return 0;}
   
   if(last_x < bx1 && x >= bx1) // does it cross left edge?
   {
      iy = last_y + (y - last_y) * (bx1 - last_x)/(x-last_x);
      if(iy >= by1 && iy <= by2)
      {
         ix = bx1; return 1;
      }
   }
   else if(last_x > bx2 && x <= bx2) // cross right edge?
   {
      iy = last_y + (y-last_y) * (bx2 - last_x)/(x-last_x);
      if(iy >= by1 && iy <= by2) // is intersection point on right edge?
      {
         ix = bx2; return 1;
      }
   }
   
   if(last_y < by1 && y >= by1)
   {
      ix = last_x + (x-last_x) * (by1 - last_y)/(y-last_y);
      if(ix >= bx1 && ix <= bx2) // is intersection point on top edge?
      {
         iy = by1; return 1;
      }
   }
   else if(last_y > by2 && y <= by2) // does it cross bottom edge?
   {
      ix = last_x + (x - last_x) * (by2 - last_y)/(y - last_y);

      if(ix >= bx1 && ix <= bx2) // is intersection point on bottom edge?
      {
         iy = by2; return 1;
      } 
   }
}