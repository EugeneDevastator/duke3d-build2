
struct vec
{
   x,y,z;
}

struct ray_t
{
   vec s;
   vec v;
}

struct cyl_t
{
   vec e1;
   vec e2;
   double radi;
}

enum{MAX_CYLS = 100}
static cyl_t cyls[MAX_CYLS];

()
{
   if (numframes == 0)
   {
      for(i=0; i<MAX_CYLS; i++)
      {
         cyl_t cyl;
         xp = 4*nrnd;
         zp = 4*nrnd;         

         set( cyl.e1, xp, -1, zp );
         set( cyl.e2, xp, 1, zp );
         cyl.radi = 0.25 + 0.5*rnd;
         cyls[i] = cyl;
      }
   }

   cls(0);
   clz(1e32);
   
   setcam( 0,10,0, 0, -PI/2);
      
   a = klock(0);
   a = mousx/xres * 6.28;
   r = 100;

   ray_t ray;
   set( ray.s, 5,0,-1 );
   set( ray.v, cos(a)*r, 0, sin(a)*r );
 

   setcol( 255, 255, 255 );
   drawRay( ray );
   
   setcol( 0,255,0 );
   for( i=0; i<MAX_CYLS; i++)
   {
      //drawCyl( cyls[i] );
   }
   
   for( i=0; i<MAX_CYLS; i++)
   {   

      success = 1;
      t = isect_ray_cyl( ray, cyls[i], success );
      
      if ( success == 1 )
      {
         
         setcol(0,0,255); 
         vec hit;
         raypoint( hit, ray, t );
         drawsph( hit.x, hit.y, hit.z, .1 );
         setcol(255,0,0); 
         
      }else
      {
         setcol(0,255,0); 
      }
      
      drawCyl( cyls[i] );
      
      
      
   }   

vec diff;
vecsub( diff, ray.v, ray.s );

len = length( diff );

moveto(0,0);
printf("ray length = %g\n", len);
printf("t = %g\n", t);
printf("hit = %g\n", success);
}

isect_ray_cyl( ray_t ray, cyl_t cyl, &success )
{
   vec s0;
   vecsub( s0, ray.s, cyl.e1 );
   vec e2e1;
   vecsub( e2e1, cyl.e2, cyl.e1 );
   e2e1Sq = dot(e2e1,e2e1);
   vDotV = dot(ray.v, ray.v);   
   
   dirDotAxis = dot(ray.v, e2e1);   
   
   s0DotAxis = dot(s0, e2e1);

   a = vDotV - ( dirDotAxis^2 / e2e1Sq );
   b = dot(s0, ray.v) - ( s0DotAxis * dirDotAxis) / e2e1Sq;
   c = dot(s0,s0) - cyl.radi^2 - (s0DotAxis)^2 / e2e1Sq;
   
   D4 = b^2 - a*c;
   if ( D4 > 0 )
   {

      t = (-b - sqrt(b^2 - a*c)) / a;  // thanks to Trond    
      
      if ( t < 0 || t > 1.0 )
      {
         success = -1;
         return;
      }

      vec pt;
      raypoint( pt, ray, t );
      
      // The signed length L of the projection P(t) - E1 onto A
      L = dot( pt, e2e1 ) / length(e2e1) ;
      
      // The ray isects the cyl if L is positive and less than ||A||
      // we simply need to check that
      // 0 < [P(t) - E1] dot A < A^2
      
      vec e1pt;
      vecsub( e1pt, pt, cyl.e1 );
      proj_pt_e1 = dot( e1pt, e2e1 );
      if ( proj_pt_e1 > 0 && proj_pt_e1 < e2e1Sq )
      {
         success = 1;
         return t;
      } 
      success = -1;
      return;
   }
   
   

   success = -1;
   return;
}

raypoint( vec out, ray_t r, t )
{
   out.x = r.s.x + t * r.v.x;
   out.y = r.s.y + t * r.v.y;
   out.z = r.s.z + t * r.v.z;
}

drawray( ray_t r )
{
   //drawsph(  r.s.x, r.s.y, r.s.z, .5 );

   vec end;
   vecAdd( end, r.s, r.v );

   //drawcone( r.s.x, r.s.y, r.s.z, 0.25,
   //          end.x, end.y, end.z, 0.01 );
   
   moveto( r.s.x, r.s.y, r.s.z );
   lineto(end.x, end.y, end.z );
   
}

drawcyl( cyl_t r )
{
     drawcone( r.e1.x, r.e1.y, r.e1.z, -r.radi,
             r.e2.x, r.e2.y, r.e2.z, -r.radi ); 
}

vecadd( vec out, vec a, vec b)
{
   out.x = a.x + b.x;
   out.y = a.y + b.y;
   out.z = a.z + b.z;
}

vecsub( vec out, vec a, vec b)
{
   out.x = a.x - b.x;
   out.y = a.y - b.y;
   out.z = a.z - b.z;
}


dot( vec a, vec b )
{
   return a.x * b.x + a.y * b.y + a.z * b.z;
}

set( vec a, x, y, z )
{
   a.x = x;
   a.y = y;
   a.z = z;
}

length( vec v )
{
   return sqrt( dot(v,v) );
}
