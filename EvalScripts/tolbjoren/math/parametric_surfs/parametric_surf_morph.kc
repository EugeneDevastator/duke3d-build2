#define NO_TEXTURE

enum{dim1=36, dim2=36}
static px[dim1][dim2];
static py[dim1][dim2];
static pz[dim1][dim2];
static color[dim1][dim2];

struct vec
{
   x,y,z;
}

static mtx[9];
static rotHang = 0;
static rotVert = 0;

static oldmousx, oldmousy;
()
{
   cls(0);
   clz(1e32);
   glEnable(GL_DEPTH_TEST);
   glCullface(GL_NONE);   
   
   
   t = klock(0); //mousx/xres * 2*PI;
   ang = t;
   r = 4;
   //setcam( sin(ang)*-r, 0, cos(ang)*-r, ang, 0 );
   

   vec upwards;
   vecset(upwards,0,-1,0);

   vec center;
   vecset(center,0,0,0);

   vec eyePos;
   vec rotVec;
   sx = 0; sy = 0; sz = 0;
   sphere( rotHang, rotVert, sx,sy,sz); // Get point on sphere
   vecset( eyePos, sx*r, sy*r, sz*r );

   lookAt( eyePos, center, upwards, mtx );
   setcam2( eyePos, mtx );
   
   mousxspeed = oldmousx - mousx;
   mousyspeed = oldmousy - mousy;
   oldmousx = mousx;
   oldmousy = mousy;

   if ( bstatus == 2 )
   {
      rotHang += mousxspeed * .01;
      rotVert += mousyspeed * .01;
   }
   
   t_morph = 1-mousx/xres;
   //t_morph = .5+ cos( t ) / 2;
   //t_morph = 0;
   
   finalx = 0; finaly=0; finalz = 0;
   
   ucoord = mousx/xres;
   vcoord = mousy/yres;
   sphere(ucoord, vcoord, x, y, z);
   
   if(numframes==0)
   {
      #ifdef NO_TEXTURE
         static tex[2][2];
         c = rgb(255,255,255);
         tex[0][0] = c;
         tex[0][1] = c;
         tex[1][0] = c;
         tex[1][1] = c;
         handle=glsettex(tex,2,2);
      #endif
   }

   //if(numframes==0)
   {
      deltau = 1 / (dim1-1);
      deltav = 1 / (dim2-1);  
      startu = 0;
      startv = 0;  
      scaler = 1;

      for(i=0; i<dim1; i++)
      for(j=0; j<dim2; j++)
      {     

         u = startu + i * deltau;
         v = startv + j * deltav;
         x=0; y=0; z=0;

         
         x1 = 0; y1 = 0; z1 = 0;
         halfsphere(u,v,x1,y1,z1);
         
         x2 = 0; y2 = 0; z2 = 0;
         surface(u,v,x2,y2,z2);    
         
         
         x = lerp( x1, x2, t_morph );     
         y = lerp( y1, y2, t_morph );
         z = lerp( z1, z2, t_morph );
         
         //cylinder(u,v,x,y,z);
         //cool(u,v,x,y,z);
         //heart(u,v,x,y,z);
         //helicoid(u,v,x,y,z);
         //sphere(u,v,x,y,z);
         //torus(u,v,x,y,z); 
         //funky(u,v,x,y,z);
         //klein_bagel(u,v,x,y,z);       
         //kleinbottle(u,v,x,y,z);  
         //boys(u,v,x,y,z);   
         //mobius(u,v,x,y,z);
             

         x*=scaler;
         y*=scaler;
         z*=scaler;
         px[i][j] = x; py[i][j] = y; pz[i][j] = z;
         //color[i][j] = rgb( 511*i/(dim1-1)/2, 511*j/(dim2-1)/2, 0) ;
         color[i][j] = hsv_to_rgb( (i*dim1+j)/(dim1*dim2) * 360, 1,1);
      }
      

   }
   sphere(ucoord,vcoord,x1,y1,z1);
   surface(ucoord,vcoord,x2,y2,z2);  
   finalx = lerp( x1, x2, t_morph );     
   finaly = lerp( y1, y2, t_morph );
   finalz = lerp( z1, z2, t_morph );

   sc = 2;
   for(i=0; i<dim1-1; i++)
   {
      #define TRI // slower than complex
      #ifdef TRI
      glBegin(GL_TRIANGLE_STRIP);
      for(j=0; j<dim2; j++)  
      {
         //glBegin(GL_LINE_STRIP);
         glBegin(GL_TRIANGLE_STRIP);
         for(j=0; j<dim2; j++)  
         {
            setcol( color[i][j]  );
            glTexCoord( sc*i/dim1, sc*j/dim2);
            glVertex( px[i][j], py[i][j], pz[i][j] );
            
            setcol( color[i+1][j] );
            glTexCoord( sc*(i+1)/dim1, sc*j/dim2);
            glVertex( px[i+1][j], py[i+1][j], pz[i+1][j] );     
         } 
         glEnd();   
      } 
      glEnd();
      #else
         // when running unbounded I get 4 Mcc with gl_complex and 7-8 with gl_triangle_strip

         for(j=0; j<dim2-1; j++)  
         {
            //glBegin(GL_COMPLEX);
            glBegin(GL_LINE_STRIP);
            setcol( color[j][i]  );
            
            glTexCoord( sc*i/dim1, sc*j/dim2);
            glVertex( px[i][j], py[i][j], pz[i][j] );
            
            glTexCoord( sc*(i+1)/dim1, sc*j/dim2);
            glVertex( px[i+1][j], py[i+1][j], pz[i+1][j] );   
            
            glTexCoord( sc*(i+1)/dim1, sc*(j+1)/dim2);
            glVertex( px[i+1][j+1], py[i+1][j+1], pz[i+1][j+1] );   
            
            glTexCoord( sc*i/dim1, sc*(j+1)/dim2);
            glVertex( px[i][j+1], py[i][j+1], pz[i][j+1] );   

            glEnd();
         } 
         
      #endif

   }

   drawsph( finalx, finaly, finalz,.1 );
   
   setcol(255,0,0);
   drawrectfill(0,0,100,100);
   
   setcol(255,255,255);
   drawsph(ucoord * 100, vcoord * 100, 10);
   
   setfont(8,12);
   moveto( 100, 100 ); printf("u=%.2f\nv=%.2f", ucoord, vcoord);


}

drawrectfill(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }


tform(m[9], vec v)
{
   x = v.x; y = v.y; z = v.z;
   v.x = = m[0] * x + m[1] * y + m[2] * z;
   v.y = m[3] * x + m[4] * y + m[5] * z;
   v.z = m[6] * x + m[7] * y + m[8] * z;
}

lerp( a, b, t )
{
   a + (b-a)*t;
}

surface(u,v,&x, &y, &z) 
{
   x = (1-v)-.5;
   y = 0;
   z = (1-u)-.5;
}

halfsphere(u,v,&x,&y,&z)
{
   r=1;
   u*=1*PI; // u [0, pi]
   v*=1*PI; // v [0, 2pi]
   // Definition from wiki
   x = r * sin(u) * cos(v);
   y = r * sin(u) * sin(v);
   z = r * cos(u);
}

sphere(u,v,&x,&y,&z)
{
   r=1;
   #define SPHERICAL
   #ifdef SPHERICAL
      u*=1*PI; // u [0, pi]
      v*=2*PI; // v [0, 2pi]
      // Definition from wiki
      x = r * sin(u) * cos(v);
      y = r * sin(u) * sin(v);
      z = r * cos(u);
   #else
      u = -r + u*2*r;
      v *= 2*PI;
      x = sqrt(r*r - u*u) * cos(v);
      y = sqrt(r*r - u*u) * sin(v);
      z = u;
   #endif
}

cylinder(u,v,&x, &y, &z) 
{
   s = u*2*PI;
   t = v*PI;
   
   x = cos(t);
   y = cos(s);
   z = sin(s);
}

cool(u,v,&x, &y, &z) 
{
   s = u*2*PI;
   t = v*PI;
   
   x = cos(s) * sin(t) ;
   y = cos(t) * sin(t);
   z = sin(s) * sin(t);
}

funky(u,v,&x,&y,&z)
{
   u*=2*PI;
   v*=PI;
   x = sin(u) * cos(v);
   y = cos(u) * cos(v);
   z = sin(u);
}

torus(u,v,&x,&y,&z)
{
   u *= 2*PI;
   v *= 2*PI;
   bigR = .5;
   r = .25;
   x = (bigR+r*cos(v)) * cos(u);
   y = (bigR+r*cos(v)) * sin(u);  
   z = r*sin(v);
}

torus2(u,v,&x,&y,&z)
{
   u *= 2*PI;
   v *= 2*PI;
   bigR = .5;
   r = .25;
   x = (bigR+r*cos(v)) * sin(u);
   y = (bigR+r*cos(v)) * cos(u);  
   z = r*sin(v);
}

torus3(u,v,&x,&y,&z)
{
   u *= 2*PI;
   v *= 2*PI;
   bigR = .5;
   r = .25;
   x = (bigR+r*cos(v)) * cos(u);
   y = r*sin(v);  
   z = (bigR+r*cos(v)) * sin(u);
}

torus4(u,v,&x,&y,&z)
{
   u *= 2*PI;
   v *= 2*PI;
   bigR = .5;
   r = .25;
   x = r*sin(v);
   y = (bigR+r*cos(v)) * sin(u);  
   z = (bigR+r*cos(v)) * cos(u);
}

pilow(u,v,&x,&y,&z)
{
   u*=2*PI;
   v*=2*PI;
   x = sin(u) * cos(v);
   y = sin(v);
   z = cos(u);
}

helicoid(u,v,&x,&y,&z)
{
   u*= 2 * PI;
   v*= 2 * PI;
   a = 1/10; b = 1/10; c = 1/3;
   x = a * sin(u)*v;
   y = b * v * cos(u);
   z = c * u;
}

heart2(u,v,&x,&y,&z)
{
   u=-0.98 + u*(0.98*2);
   v=-pi + v*2*pi;
   r = (4*sqrt(1-u*u)) * pow( sin(abs(v)) , abs(v) );
   x = r * sin(v);
   y = r * cos(v);
   z = v;
}

heart(u,v,&x, &y, &z)
{
   u=-0.98 + u*(0.98*2);
   v=-pi + v*2*pi;
   r = (4*sqrt(1-u*u) * pow(sin( abs(v) ), abs(v) ));
   x = r *sin(v);
   y = r *cos(v);
   z = u;
}

klein_bagel(u,v,&x, &y, &z)
{   
   u*=2*PI;
   v*=2*PI;
   r=.5 ;
   expr1 = r+cos(u*.5)*sin(v)-sin(u*.5)*sin(2*v);
   x = expr1 * cos(u);
   y = expr1 * sin(u);
   z = sin(u*.5)*sin(v) + cos(u*.5)*sin(2*v);
}

klien_fail(u,v,&x, &y, &z)
{
   u*=2*PI;
   v*=2*PI;
   sq2 = sqrt(2);
   //((sqrt(2) * f(u) * cos(u)*cos(v)*(3*cos(u)^2-1) - 2*cos*2u
   
   fu = 20*u^3 - 65*pi*u^2 + 50*pi^2*u - 16*pi^3;
   gu = sqrt( 8*cos(2*u)^2 - cos(2*u) * (24*cos(u)^3 - 8*cos(u)+15) +
    6*cos(u)^4 * (1-3*sin(u)^2) + 17);
   
   xn = sq2 * fu * cos(u)*cos(v)*(3*cos(u)^2-1) - 2*cos(2*u);
   xd = 80 * PI^3 * gu;
   x = xn/xd - (3*cos(u)-3) / 4;
   
   y = -(fu * sin(v) ) / (60*pi^3);
   
   zn1 = sq2 * fu * sin(u)*cos(v);
   zd1 = 15*pi^3 * gu;
   z = -zn1/zd1 + (sin(u) * cos(u)^2 + sin(u)) / 4 - (sin(u)*cos(u))/2;
}

kleinbottle(p1,p2,&x, &y, &z)
{
   u = p1 * 2*PI;
   v = p2 * 2*PI;

   r = 4*(1-cos(u)*.5);
   
   x=0;
   y=0;
   if (u >= 0 && u < PI ){
      x = 6 * cos(u) * (1+sin(u)) + r*cos(u)*cos(v);  
      y = 16*sin(u) + r * sin(u)*cos(v);
   }
   else{
      x = 6 * cos(u) * (1+sin(u)) + r*cos(v+pi);
      y = 16*sin(u);
   }
         

   
   z=r*sin(v);
}

boys(u,v,&x, &y, &z) // incorrecT?
{
   t = u*PI;
   s = v*PI;
   x = cos(t) * sin(s);
   y = sin(t) * sin(s);
   z = cos(s);
}

mobius(u,v,&x,&y,&z)
{
   u *= 2*PI; //u in [0,2pi]
   v = -1 + v*2; //v in [-1, 1]
   
   /*
   x = 2*cos(v) + u*cos(v/2)*cos(v);
   y = 2*sin(v) + u*cos(v/2)*sin(v);
   z = u*sin(v/2);
   */
   
   x = (1 + .5*v * cos(u*.5) ) * cos(u);
   y = (1 + .5*v * cos(u*.5) ) * sin(u);
   z = .5*v * sin(.5*u);
   
}


hsv_to_rgb(h,s,v){ 
   // expects 360deg and 1,1 hue sat max
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
   return r*2^16 + g*2^8 + b; 
}

lookAt(vec eye, vec pos, vec worldup, mtx[9])
{
   vec fwd;
   vec up;
   vec side;
   
   // find forward dir
   vecsub( fwd, pos, eye );
   normalize(fwd);
   
   // find up vector as close to world up as possible   
   dotprod = vecDot(worldUp,fwd);
   static part2[3];
   vecscalar( part2, fwd, dotprod);
   
   vecsub(up, worldUp, part2);
   normalize(up);

   static side[3];
   vecCross(side,fwd,up);
   normalize(side);
  
   buildMatrix( mtx, side, up, fwd ); 
}

vecScalar( vec out, vec a, s )
{
   out.x = a.x * s;
   out.y = a.y * s;
   out.z = a.z * s;
}

vecAdd( vec out, vec a, vec b)
{
   out.x = a.x + b.x;
   out.y = a.y + b.y;
   out.z = a.z + b.z;   
}
vecSub( vec out, vec a, vec b)
{
   out.x = a.x - b.x;
   out.y = a.y - b.y;
   out.z = a.z - b.z;   
}

vecCross( vec out, vec a, vec b)
{
   out.x = a.y*b.z - a.z*b.y;
   out.y = a.z*b.x - a.x*b.z;
   out.z = a.x*b.y - a.y*b.x;
}

vecset(vec a, x,y,z){
   a.x = x; a.y = y; a.z = z;
}

vecset(vec a, vec other){
   a.x = other.x; a.y = other.y; a.z = other.z;
}

vecDot( vec a, vec b)
{
   return a.x*b.x + a.y*b.y + a.z*b.z;
}

length( vec v )
{
   return sqrt( vecdot(v,v) );
}

normalize( vec v )
{
   len = length(v);
   if ( len )
   {
      v.x /= len; v.y /= len; v.z /= len;
   }
}

buildMatrix( mtx[9], vec side, vec up, vec fwd )
{
   mtx[0] = side.x; mtx[1] = side.y; mtx[2] = side.z;
   mtx[3] = up.x;   mtx[4] = up.y;   mtx[5] = up.z;
   mtx[6] = fwd.x;  mtx[7] = fwd.y;  mtx[8] = fwd.z;
}


setcam2( vec p, m[9] )
{
   setcam(p.x, p.y, p.z,
          m[0], m[1], m[2],
          m[3], m[4], m[5],
          m[6], m[7], m[8]);
}

/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}