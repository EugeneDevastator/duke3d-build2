static posx = 0;
static posy = 0;
static posz = 5;
static posh = 0; // left right
static posv = 3.14;

enum{dim1=18*2, dim2=18}
static px[dim1][dim2];
static py[dim1][dim2];
static pz[dim1][dim2];
static color[dim1][dim2];
()
{
   cls(0);
   clz(1e32);
   glEnable(GL_DEPTH_TEST);
   glCullface(GL_FRONT);   
   
   if(numframes==0)
   {
      static tex[2][2];
      c = rgb(255,255,255);
      tex[0][0] = c;
      tex[0][1] = c;
      tex[1][0] = c;
      tex[1][1] = c;
      handle=glsettex(tex,2,2);
   }

   if(numframes==0)
   {

      deltau = 2*PI / (dim1-1);
      deltav = 2*PI / (dim2-1);  
      startu = 0;
      startv = 0;   
      scaler =20;

      for(i=0; i<dim1; i++)
      for(j=0; j<dim2; j++)
      {     

         u = startu + i * deltau;
         v = startv + j * deltav;
         x=0; y=0; z=0;
         //heart(u,v,x,y,z);
         //helicoid(u,v,x,y,z);
         //sphere(u,v,x,y,z);
         torus(u,v,x,y,z);
         //funky(u,v,x,y,z);        
         
         

         px[i][j] = x*scaler; py[i][j] = y*scaler; pz[i][j] = z*scaler;
         //color[i][j] = rgb( 511*i/(dim1-1)/2, 511*j/(dim2-1)/2, 0) ;
         color[i][j] = hsv_to_rgb( (i*dim1+j)/(dim1*dim2) * 360 % 360, 1,1);
      }
   }


   for(i=0; i<dim1-1; i++)
   {
      glBegin(GL_TRIANGLE_STRIP);
      for(j=0; j<dim2; j++)  
      {
         setcol( color[i][j]  );
         glVertex( px[i][j], py[i][j], pz[i][j] );
         setcol( color[i+1][j] );
         glVertex( px[i+1][j], py[i+1][j], pz[i+1][j] );     
      } 
      glEnd();
   }
   
gldisable(GL_DEPTH_TEST);
setcol(0,0,0);
   for(i=0; i<dim1-1; i++)
   {
      glBegin(GL_LINE_STRIP);
      for(j=0; j<dim2; j++)  
      {
         //setcol( color[i][j]  );
         glVertex( px[i][j], py[i][j], pz[i][j] );
         //setcol( color[i+1][j] );
         glVertex( px[i+1][j], py[i+1][j], pz[i+1][j] );     
      } 
      glEnd();

   }

   
   //ang = mousx/xres * 2*PI;
   //r = 5;
   //setcam( sin(ang)*-r, 0,cos(ang)*-r  , ang , 0);
   playercontrols();
}

funky(u,v,&x,&y,&z)
{
   x = sin(u) * cos(v);
   y = cos(u) * cos(v);
   z = sin(u);
}

sphere(u,v,&x,&y,&z)
{
   x = sin(u) * cos(v);
   y = sin(u) * sin(v);
   z = cos(u);
}

torus(u,v,&x,&y,&z)
{
   bigR = 1.0;
   r = 0.4;
   x = (bigR+r*cos(v)) * cos(u) ;
   y = r*sin(v);
   z = (bigR+r*cos(v)) * sin(u);
}

pilow(u,v,&x,&y,&z)
{
   x = sin(u) * cos(v);
   y = sin(v);
   z = cos(u);
}

helicoid(u,v,&x,&y,&z)
{
   a = 1; b = 1; c = 1;
   x = a * sin(u)*v;
   y = b * v * cos(u);
   z = c * u;
}

heart2(u,v,&x,&y,&z)
{
   r = (4*sqrt(1-u*u)) * pow( sin(abs(v)) , abs(v) );
   x = r * sin(v);
   y = r * cos(v);
   z = v;
}

heart(u,v,&x, &y, &z)
{
   r = (4*sqrt(1-u*u) * pow(sin( abs(v) ), abs(v) ));
   x = r *sin(v);
   y = r *cos(v);
   z = u;
}


hsv_to_rgb(h,s,v){ 
   // expects 360deg and 1,1 hue sat max
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
   return r*2^16 + g*2^8 + b; 
}

// Camera and movement code taken from /games/
//Handle input and player movement
playercontrols()
{
   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

   f = .125;
   if (keystatus[0x2a]) f /= 4;
   if (keystatus[0x36]) f *= 4;
   vx = (keystatus[32]-keystatus[30])*f; //D-A
   vy = (keystatus[17]-keystatus[31])*f; //W-S  
   vz = (keystatus[0x52]-keystatus[0x9d])*f; //KP0-RCtrl
   
   static mat[9]; 
   ang2mat(posh,posv,mat); // Convert angles to rotation matrix
   
   // find new position
   posx += mat[0]*vx + mat[3]*vz + mat[6]*vy;
   posy += mat[1]*vx + mat[4]*vz + mat[7]*vy;
   posz += mat[2]*vx + mat[5]*vz + mat[8]*vy; 
   // mousespeed values are tweaked for 60 fps
   mouseSpeedX = (mousx - oldMouseX) * 0.01;
   mouseSpeedY = (mousy - oldMouseY) * 0.01;
   oldMouseX = mousx;
   oldMouseY = mousy;
   if(bstatus==1)
   {
      posh -= mouseSpeedX;
      posv += mouseSpeedY;
   }
   // Right,down,forwards unit vectors.
   setcam(posx,posy,posz,
          mat[0],mat[1],mat[2],
          mat[3],mat[4],mat[5],
          mat[6],mat[7],mat[8]);
}
/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}