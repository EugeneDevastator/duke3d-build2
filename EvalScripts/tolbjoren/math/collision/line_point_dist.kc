static x1,y1,x2,y2;
()
{
   cls(0);
   
   if(numframes==0)
   {
      x1=xres/2 - 200;
      y1=yres/2 - 100;
      x2=xres/2 + 200;
      y2=yres/2 + 100;   
   }
   radi = 25;   

   setcol(255,64,0);   
   moveto(x1,y1); lineto(x2,y2);
   collided = 0;   

   dsq = ldist(mousx,mousy,x1,y1,x2,y2);
   d = sqrt(dsq);

   if( circleInRect( mousx,mousy,x1,y1,x2,y2,radi ) )
   {
      dreal = linept(mousx,mousy,x1,y1,x2,y2);
      if( fabs(dreal) < radi )
      //if( ldist(mousx,mousy,x1,y1,x2,y2) < radi^2  )
      {
         collided = 1;
      }
   }
   
   if(collided) drawsph(mousx,mousy,radi);
   else drawsph(mousx,mousy,-radi);
   
   setcol(0xffffff);
   setfont(8,15);
   moveto(0,0);
   printf("Dist sq %.5f\n", dsq);
   printf("Dist    %.5f\n", dreal);
   if( circleInRect( mousx,mousy,x1,y1,x2,y2,radi ) )
   {
      printf("within");
      sx = min(x1,x2);
      sy = min(y1,y2);
      drawRect(sx, sy, fabs(x1-x2), fabs(y1-y2) );
   }
   else printf("not within");
}

/*
general method for rotated rect:
http://www.gamedev.net/community/forums/topic.asp?topic_id=483716
* P is the point.
* C is a corner of the rectangle.
* v1 and v2 are the two vectors that define the sides (with C as origin).
* v = P-C

P is in the rectangle if and only if
0<=dot_product(v,v1)<=dot_product(v1,v1) and 0<=dot_product(v,v2)<=dot_product(v2,v2)
*/

circleInRect(x,y,x0,y0,x1,y1,radi)
{
   if(x1 < x0){t=x0; x0=x1; x1=t;}
   if(y1 < y0){t=y0; y0=y1; y1=t;}
   if( (x+radi) > x0 && (x-radi) < x1 && (y+radi) > y0 && (y-radi) < y1) return 1;

   return 0;
}

pointInRect(x,y,x0,y0,x1,y1)
{
   if(x1 < x0){t=x0; x0=x1; x1=t;}
   if(y1 < y0){t=y0; y0=y1; y1=t;}
   if( (x) > x0 && (x) < x1 && (y) > y0 && (y) < y1) return 1;

   return 0;
}

linept(px,py,x1,y1,x2,y2)
{
   d = ( (x2-x1)*(y1-py) - (x1-px)*(y2-y1) )/dist(x1,y1,x2,y2);
   return d;
}

dist(x1,y1,x2,y2)
{
   return sqrt( (x1-x2)^2 + (y1-y2)^2 );
} 

// Taken from match.kc by Robert Rogers
// reports dist from endpoint to center
ldist(x,y,x0,y0,x1,y1)
{
   dx=x1-x0;dy=y1-y0;x1+=x0;y1+=y0;nx=x-x0;ny=y-y0;
   f=nx*dx+ny*dy;if(f<=0)return(nx^2+ny^2);
   g=dx*dx+dy*dy;if(f> g)return((x-x1)^2+(y-y1)^2);
   return((nx*dy-ny*dx)^2/g);
}

drawRect(sx, sy, wx, wy)
{   
   moveto(sx, sy);
   lineto(sx+wx, sy+0);
   
   moveto(sx, sy+wy);
   lineto(sx+wx, sy+wy);
   
   moveto(sx, sy);
   lineto(sx, sy+wy);
   
   moveto(sx+wx, sy);
   lineto(sx+wx, sy+wy);
}