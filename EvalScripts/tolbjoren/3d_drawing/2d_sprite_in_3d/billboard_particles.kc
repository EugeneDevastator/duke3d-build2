enum{MAXPARTICLES=250};
static particleX[MAXPARTICLES];
static particleY[MAXPARTICLES];
static particleZ[MAXPARTICLES];
static particleVX[MAXPARTICLES];
static particleVY[MAXPARTICLES];
static particleVZ[MAXPARTICLES];
static numparticles = 0;

static posx = 0;
static posy = -5;
static posz = -15;
static posh = 0; // left right
static posv = 0.0;
static mat[9]; 

static time, dt, oldtime;
()
{
   static dopefish[64][64];
   if(numframes==0)
   {
      // Set pink parts (R=255 G = 0 B = 255) of image to transparent.
      for(x=0; x<64; x++)
      for(y=0; y<64; y++)
      {
         r=0; g=0; b=0;
         pic("dopefish.png",x,y,r,g,b);
         if(r>=255 && b>=255 && g <= 1){
            dopefish[y][x] = -1;
         }
         else{
            dopefish[y][x] = rgb(r,g,b);
         }
      }
   }
   
   time = klock(0);
   dt = time-oldtime;
   oldtime = time;   

   cls(0); clz(1e32);

   // Draw both sides of billboard quads.
   // enable alpha test so sprites become 100% transparent
   glCullFace(GL_NONE);
   glEnable(GL_DEPTH_TEST);
   glEnable(GL_ALPHA_TEST);
   
   // Draw floor
   setcol(511,511,511);
   glBegin(GL_QUADS);
   glVertex(-20,0,-20);
   glVertex(20,0,-20);   
   glVertex(20,0,20);
   glVertex(-20,0,20);

   // Add 1 new particle per frame   
   if(numparticles < MAXPARTICLES) numparticles++;
   
   speed = .05;

   // Animate particles
   for(i=0; i<numparticles; i++)
   {
      particleX[i] += particleVX[i] * dt * speed;
      particleY[i] += particleVY[i] * dt * speed;
      particleZ[i] += particleVZ[i] * dt * speed;
      
      particleVY[i] += 10 * dt * speed; // lower tnx to grav
      
      
      if(particleY[i] > 0)
      {
         // Start velocities
         particleVX[i] = 2*nrnd;
         particleVY[i] = -15 - rnd/2;
         particleVZ[i] = 2*nrnd;
         
         // Start position
         particleX[i] = nrnd/15;
         particleY[i] = 0;
         particleZ[i] = nrnd/15;
         
      }
      //drawsph(particleX[i], particleY[i], particleZ[i], .1);
   }
   
   // 1. Find point depth relative to camera. 
   // 2. Sort by depth. 
   // 3. Draw in order, most distant first.
   static bdep[MAXPARTICLES];
   static bord[MAXPARTICLES];
   
   for(i=0;i<MAXPARTICLES;i++)
   {
      bdep[i] = (particleX[i]-posx)*mat[6] +
                (particleY[i]-posy)*mat[7] +
                (particleZ[i]-posz)*mat[8];
      bord[i] = i;
   }
   //Crap sort
   for(i=1;i<MAXPARTICLES;i++)
   for(j=0;j<i;j++)
      if (bdep[bord[i]] < bdep[bord[j]])
      { t = bord[i]; bord[i] = bord[j]; bord[j] = t; }
   
   
   setcol(511,511,511);
   texhand=glSetTex(dopefish,64,64);
   for(j=MAXPARTICLES-1;j>=0;j--)
   {
      i = bord[j];
      //if ((i == 0) && (spheres[0].z)) continue; //?
     // setcol(0xffffff);
      //drawsph( spheres[i].x, spheres[i].y, spheres[i].z, spheres[i].radius );

      // "shadow"
      setcol(0);
      drawsph(particleX[i], 0, particleZ[i],.1);      

      x = particleX[i] - posx; y = particleY[i] - posy; z = particleZ[i] - posz;
      nx = x* mat[0] + y * mat[1] + z * mat[2];
      ny = x* mat[3] + y * mat[4] + z * mat[5];
      nz = x* mat[6] + y * mat[7] + z * mat[8];
      if(nz <= 0.1) continue;
      f = xres/2/nz;
      //if( spheres[i].isResting )
      {
         setcol(511,511,511); 
         drawspr(nx*f+xres/2, ny*f+yres/2, min(256/nz,64) , time); 
         // drawspr xpos, ypos, scale, rotation 
           
         /*  
         setcol(0xffffff); 
         setfont(8,12);
         moveto(nx*f+xres/2, 
         ny*f+yres/2); printf("Zzz");
         */
      }
   }
   glRemoveTex(texhand);
   


   cang = time;
   dst = -15;
   //setcam(sin(cang)*dst,-5,cos(cang)*dst,cang,0);
   playercontrols();
}

// Camera and movement code taken from /games/
//Handle input and player movement
playercontrols()
{
   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

   f = .1;
   if (keystatus[0x2a]) f /= 4;
   if (keystatus[0x36]) f *= 4;
   vx = (keystatus[32]-keystatus[30])*f; //D-A
   vy = (keystatus[17]-keystatus[31])*f; //W-S  
   vz = (keystatus[0x52]-keystatus[0x9d])*f; //KP0-RCtrl
   
   
   ang2mat(posh,posv,mat); // Convert angles to rotation matrix
   
   // find new position
   posx += mat[0]*vx + mat[3]*vz + mat[6]*vy;
   posy += mat[1]*vx + mat[4]*vz + mat[7]*vy;
   posz += mat[2]*vx + mat[5]*vz + mat[8]*vy; 
   
   // mousespeed values are tweaked for 60 fps
   mouseSpeedX = (mousx - oldMouseX) * 0.01;
   mouseSpeedY = (mousy - oldMouseY) * 0.01;
   oldMouseX = mousx;
   oldMouseY = mousy;
   
   if(bstatus==1)
   {
      posh += mouseSpeedX;
      posv += mouseSpeedY;
   }
   // Right,down,forwards unit vectors.
   setcam(posx,posy,posz,
          mat[0],mat[1],mat[2],
          mat[3],mat[4],mat[5],
          mat[6],mat[7],mat[8]);
          

}
/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}