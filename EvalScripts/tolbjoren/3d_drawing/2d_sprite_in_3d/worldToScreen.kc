enum{MAXPARTICLES=250};
static particleX[MAXPARTICLES];
static particleY[MAXPARTICLES];
static particleZ[MAXPARTICLES];
static numparticles = 0;

static posx = 0;
static posy = -5;
static posz = -15;
static posh = 0; // left right
static posv = 0.0;
static mat[9]; 

static time, dt, oldtime;
()
{

   if(numframes==0)
   {
      for(i=0; i<MAXPARTICLES; i++)
      {
         particleX[i] = nrnd *  10;
         particleY[i] = -rnd *  10;
         particleZ[i] = nrnd *  10;
      }
   }
   
   time = klock(0);
   dt = time-oldtime;
   oldtime = time;   

   cls(0); clz(1e32);

   // Draw both sides of billboard quads.
   // enable alpha test so sprites become 100% transparent
   glCullFace(GL_NONE);
   glEnable(GL_DEPTH_TEST);
   glEnable(GL_ALPHA_TEST);
   
   // Draw floor
   setcol(511,511,511);
   glBegin(GL_QUADS);
   glVertex(-20,0,-20);
   glVertex(20,0,-20);   
   glVertex(20,0,20);
   glVertex(-20,0,20);


/*
// http://www.gamedev.net/community/forums/topic.asp?topic_id=511308
Vector screenToWorld(float x, float y)
{
    Vector p;
    p = position;
    p +=  right * ((x / screen_width) - 0.5f)  * wcs_width;
    p +=  up    * ((y / screen_height) - 0.5f) * wcs_height;

    return p;
}

Vector worldToScreen(Vector p)
{  
    Vector s;
    s.x = ((p - position).dotProduct(right) / wcs_width) + 0.5f;
    s.y = ((p - position).dotProduct(up) / wcs_height) + 0.5f;
    s.z = ((p - position).dotProduct(dir)); // distance from camera
    return s;
}

*/

   for(i=0;i<MAXPARTICLES;i++)
   {
      x = particleX[i] - posx; 
      y = particleY[i] - posy; 
      z = particleZ[i] - posz;
      
      nx = x * mat[0] + y * mat[1] + z * mat[2]; // dot with Right
      ny = x * mat[3] + y * mat[4] + z * mat[5]; // dot with Down
      nz = x * mat[6] + y * mat[7] + z * mat[8]; // dot with Forwards
      // if behind screen, discard
      if(nz <= 0.5) continue;
      

      setcol(0xffffff); 
      setfont(8*20/nz,12*20/nz, -1);
      
      f = xres/2/nz;
      moveto(nx*f+xres/2, ny*f+yres/2); 
      printf("%g",i);

   }
   

   //setcam(sin(cang)*dst,-5,cos(cang)*dst,cang,0);
   playercontrols();
}

// Camera and movement code taken from /games/
//Handle input and player movement
playercontrols()
{
   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

   f = .1;
   if (keystatus[0x2a]) f /= 4;
   if (keystatus[0x36]) f *= 4;
   vx = (keystatus[32]-keystatus[30])*f; //D-A
   vy = (keystatus[17]-keystatus[31])*f; //W-S  
   vz = (keystatus[0x52]-keystatus[0x9d])*f; //KP0-RCtrl
   
   
   ang2mat(posh,posv,mat); // Convert angles to rotation matrix
   
   // find new position
   posx += mat[0]*vx + mat[3]*vz + mat[6]*vy;
   posy += mat[1]*vx + mat[4]*vz + mat[7]*vy;
   posz += mat[2]*vx + mat[5]*vz + mat[8]*vy; 
   
   // mousespeed values are tweaked for 60 fps
   mouseSpeedX = (mousx - oldMouseX) * 0.01;
   mouseSpeedY = (mousy - oldMouseY) * 0.01;
   oldMouseX = mousx;
   oldMouseY = mousy;
   
   if(bstatus==1)
   {
      posh += mouseSpeedX;
      posv += mouseSpeedY;
   }
   // Right,down,forwards unit vectors.
   setcam(posx,posy,posz,
          mat[0],mat[1],mat[2],
          mat[3],mat[4],mat[5],
          mat[6],mat[7],mat[8]);
          

}
/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}