struct vec
{
   x,y,z;
}

struct camera_t
{
   vec position;
   vec lookAt;
   vec lookUp;
}

struct camera_t2
{
   vec pos;
   horiz_angle;
   verti_angle;
}
static mat[9];

struct ray_t
{
   vec origin;
   vec dir;
}

struct sphere_t
{
   vec center;
   vec diffuseColor;
   double radius;
}

struct light_t
{
   vec pos;
}

struct Intersection_t { 
   vec normal;
   vec point;
   ray_t ray;
   sphere_t sphere;
   double t;
}

// Light
static light_t light;
static camera_t camera;

enum{MAX_SPHERES = 6}
static sphere_t sphere_list[MAX_SPHERES];

static camera_t2 cam2;
()
{
   cls(0);
   t = klock(0);
   a = t * 2;
   set( light.pos, 3*cos(a), 3*sin(a), 15 );
   //set( light.pos, cam2.pos );
   
   if (numframes == 0 )
   {
      for(i=0; i < MAX_SPHERES; i++)
      {
          a = i / MAX_SPHERES * 2 * PI;
          set(sphere_list[i].center, 3*cos(a), 1*sin(4*a),  3*sin(a) + 15 );
          set(sphere_list[i].diffuseColor, rnd,rnd,rnd ); //192/255, 190/255, 2/255 );
          sphere_list[i].radius = 0.5 + rnd*0.5;
      }

   }
   set(sphere_list[0].center, light.pos );
   set(sphere_list[0].diffuseColor, 1,1,1 ); 
   sphere_list[0].radius = 0.1;

    playerControls( cam2 );

    enum{RESX = 320}
    width = RESX;
    height = 160;
 
    // Vertical and horizontal field of view
    hfov = PI/3.5; // pi/3.5 = 51,428
    vfov = hfov * height/width;
		
 		//vfov = pi/3.5; //51.428 / 180. * PI;
		//hfov = vfov * width/height;
 
    // Pixel width and height
    pw = 2.0 * tan( hfov/2.0 ) / width;
    ph = 2.0 * tan( vfov/2.0 ) / height;    
 
    // camera   
    
    set( camera.position, cam2.pos );
    set( camera.lookAt, cam2.pos.x+mat[6], cam2.pos.y+mat[7], cam2.pos.z+mat[8] );
    set( camera.lookUp, 0,1,0 );
     

    // set up the coordinate system
    vec n;
    vecsub(n, camera.position, camera.lookAt);
    normalize(n);
    
    vec u;
    veccross(u, camera.lookUp, n);
    normalize(u);
    
    vec v;
    veccross(v, n, u);
    normalize(v);
    
    vec vpc; // view port center
    vecsub(vpc, camera.position, n);
 
    static widbuf[RESX];
        for (y=0; y<height; y++)
        {
        for (x = 0; x < width; x++ )
        {
            
            vec uscaled;
            vecScalar( uscaled, u, (x-width/2.0)*pw );
            vec vscaled;
            vecScalar( vscaled, v, (y-height/2.0)*ph );
            
            vec rayPoint;
            set( rayPoint, vpc.x+uscaled.x+vscaled.x,
                           vpc.y+uscaled.y+vscaled.y,
                           vpc.z+uscaled.z+vscaled.z );

            vec rayDir;
            vecsub( rayDir, rayPoint, camera.position );
            normalize( rayDir );
            
            ray_t ray;
            set( ray.origin, camera.position );
            set( ray.dir, rayDir ); 
            
            static intersection_t isects[MAX_SPHERES];
            num_isects = 0;
            for(i=0; i < MAX_SPHERES; i++)
            {
               if ( castRay( ray, sphere_list[i], isects[num_isects] ) == 1 )
               {
                  num_isects++; // save next
               }
            } 
                       
            col = 0;
            if (num_isects == 0)
            {
               col = rgb(127,127,127);
            }else{
               
               mind = 1e32;
               closest_idx = -1;
               for(i=0; i<num_isects; i++)
               {
                  if ( isects[i].t < mind )
                  {
                     closest_idx = i;
                     mind = isects[i].t;
                  }
               }
               

               col = colorAt( isects[closest_idx] ) ;
            }
            //setcol(col);
            //setpix(x,y);
            widbuf[x] = col;
         }
            sethlin( 0, y, widbuf, RESX );
         }
}

colorAt( intersection_t isect )
{
   vec ambientLight;
   set( ambientLight, 0.1, 0.1, 0.1 );

    //let closest = List.maxBy(fun i -> i.t) intersections
    vec kd = isect.sphere.diffuseColor;
    vec Ia = ambientLight;
    vec L;
    vecsub(L, light.pos, isect.point);
    normalize(L);
    
    double Id = max(0.0, dot(L, isect.normal));
    vec V;
    vecsub(V, camera.position, isect.point);
    vec H;
    vecadd(H, L, V);
    normalize(H);
    
    double Is = pow( max(0.0, dot(H,isect.normal)), 100.0);
    vec ambient;
    vecScalar(ambient, kd, Ia);
    vec diffuse;
    vecScalar(diffuse, kd, Id);
    
    vec specular;
    set(specular, 1.0,1.0,1.0 );
    vecScalar(specular, specular, Is );
    
    return rgb( 255*(ambient.x + diffuse.x + specular.x) ,
                255*(ambient.y + diffuse.y + specular.y) ,
                255*(ambient.z + diffuse.z + specular.z) );
}    

/// Get the position of a ray at a given time
pointAtTime (vec pt, ray_t ray, time )
{
   vecscalar( pt, ray.dir, time );
   vecadd( pt, pt, ray.origin );
}

castRay( ray_t ray, sphere_t sphere, Intersection_t isects )
{
   vec s;
   vecsub( s, ray.origin, sphere.center );
   vec rayDir;
   set( rayDir, ray.dir );
   normalize( rayDir );
   
   sv = dot(s, rayDir );
   ss = dot(s,s);
   discr = sv*sv - ss + sphere.radius^2;
   if ( discr < 0.0 ) 
      return 0;
   else 
   {
      sqDsc = sqrt(discr);
      t1 = -sv + sqDsc;
      t2 = -sv - sqDsc;
      
      t = max(t1,t2);
      /*
      vec ray_t1;
      vec ray_t2;
      pointAtTime( ray_t1, ray, t1 );      
      pointAtTime( ray_t2, ray, t2 );

      vec n1;
      vec n2;
      vecsub( n1, sphere.center, ray_t1 );
      vecsub( n2, sphere.center, ray_t2 );
      normalize(n1);
      normalize(n2);
      */
      
      vec ray_hit;
      pointAtTime( ray_hit, ray, t );    
      
      vec normal;
      vecsub( normal, sphere.center, ray_hit );
      normalize(normal);
      
      isects.normal = normal;
      isects.point = ray_hit;
      isects.ray = ray;
      isects.sphere = sphere;
      isects.t = t;

      return 1;
   }
   return 1;
}


vecscalar( vec out, vec a, s )
{
   out.x = a.x * s;
   out.y = a.y * s;
   out.z = a.z * s;
}

vecadd( vec out, vec a, vec b)
{
   out.x = a.x + b.x;
   out.y = a.y + b.y;
   out.z = a.z + b.z;
}

vecsub( vec out, vec a, vec b)
{
   out.x = a.x - b.x;
   out.y = a.y - b.y;
   out.z = a.z - b.z;
}

veccross( vec out, vec a, vec b)
{
   out.x = a.y * b.z - a.z * b.y;
   out.y = a.z * b.x - a.x * b.z;
   out.z = a.x * b.y - a.y * b.x;
}


dot( vec a, vec b )
{
   return a.x * b.x + a.y * b.y + a.z * b.z;
}

set( vec out, vec a )
{
   out.x = a.x;
   out.y = a.y;
   out.z = a.z;
}

set( vec a, x, y, z )
{
   a.x = x;
   a.y = y;
   a.z = z;
}

length( vec v )
{
   return sqrt( dot(v,v) );
}

normalize( vec v )
{
   l = length(v);
   if( l ){
      v.x /= l; 
      v.y /= l; 
      v.z /= l;
   }
}

// Camera and movement code taken from /games/
//Handle input and player movement
playercontrols(camera_t2 cam)
{
   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

   f = 0.1;
   if (keystatus[0x2a]) f /= 4;
   if (keystatus[0x36]) f *= 4;
   vx = (keystatus[30]-keystatus[32])*f; //D-A
   vy = (keystatus[17]-keystatus[31])*f; //W-S  
   vz = (keystatus[0x52]-keystatus[0x9d])*f; //KP0-RCtrl
    
   ang2mat(cam.horiz_angle, cam.verti_angle, mat); // Convert angles to rotation matrix
   
   // find new position
   cam.pos.x += mat[0]*vx + mat[3]*vz + mat[6]*vy;
   cam.pos.y += mat[1]*vx + mat[4]*vz + mat[7]*vy;
   cam.pos.z += mat[2]*vx + mat[5]*vz + mat[8]*vy; 
   // mousespeed values are tweaked for 60 fps
   mouseSpeedX = (mousx - oldMouseX) * 0.01;
   mouseSpeedY = (mousy - oldMouseY) * 0.01;
   oldMouseX = mousx;
   oldMouseY = mousy;
   if(bstatus==1)
   {
      cam.horiz_angle -= mouseSpeedX;
      cam.verti_angle += mouseSpeedY;
   }
   
}
/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}