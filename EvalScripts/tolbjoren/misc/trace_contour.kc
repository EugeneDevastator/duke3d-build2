enum{GRID_W = 64, GRID_H = 64}
static griddata[GRID_W * GRID_H];
static processed[GRID_W][GRID_H];

static hc = 0.5;

struct point{
   x,y;
}

enum{MAX_PTS=1024}
static point pts[MAX_PTS];
static numpts=0;

()
{
   cls(0);

   if(numframes==0)
   {
      for(i=0; i<GRID_W; i++)
      {
         for(j=0; j<GRID_H; j++)
         {
            v = noise(5*i/GRID_W, 5*j/GRID_H);
            setgrid( i,j, v );
         }
      }
   }
      
   drawField();
   
   numpts=0;
   create_contours1();
   
   for(i=0; i<numpts; i++){
      if( i==0) moveto(pts[i].x,pts[i].y);
      else lineto(pts[i].x,pts[i].y);
   }
   
   setfont(12,16);
   moveto(0,0);
   printnum(numpts);
}

grid(i,j)
{
   return griddata[i*GRID_H + j];
}

setgrid(i,j,val)
{
   griddata[i*GRID_H + j] = val;
}

create_contours1()
{
   n = GRID_H;
   m = GRID_W;

   for(j=0; j<n; j++)
   {
      for(i=0; i<m; i++){
         L = i+1;
         P = j+1;
         test(i,j,L,P);
      }
   }
}

test(i,j,L,P)
{
   if( grid(i,j) < hc < grid(L,j) || grid(i,j) > hc > grid(L,j) )
   {
    x1 = i; y1 = j;
	x2 = L; y2 = j;
	z1 = grid(i,j);
	z2 = grid(L,j);
	h = (hc-z1)/(z2-z1);
	x = x1 + (x2-x1) * h;
	y = y1 + (y2-y1) * h;
	
   }
   else
   {
      
   }
}

create_contours(hc)
{
   Nx = GRID_W;
   Ny = GRID_H;
   
   // todo: dy dx?
   
   j=1;
   for(i=0; i<Nx; i++)
   {
      if( grid(i,j) < hc <= grid(i+1,j) )
      {
         trace(i,j,4);
      }
   }
   
   // boundry x = dx*Nx
   i=Nx;
   for(j=0; j<Ny; j++)
   {
      if( grid(i,j) < hc <= grid(i,j-1) ){
         trace(i,j,1);
      }
   }
   

   // boundry y = dy*Ny
   j=Ny;
   for(j=Ny; j >=2; j--)
   {
      if( grid(i,j) < hc <= grid(i-1,j) ){
         trace(i,j,2);
      }
   }


   // boundry x = 0
   j=1;
   for(j=Ny; j >=2; j--)
   {
      if( grid(i,j) < hc <= grid(i,j-1) ){
         trace(i,j,3);
      }
   }
   
   for(i=0; i<Nx; i++)
   {
      for(j=0; j<Ny; j++){
         processed[i][j] = 0;
      }
   }
   
   // Check for closed contours
   for(i=1; i<Nx; i++){
      for(j=1; j<Ny; j++){
         if( grid(i,j) < hc <= grid(i,j+1) )
         {
            // check if it was allready processed! TODO?
            if( !processed[i][j] ){
               processed[i][j] = 1;
               trace(i,j,4);
            }
         }
      }
   }

}


trace(i,j,entry_side)
{
//     2*
//* -----
//3 |   |
//  |   | 1
//  ----- *
//  *4
   
   if(numpts > MAX_PTS) return;
   
   delta_x = xres / GRID_W;
   delta_y = yres / GRID_H;

   if(entry_side==4)
   {
      if( i>=GRID_W-1) exit;
      if( j>=GRID_H-1) exit;
      
      intersect1 = grid(i,j+1) < hc <= grid(i+1,j-1);
      intersect2 = grid(i,j+1) < hc <= grid(i+1,j);
      intersect3 = grid(i,j+1) < hc <= grid(i,j-1);;

      // Check intersection with side 1
      if( intersect1 )
      {
         pts[numpts].x = i*delta_x;
         pts[numpts].y = j*delta_y;
         numpts++;
         
         i = i+1;
         trace(i,j,entry_side);
      }
      if( intersect2 )
      {
         pts[numpts].x = i*delta_x;
         pts[numpts].y = j*delta_y;
         numpts++;
         
         j = j+1;
         trace(i,j,entry_side);
      }      
      if( intersect3 )
      {
         pts[numpts].x = i*delta_x;
         pts[numpts].y = j*delta_y;
         numpts++;
               

         i = i-1;
         trace(i,j,entry_side);
      }
   }
   else if(entry_side==1)
   {
   
      intersect1 = 0;
      intersect2 = 0;
      intersect3 = 0;
      intersect4 = 0;

      // Check intersection with side 1
      if( intersect2 )
      {
         i = i-1;
         j = j+1;
         trace(i,j,entry_side);
      }
      if( intersect3 )
      {
         i = i+2;
         trace(i,j,entry_side);
      }      
      if( intersect4 )
      {
         i = i-1;
         j = j-1;
         trace(i,j,entry_side);
      }

   }
   else if(entry_side==2)
   {
   }
   else if(entry_side==3)
   {
   }
}


drawField()
{
   enum{S=64};
   static pixels[S][S]; 
   if(numframes==0)
   {
      glCullFace(GL_BACK); 
      glDisable(GL_ALPHA_TEST);
      glDisable(GL_DEPTH_TEST);
   }

   xRatio = GRID_W/(S);
   yRatio = GRID_H/(S); 

   for(x=0; x<S; x++)
   {
      for(y=0; y<S; y++)
      {
         dx=0;dy=0;
         //steep = getFieldStrength(x*xRatio,y*yRatio,dx,dy);
         steep = grid(x*xRatio, y*yRatio);
         // change coloring with a palette gradient from -e to e
         steep = abs(steep);
         //c = 60*10.0/log(10*steep);
         //c = 36*exp(steep*1e5);
         //c = 36*log(steep*1e5);
         //c = 360*steep;
         //c = min(359000, max(-1000,steep));
         //pixels[y][x] = hsv_to_rgb(c,1,1);
         
         v = 255*steep;
         pixels[y][x] = rgb(v,v,v);   
      }
   }
   
   b = glsettex(pixels,S,S);
   setcol(0xffffff);     
   texquad(0,0,xres,yres);
   glremovetex(b);
}

hsv_to_rgb(h,s,v){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else{
      hf = h / 60.0; i  = floor( hf ); f  = hf - i;
      pv  = v * ( 1 - s ); qv  = v * ( 1 - s * f ); tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;}  if(i==1){r=qv; g=v; b=pv;}  if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;}  if(i==4){r=tv; g=pv; b=v;}  if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;} if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255); g=int(g*255); b=int(b*255);
   return r*2^16 + g*2^8 + b; 
}



texquad(x,y,width,height)
{
   glBegin(GL_COMPLEX);
   glTexCoord(0,0);glVertex(x,y);
   glTexCoord(1,0);glVertex(x+width,y);
   glTexCoord(1,1);glVertex(x+width,y+height);
   glTexCoord(0,1);glVertex(x,y+height);
   glEnd();
}
