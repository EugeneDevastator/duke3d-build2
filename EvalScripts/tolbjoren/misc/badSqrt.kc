struct Particle
{
   x,y,dx,dy;
   color;
   life;
};

static Particle pts[1024];
static time;
static dt;
()
{
   now = klock(0);
   dt = now - time;
   time = now;

   //if(numframes==0) 
   cls(0);
   
      r=0; g=0; b=0;
      f = 0.9;
      enum{BUFLEN = 32}
   //if( numframes % 20 == 0)
   for(i=0; i<32; i++)
   {
      static buf[BUFLEN];
      gethlin( 0, i, buf, BUFLEN );
      for(j=0; j<256; j++)
      {
         r = buf[j] / 2^16 % 256;
         g = buf[j] / 2^8 % 256;
         b = buf[j] % 256;
         buf[j] = rgb(r*f,g*f,b*f);
      }
      sethlin( 0, i, buf, BUFLEN );
   /*
   for(j=0; j<256; j++)
   {
      
      getpix(j,i,r,g,b);
      setcol(r*f, g*f, b*f);
      setpix(j,i);
   }
   */
   }
   
   moveto(0,0);
   num = 2;

   tim1 = klock(0);
   for(i=0; i<1000; i++)
   {
   builtin = sqrt( num );
   
   }
   btim = klock(0) - tim1;
   

   tim2 = klock(0);
   for(i=0; i<1000; i++)
   {
   myGuess =  badSqrt(num);
   
   }
   myTim = klock(0) - tim2;
   

   setcol(0xffffff);   
   printf("myGuess = %g\n", myGuess );
   printf("builtin = %g\n", builtin );
   printf("diff = %g\n", builtin-myGuess );
   
   printf("\n%g\n",myTim);
   printf("%g\n",btim);
   
   printf("\n%g", 1/dt);
   
   for(i=0; i<1024; i++)
   {
      //c = (pts[i].life - time)/5;
      //c *= 255;
      //setcol(c,c,c);
      setcol( pts[i].color );
      

      moveto(pts[i].x, pts[i].y);
      lineto(pts[i].x+pts[i].dx*5, pts[i].y + pts[i].dy*5);
      
      pts[i].x += pts[i].dx; 
      pts[i].y += pts[i].dy; 
      
 pts[i].dx += noise( 5*pts[i].x / xres, 5*pts[i].y / xres ) / 10;
 pts[i].dy += noise( 5*pts[i].y / yres, 5*pts[i].x / xres ) / 10;

      if( pts[i].life  < time )
      {
         pts[i].color = hsv_to_rgb(rnd*360,1,1);
         pts[i].life = time + 5*rnd;
         pts[i].x = mousx; 
         pts[i].y = mousy;
        
         pixelsPerSecond = 50;
         speed = pixelsPerSecond * dt;
         pts[i].dx = nrnd * speed; 
         pts[i].dy = nrnd * speed;
         if( abs(pts[i].dx) < 0.01 && abs(pts[i].dx) < 0.01 )
         {
            pts[i].dx = 1 * speed;
            pts[i].dy = 0 * speed;
         }
         
         rlen = 1.0/Sqrt( pts[i].dx^2 + pts[i].dy^2 );
         pts[i].dx *= rlen;
         pts[i].dy *= rlen;
      }
   }
   




}

badSqrt(x)
{
   return recurSqrt(x,10,0);
}

recurSqrt(x,guess,iters)
{
   if( iters >= 20 ) return x/guess;
   
   guess = (guess+(x / guess) )/2;
   iters++;
   return recurSqrt(x,guess,iters);
}



hsv_to_rgb(h,s,v){ 
   // expects 360deg and 1,1 hue sat max
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
   return r*2^16 + g*2^8 + b; 
}