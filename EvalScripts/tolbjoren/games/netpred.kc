static msg[16], count[16];

// Player position
static posx[16];
static posy[16];
static posz[16];

static ballx[16];
static bally[16];
static ballz[16];
static ballvx[16];
static ballvy[16];
static ballvz[16];
// Camera angles
static posh = 0; // left right
static posv = -1.57;


// Network datadescription codes:   
static msg_description_code = 0;
static netPlayerCoord  = 1;
static netBallCoord = 2;
static netBallVel = 3;
static netPing = 4;
static netPong = 5;
// network datatype enumeration
static net_X = 1;
static net_Y = 2;
static net_Z = 3;

static time, timer, sendRatePerSec;
static dt, oldtime;
static pingStart[16], pingTime[16];
static pingsSent = 0;
static pongsRecvd = 0;
static canPing[16];

static sphRadi = 1;
//#define FRAMERATE_LIMITER
//#define USE_LERP
//#define USE_VEL
() 
{  
   sendRatePerSec = 60;

   if (numframes==0)
   {
      posy[net_me] = 0.9;
      
      for(i=0; i<16; i++)
      {
         canPing[i] = 1;
      }
   }
   
   
   time = klock();
   dt = time - oldtime;
   oldtime = time;

   if(time > timer)
   {
      timer = time + 1/sendRatePerSec;

      sendHeadPos();
      sendvel();
     
   }
     
   sendPing(); 
   recvData();
   

   cls(0); 
   clz(1e32);
   
   if (net_me==0) // SERVER
   {
      ox = ballx[net_me];   
      oy = bally[net_me];
      oz = ballz[net_me];

      r = 0.9;
      ballx[net_me] = cos( time ) * r;
      bally[net_me] = -0.9;
      ballz[net_me] = sin( time ) * r;
      
      /*
      ballvx[net_me] = r*-sin( time );
      ballvy[net_me] = 0.0;
      ballvz[net_me] = r*-cos( time );
      */

      ballvx[net_me] = ballx[net_me] - ox;
      ballvy[net_me] = bally[net_me] - oy;
      ballvz[net_me] = ballz[net_me] - oz;

   }else
   {
      ox = ballx[net_me];   
      oy = bally[net_me];
      oz = ballz[net_me];   

      r = 3;
      ballx[net_me] = r*(mousx-xres/2)/xres/2;
      bally[net_me] = -0.9;
      ballz[net_me] = r*(mousy-yres/2)/yres/2;
      
      ballvx[net_me] = ballx[net_me] - ox;
      ballvy[net_me] = bally[net_me] - oy;
      ballvz[net_me] = ballz[net_me] - oz;
   }

   draw();
   setfont(6,10);
   moveto(0,0);
   setcol(255,255,255);
   
   for(i=0; i<net_players; i++)
   {
      if( i==net_me ) continue;
      printf("ping to player %g = %.f ms\n", i, pingTime[i]);
   }
   
   setfont(6,10);
   moveto(0,30);
   printf("%g pings sent\n", pingssent);
   printf("%g pongs recvd\n", pongsrecvd);
   //printf("klock, numframes/100 -> %g, %g\n", time, numframes/60);
   //printf("network send/recv rate = %g times per sec\n", sendRatePerSec );
   printf("you are player = %g of %g \n", net_me+1, net_players );
 
   //sendBogus();   
   #ifdef FRAMERATE_LIMITER
   
   while (klock(0)<numframes/60)
   { 
      // busy wait and limit fps
      //sleep(1);
      
   } 
   #endif
}

sendPing(){
   for(i=0; i<net_players; i++)
   {
      if( i==net_me) continue;
      
      if (canPing[i])
      {
         net_send(i, netPing); 
         pingStart[i] = klock(0);
         pingsSent++;
         canPing[i] = 0;
      }
   }
}

sendHeadPos()
{
   net_send(NET_ALLELSE,netBallCoord); 
   net_send(NET_ALLELSE,ballx[net_me]);
   net_send(NET_ALLELSE,bally[net_me]);
   net_send(NET_ALLELSE,ballz[net_me]);
}
sendvel()
{
   net_send(NET_ALLELSE,netBallVel); 
   net_send(NET_ALLELSE,ballvx[net_me]);
   net_send(NET_ALLELSE,ballvy[net_me]);
   net_send(NET_ALLELSE,ballvz[net_me]);
}


// Taken from evaldraw net demo:
// This loop reads a single net_recv message and decides if it
// 1.   is a beginning of a datastream.
//      I call the first val recieved the "net_description_code", at this point count is 0
// 2.   when the descrition code is read, go into one of the if-sentances
//      that handles a certain code.
// 3.   for instance. if the following packets are mousecoords
//      then increase count from 0 to 1
//      on the next net_recv val contains mx
//      increase count again
//      now on the next net_recv val contains my
//      since we now have counted 2 values (mx,my) we got all we need
//      reset count to 0 for the next data, be it more
//      mousecoordinates or a color change.

recvData()
{
   from = 0;
   val = 0;
   while(net_recv(&from,&val))
   {
      if( from == NET_ME )
      {
      }else{
   
         // The first message, number 0 is the descriptor.
         if (count[from] == msg_description_code) 
            msg[from] = val; // remember the type of message.
               
         if (msg[from] == netPlayerCoord) //comparing it to netCoord must be wrong...
         {
            if (count[from] == 1) posx[from] = val;
            if (count[from] == 2) posy[from] = val;
            if (count[from] == 3) posz[from] = val;
            
            count[from]++; //get next message
            
            // if we have read XYZ coords
            // then reset count so that the next message can
            // be read into val.
            if (count[from] > 3) count[from] = msg_description_code;
         }         

         else if (msg[from] == netBallCoord) //comparing it to netCoord must be wrong...
         {
            if (count[from] == 1) ballx[from] = val;
            if (count[from] == 2) bally[from] = val;
            if (count[from] == 3) ballz[from] = val;
            
            count[from]++; //get next message
            
            // if we have read XYZ coords
            // then reset count so that the next message can
            // be read into val.
            if (count[from] > 3) count[from] = msg_description_code;
         }  
         else if (msg[from] == netBallVel) //comparing it to netCoord must be wrong...
         {
            if (count[from] == 1) ballvx[from] = val;
            if (count[from] == 2) ballvy[from] = val;
            if (count[from] == 3) ballvz[from] = val;
            
            count[from]++; //get next message
            
            // if we have read XYZ coords
            // then reset count so that the next message can
            // be read into val.
            if (count[from] > 3) count[from] = msg_description_code;
         }  
         else if (msg[from] == netPing) //comparing it to netCoord must be wrong...
         {
            net_send(from,netPong);
            count[from]++; //get next message
            
            // if we have read XYZ coords
            // then reset count so that the next message can
            // be read into val.
            if (count[from] > 0) count[from] = msg_description_code;
         }  
         else if (msg[from] == netPong) //comparing it to netCoord must be wrong...
         {
            pingTime[from] = (klock(0) - pingStart[from])/2.0 * 1000.0 ;
            count[from]++; //get next message
            pongsRecvd++;
            canPing[from] = 1;
            
            // if we have read XYZ coords
            // then reset count so that the next message can
            // be read into val.
            if (count[from] > 0) count[from] = msg_description_code;
         }  

      }

   }
   
}

sendBogus()
{
   // if F-key then send bogus data to a random player
   if (keystatus[0x21]) //'F' up sync; tests Ctrl+Enter
  {
     moveto(0,0);
     setcol(255,255,255);
     printf("f-ing up\n");
      net_send(int(net_players*rnd),nrnd*1e3);
      
   net_send(NET_ALLELSE,netBallVel); 
   net_send(NET_ALLELSE,2*(rnd-0.5)*0.7);
   net_send(NET_ALLELSE,2*(rnd-0.5)*0.1);
   net_send(NET_ALLELSE,2*(rnd-0.5)*0.7);

   }
}

draw()
{
   glEnable(GL_DEPTH_TEST);
   updatePlayer();
      
   DrawShape();
   
  

   // draw player tails
   for(i=0;i<net_players;i++)
   {
      x = ballx[i];
      y = bally[i];
      z = ballz[i];
   
      if( i!=net_me )
      {
      
         #ifdef FRAMERATE_LIMITER
         spd = dt*1000.0/sendRatePerSec;
         #else
         spd = 1;
         #endif
         
         
         #ifdef USE_LERP
         t = time/timer;
         x = lerp(ballx[i], ballx[i]+ballvx[i],t);
         y = lerp(bally[i], bally[i]+ballvy[i],t);
         z = lerp(ballz[i], ballz[i]+ballvz[i],t);
         #else
         
            #ifdef USE_VEL
            ballx[i] += ballvx[i] * spd;
            bally[i] += ballvy[i] * spd;
            ballz[i] += ballvz[i] * spd; 
            #endif
         #endif
      }   
      c = hsv_to_rgb( i/net_players*360 % 360, 1,1);
      setcol(c);
      drawsph(x,y,z,0.1);
   }   
}

DrawShape()
{
   enum{dim1=32, dim2=16}
   static px[dim1][dim2];
   static py[dim1][dim2];
   static pz[dim1][dim2];
   static color[dim1][dim2];

   if(numframes==0)
   {
      //#define WHITE_TEX
      #ifdef WHITE_TEX
         static tex[2][2];
         c = rgb(200,200,200);
         tex[0][0] = c;
         tex[0][1] = c;
         tex[1][0] = c;
         tex[1][1] = c;
         handle=glsettex(tex,2,2);
      #else 
         handle=glsettex("wood.png");
      #endif
   }

   if(1)
   {
      generateGeometry = 0;
      deltau = 1 / (dim1-1);
      deltav = 1 / (dim2-1);  
      startu = 0;
      startv = 0;  
      scaler = 1;

      pts = 0;
      for(i=0; i<dim1; i++)
      for(j=0; j<dim2; j++)
      {     
         u = startu + i * deltau;
         v = startv + j * deltav;
         x=0; y=0; z=0;
shapeType=0;

         if( shapeType==0) cylinder(u,v,x,y,z,sphRadi);
         if (shapeType==1) torus(u,v,x,y,z,1,.5);
         if(shapeType==2) sphere(u,v,x,y,z,sphRadi);
         
         px[i][j] = x*scaler; py[i][j] = y*scaler; pz[i][j] = z*scaler;
         color[i][j] = hsv_to_rgb( pts/(dim1*dim2) * 360 % 360, 1,1);
         pts++;
      }
   }
   
   sc = 16;
   
   if( shapeType==0)
   {
      draw_floor_ceil(sphRadi);
      draw_floor_ceil(-sphRadi);
   }
   

   glCullface(GL_FRONT);
   for(i=0; i<dim1-1; i++)
   {
      //#define TRI // slower than complex
      #ifdef TRI
      glBegin(GL_TRIANGLE_STRIP);
      for(j=0; j<dim2; j++)  
      {
         setcol( color[i][j]  );
         glTexCoord( sc*i/dim1, sc*j/dim2);
         glVertex( px[i][j], py[i][j], pz[i][j] );
         glTexCoord( sc*(i+1)/dim1, sc*j/dim2);
         glVertex( px[i+1][j], py[i+1][j], pz[i+1][j] );     
      } 
      glEnd();
      #else
         // when running unbounded I get 4 Mcc with gl_complex and 7-8 with gl_triangle_strip
         
         for(j=0; j<dim2; j++)  
         {
            glBegin(GL_COMPLEX);
            setcol(207,207,207);
            //setcol( color[i][j]  );
            
            glTexCoord( sc*i/dim1, sc*j/dim2);
            glVertex( px[i][j], py[i][j], pz[i][j] );
            glTexCoord( sc*(i+1)/dim1, sc*j/dim2);
            glVertex( px[i+1][j], py[i+1][j], pz[i+1][j] );   
            
            // Lazy indicing using j++ and j--
            j++;
            glTexCoord( sc*(i+1)/dim1, sc*j/dim2);
            glVertex( px[i+1][j], py[i+1][j], pz[i+1][j] );   
            
            glTexCoord( sc*i/dim1, sc*j/dim2);
            glVertex( px[i][j], py[i][j], pz[i][j] );   
            j--;
            
            glEnd();
         } 
      #endif
   }
   
   //#define DEBUG_NORMALS
   #ifdef DEBUG_NORMALS
   SIZ = 32;
   min = -sphRadi*1.2;
   max = sphRadi*1.2;
   range = max-min;

   for(i=0; i<=SIZ; i++){
      x = min + range*i/SIZ;  
      
      for(j=0; j<=SIZ; j++){
         y = min + range*j/SIZ;   
 
         for(k=0; k<=SIZ; k++){
            z = min + range*k/SIZ;
 
            if( !collisionShape(x,y,z) && shape(x,y,z) )
            {            
               nx=0; ny=0; nz=0;
               gradient(x,y,z,nx,ny,nz);
               len = sqrt(nx^2+ny^2+nz^2);
               nx/=len;
               ny/=len;
               nz/=len;
               r = 128 + nx*128;
               g = 128 + ny*128;
               b = 128 + nz*128;
               setcol(r,g,b); drawsph(x,y,z,.02);
               s = 0.1;
               setcol(255,255,255); moveto(x,y,z); lineto(x+-nx*s,y+-ny*s,z+-nz*s);
               
            }
         }
      }
   }
   #endif
}

cylinder(u,v,&x, &y, &z, r){
   s = u*2*PI;
   t = v*2*PI;
   x = r * cos(s);
   y = r * cos(t);
   z = r * sin(s);
}
torus(u,v,&x,&y,&z,bigr,r){
   u*=2*PI;
   v*=2*PI;
   x = (bigR+r*cos(v)) * cos(u) ;
   y = r*sin(v);
   z = (bigR+r*cos(v)) * sin(u);
}
sphere(u,v,&x,&y,&z,r){
   u*=2*PI;
   v*=PI;
   x = r * sin(u) * sin(v);
   y = r * cos(v);
   z = r * cos(u) * sin(v);
}

lerp(a,b,t)
{
   return a+(b-a)*t;
}

// Camera and movement code taken from /games/
updatePlayer()
{
   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

spd=0.1;
   left_right = (keystatus[32]-keystatus[30])*spd;
   vx = left_right ;
   vy = (keystatus[17]-keystatus[31])*spd; //W-S;
   vz = 0.0  ;

   
   static mat[9]; 
   ang2mat(posh,posv,mat); // Convert angles to rotation matrix
   
   // find new position
   tx = mat[0]*vx + mat[3]*vz + mat[6]*vy;
   ty = mat[1]*vx + mat[4]*vz + mat[7]*vy;
   tz = mat[2]*vx + mat[5]*vz + mat[8]*vy;
   posx[net_me] += tx;
   posy[net_me] += ty;
   posz[net_me] += tz;

   // mousespeed values are tweaked for 60 fps
   #define NOT_READMOUSE
   #ifdef NOT_READMOUSE
      mouseSpeedX = (mousx - oldMouseX) * 0.01;
      mouseSpeedY = (mousy - oldMouseY) * 0.01;
      oldMouseX = mousx;
      oldMouseY = mousy;
   #else
      mx=0;
      my=0;
      readmouse(mx,my);
      mousespeedx = mx * 0.01;
      mousespeedy = my * 0.01;
   #endif
   
   #ifdef NOT_READMOUSE
      if(bstatus==1)
   #endif
   {
      posh -= mouseSpeedX;
      posv += mouseSpeedY;
   }
   
turnspeed = 0.1;
   
   // Right,down,forwards unit vectors.
   setcam(posx[net_me],posy[net_me],posz[net_me],
          mat[0],mat[1],mat[2],
          mat[3],mat[4],mat[5],
          mat[6],mat[7],mat[8]);
}
/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}

hsv_to_rgb(h,s,v){ 
   // expects 360deg and 1,1 hue sat max
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   r=int(r*255);
   g=int(g*255);
   b=int(b*255);
   return rgb(r,g,b); 
}


draw_floor_ceil(y)
{
   setcol(255,0,0);
   drawcone(-sphRadi,y,0., 0.05,
             sphRadi,y,0., 0.05);

   setcol(0,0,255);
   drawcone(.0,y,-sphRadi, 0.05,
            .0,y,sphRadi, 0.05);

   setcol(0,255,0);
   drawcone(-.5,y,-.5, 0.01,
            0,y,0, 0.01);
   drawcone(-.5,y,0, 0.01,
            0,y,-.5, 0.01);   

   glcullface(GL_NONE);
   setcol(255,255,255);
      
      
   segs = 16;
   minim = -1;
   maxim = 1;
   range = maxim - minim;
   sc = 10;
   
   for(i=0; i<segs; i++)
   {
      for(j=0; j<segs; j++)
      {
   
         u0 = i/segs;
         v0 = j/segs;
         
   
         u1 = (i+1)/segs;
         v1 = (j+1)/segs;
         
         x1 = minim + range * u0;
         z1 = minim + range * v0;
         
         x2 = minim + range * u1;
         z2 = minim + range * v0;
         
         x3 = minim + range * u1;
         z3 = minim + range * v1;
   
         x4 = minim + range * u0;
         z4 = minim + range * v1;
         
         dx = posx[net_me]-x1;
         dy = posy[net_me]-y;
         dz = posz[net_me]-z1;
                    
         setcol(127,127,127);

         glbegin(gl_complex);
         gltexcoord(sc*u0,sc*v0); glvertex(x1,y,z1); 
         gltexcoord(sc*u1,sc*v0); glvertex(x2,y,z2);
         gltexcoord(sc*u1,sc*v1); glvertex(x3,y,z3);
         gltexcoord(sc*u0,sc*v1); glvertex(x4,y,z4);
         
         glend();
      }
   }
}