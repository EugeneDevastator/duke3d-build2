/*
   todo: save tile position i,j
   so it doesnt have to be calculated every time in getXY
*/

struct p3d_t{x,y,z;};
static mat[9]; static p3d_t cam; 


static piover180 = PI/180;

static picked = -1;
static pickedR=0;
static pickedG=0;
static pickedB=0;

static pickQuad = -1;
static doAddObj = 0;


enum{GRIDW=20,GRIDH=16, GFXSCALE = 3.5}
static objcolor[GRIDW*GRIDH][3];

enum{MAXOBJS=100}
static objx[MAXOBJS];
static objy[MAXOBJS];
static objz[MAXOBJS];
static objtype[MAXOBJS];
static numobjs =0 ;

enum{MAXPATHLENGTH = 30}
static path[MAXPATHLENGTH];

enum{MAXWAYPOINTS = 14}
static waypoint[MAXWAYPOINTS];

enum{MAXENEMIES=10}
static enemyx[MAXENEMIES];
static enemyz[MAXENEMIES];
static enemyPointOnLine[MAXENEMIES];
static enemyTargetWP[MAXENEMIES];
static enemyAlive[MAXENEMIES];
static numenemies = 0;


static time,oldtime,dt;
static ticks=0, fpstimer = 0;
static frames, sec, fps;
()
{
   oldtime = time:
   time = klock(0);
   dt = time - oldtime;
   
   if( fpstimer > 1/10 ){
      fpstimer = 0;
      ticks++;
   }
   fpstimer += dt;

   sec+=dt;
   if(sec > 1.0){
      sec = 0;
      fps = frames;
      frames=0;
   }
   frames++;

   if(numframes==0){
       cam.x = GRIDH;
       cam.y = GRIDW*2;
       cam.z = GRIDW;   

       waypoint[0] = 11;
       waypoint[1] = 75;
       waypoint[2] = 70;
       waypoint[3] = 102;
       waypoint[4] = 99;
       waypoint[5] = 163;
       waypoint[6] = 171;
       waypoint[7] = 219;
       waypoint[8] = 216;
       waypoint[9] = 248;
       waypoint[10] = 241;
       waypoint[11] = 289;
       waypoint[12] = 302;
       waypoint[13] = 318;
       
      enemyTargetWP[0] = 0;

   }

   
   
   //setcam(25,-22,-15,0,45*PIOVER180);
   
   updateCamera();
   

   clz(1e32);
   glenable(GL_DEPTH_TEST);
   //glcullface(GL_NONE);
   glcullface(GL_BACK);
   
   cls(255,255,255);
   renderPickColors();
   getpix(mousx,mousy,r,g,b);
   pickedR = r/255; // guess some precision is lost here...
   pickedG = g/255;
   pickedB = b/255;
   getPicked();   

   cls(0); clz(1e32);
   renderBattleField();
   
   // path
   setcol(0xa66c33);
     
   
   for(p=0; p<MAXWAYPOINTS-1; p++){
      sx=0; sz=0;
      ex=0; ez=0;
      getXY( waypoint[p],sx,sz );
      getXY( waypoint[p+1],ex,ez );
      sx+=.5;
      ex+=.5;     
      sz+=.5;
      ez+=.5;     

      s=gfxscale; 
      drawsph((sx)*s,1, (sz)*s,.5);
      moveto( (sx)*s,1, (sz)*s);
      lineto(ex*s,1,ez*s);
   }
   
   updateEnemies();

   
   if( bstatus==1 && keystatus[20] )
   {
      bstatus=0;
     //keystatus[20] = 0;
     objtype[numobjs]==0;
     doAddObj = 1;
     
   }
   else if(bstatus==1 && keystatus[21])
   {
      bstatus=0;
      //keystatus[21] = 0;
      doAddObj = 1;
      objtype[numobjs]=1;
   }
   
   
   renderSelection();
   drawobjs();
   
   
   moveto(0,0);
   setcol(0xffffff);
   //setcol(0);
   printf("\npickr = %g",pickedR);
   printf("\npickg = %g",pickedG);
   printf("\npickb = %g",pickedB);
   
   printf("\nobjr = %g",objcolor[pickQuad][0]);
   printf("\nobjg = %g",objcolor[pickQuad][1]);
   printf("\nobjb = %g",objcolor[pickQuad][2]);
   
   
   printf("\npickQuad = %g",pickQuad);
   
   printf("\nnumobjs = %g",numobjs);
   
   printf("\n ticks %g",ticks);
   printf("\n fps %g",fps);
   printf("\n dt %g",dt);

   //refresh();
   if(fps > 60)
   sleep(1);
}

getXY(find,&i,&j )
{
   num=0;
   for(i=0; i<GRIDW; i++)
   for(j=0; j<GRIDH; j++)
   {
      if(num == find) return;
      num++;  
   }
}

renderSelection()
{
   i=0; j=0;
   getXY(pickQuad,i,j);


   setcol(0xffff00);
   glbegin(gl_quads);
   moveto(i*gfxscale,.1,j*gfxscale );
   lineto( (i+1)*gfxscale,.1,j*gfxscale);
   lineto( (i+1)*gfxscale,.1,(j+1)*gfxscale );
   lineto(i*gfxscale,.1,(j+1)*gfxscale );
   lineto(i*gfxscale,.1,j*gfxscale );
}

renderBattleField()
{
   num = 0;

   setcol(0xffffff);
   tex = glsettex("wood.png"); 
   glbegin(gl_quads);
   {
      gltexcoord(0,0); glvertex( 0, 0, 0 );
      gltexcoord(10,0); glvertex( gridw*gfxscale, 0, 0 );
      gltexcoord(10,10); glvertex( gridw*gfxscale, 0, gridh*gfxscale );
      gltexcoord(0,10); glvertex( 0, 0, gridh*gfxscale );
   }  
   glend();
   glremovetex(tex);   
}

renderPickColors()
{
   static tex[1][1];
   tex[0][0] = rgb(511,511,511);
   t = glsettex(tex,1,1);
   glbegin(gl_quads);
   num = 0;
   setcol(255,255,255);
   
   r = 0;
   g = 0;
   b = 0;
   for(i=0; i<GRIDW; i++)
   for(j=0; j<GRIDH; j++)
   {
      scale = gfxscale;
      setcol(r,g,b); // any difference in color between the 2?
      //setcol( rgb(red,green,blue) );
      gltexcoord(0,0); glvertex(i*scale,0,j*scale );
      gltexcoord(1,0); glvertex( (i+1)*scale,0,j*scale);
      gltexcoord(1,1); glvertex( (i+1)*scale,0,(j+1)*scale );
      gltexcoord(0,1); glvertex(i*scale,0,(j+1)*scale );

      // Store color
      objcolor[num][0] = r/255;
      objcolor[num][1] = g/255;
      objcolor[num][2] = b/255;      

      // Since i dont know how what color evaldraw actually
      // will draw in 3D i increase r,g,b by a fair amount
      // to allow for some error in picking one color
      // you see, getpix doesnt return what i draw here... lighting?
      r+=10;
      if(r>255){
         r=0;
         g+=10;
         
         if(g>255)
         {
            g = 0;
            b+=10;
         }
      } 
      
      // Move obj insertion code:
      if(pickQuad == num && doAddObj){
         doAddObj = 0;
         objx[numobjs] = (i+.5)*scale;
         objy[numobjs] = 0;
         objz[numobjs] = (j+.5)*scale;
         numobjs++;
      }
      
      num++;
   }
   glend();
   glremovetex(t);
}

getPicked(){
   num=0;
   for(i=0; i<GRIDW; i++)
   for(j=0; j<GRIDH; j++){
   
      epsilon=0.01;//epsilon = 0.01; // can max compare 2 decimals.
      if( fabs(objcolor[num][0]-pickedR) < epsilon &&
      fabs(objcolor[num][1]-pickedG) < epsilon &&
      fabs(objcolor[num][2]-pickedB) < epsilon) 
      {
         pickQuad = num; //hvorfor er tallet flippet?
         
         break;
      }
      num++;
   }   
}

drawobjs(){
   for(i=0; i<numobjs; i++){         
         setcol(255,255,255); 
         x=objx[i];
         y=objy[i];
         z=objz[i];
         if(objtype[i]==0)
            drawspr("kanon.kv6",x,y,z,gfxscale/2,i+time,-PI); 
         else
         {
            drawspr("tanks.kv6",x,y,z,gfxscale/2,i+time,-PI); 
            //drawsph(x,y,z,.25);
         }
   }
}

updateEnemies(){
   for(i=0; i<MAXENEMIES; i++)
   {
      enemyAlive[0]=1;
      
      
      
      if(enemyAlive[i]){ 
         if(enemyTargetWP[i] < MAXWAYPOINTS-1)
         {
            tile = waypoint[ enemyTargetWP[i] % MAXWAYPOINTS ];
            x=0; y=1; z=0;
            getXY( tile,x,z );
            x+=.5; z+=.5;
            x*=gfxscale;
            z*=gfxscale;         
   
            dx=0; dz=0;
            nextTile = waypoint[ enemyTargetWP[i]+1 ]; //75;//waypoint[ 2 ];
            getXY( nextTile,dx,dz );
            dx += .5;
            dz += .5;
            dx *= gfxscale;
            dz *= gfxscale;
            ang = atan2(x-dx,z-dz);
            
            lineLen = sqrt( (x-dx)^2 + (z-dz)^2 );
            
            t = enemyPointOnLine[i];
            // lerp
            px = (dx-x) * t;
            pz = (dz-z) * t;
            
            //x=enemyx[i];
            //y = 1;
            //z=enemyz[i];
            setcol(0xffffff);
            drawspr("caco.kv6",x+px,y,z+pz, 1, ang-PI,-PI );
            
            //drawsph(dx,1,dz,1);
            
            // longer dist, slower inc of t.
            enemyPointOnLine[i] += (10*dt)* 1/linelen;
            if( enemyPointOnLine[i] > 1.0 ){
               enemyPointOnLine[i] = 0;
               newTarget = enemyTargetWP[i]+1 % MAXWAYPOINTS;
               if( newTarget < MAXWAYPOINTS)
               enemyTargetWP[i] = newTarget;
               else enemyTargetWP[i] = 0; 
            }
         }
         else
         {
            enemyPointOnLine[i] = 0;
            enemyTargetWP[i] = 0; 
         }
      }
   }

}

hex2rgb(mrgb,&r,&g,&b)
{  
   r = (mrgb / 2^16);
   g = (mrgb / 2^8) % 256;
   b = mrgb % 256;   
}

hsv_to_rgb(h,s,v,&r,&g,&b){ 
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   } 
   //r=int(r*255);
   //g=int(g*255);
   //b=int(b*255);
   //return r*2^16 + g*2^8 + b; 
}

/* gets the player controls and sets global camera variables. */
updateCamera()
{     
   // horiz and vertical heading (euler angles)  
   static posh = -PI/2; // left right
   static posv = -PI/2 - PI/8;

   playercontrols(cam,posh,posv);
   //if(posv > 1.5) posv = 1.5;
   //if(posv < -1.5) posv = -1.5;
   setcam(cam.x,cam.y,cam.z,posh,posv);
}
// Camera and movement code taken from /games/
//Handle input and player movement
playercontrols(p3d_t campos,&posh,&posv)
{
   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

   f = .128;
   if (keystatus[0x2a]) f *= 1;
   if (keystatus[0x36]) f *= 2;
   vx = (keystatus[32]-keystatus[30])*f; //D-A
   vy = (keystatus[17]-keystatus[31])*f; //W-S  
   vz = (keystatus[0x52]-keystatus[0x9d])*f; //KP0-RCtrl
   
   ang2mat(posh,posv,mat);
   newvx = mat[0]*vx + mat[3]*vz + mat[6]*vy;
   newvy = mat[1]*vx + mat[4]*vz + mat[7]*vy;
   newvz = mat[2]*vx + mat[5]*vz + mat[8]*vy; 
   d = 1/12; 
   campos.x+=newvx;
   campos.y+=newvy;
   campos.z+=newvz;
   // mousespeed values are tweaked for 60 fps
   mouseSpeedX = (mousx - oldMouseX) * 0.01;
   mouseSpeedY = (mousy - oldMouseY) * 0.01;
   oldMouseX = mousx;
   oldMouseY = mousy;
   if(bstatus==2)
   {
      posh -= mouseSpeedX;
      posv += mouseSpeedY;
   }
}
/* converts horizontal and vertical angles to a 3x3 matrix */
ang2mat(hang,vang,mat[9])
{
   mat[6] = cos(vang)*sin(hang); mat[0] = cos(hang);
   mat[7] = sin(vang);           mat[1] = 0;
   mat[8] = cos(vang)*cos(hang); mat[2] =-sin(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}