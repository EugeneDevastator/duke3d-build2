struct vec{x,y,z;}

enum{MAX_TRAILS = 256}

struct wheel_t
{
   vec forwardAxis, sideAxis;
   double wheelTorque, wheelSpeed, wheelAngle, wheelInertia, wheelRadius;
   vec pos;
   
   trail_idx;
   xtrail[MAX_TRAILS];
   ytrail[MAX_TRAILS];
};

struct Rigid_t
{
   // Linear
   vec pos;
   vec vel;
   vec forces;
   mass;
   
   // Angular
   angle;
   ang_vel;
   torque;
   inertia;
   
   // Graphical
   vec half_size;
   
   wheel_t wheels[4];
}

static time;
static rigid_t mycar;

static awd, fwd, rwd;
static debug_gfx = 1;

static cartex=0;
static background=0;

static friction_constant = 2;
()
{
   cls(0); clz(1e32);
   static oldtime;
   time = klock(0);
   delta = time - oldtime;
   oldtime = time;
   
   if ( numframes == 0 )
   {
      cartex = glsettex("car.png");
      background = glsettex("background.png");
      vec size;
      vecset( size, 24/2, 64/2, 0 );
      rigid_init( mycar, size, 1);
      
      vecset( mycar.pos, xres/2, yres/2, 0);
      mycar.angle = 0;
      
      awd = 1;
   }
   
   
   doFrame(mycar, delta);
   draw( mycar );
   
   moveto(0,0);
   if ( keystatus[2] )
   {
      awd = 1; fwd = 0; rwd = 0;
   }
   if ( keystatus[3] )
   {
      awd = 0; fwd = 1; rwd = 0;
   }
   if ( keystatus[4] )
   {
      awd = 0; fwd = 0; rwd = 1;
   }
   if (awd) printf("AWD\n");
   if (fwd) printf("FWD\n");
   if (rwd) printf("RWD\n");
   
   if ( keystatus[5] )
   {
      debug_gfx = 1;
   }
   if ( keystatus[6] )
   {
      debug_gfx = 0;
   }
}

draw( rigid_t r )
{
   vec pos;
   vecset(pos, r.pos );
   

   static make_tail_interval;
   make_tail = 0;
   if ( time > make_tail_interval && fabs( length(r.vel) ) > 0.1 )
   {
      make_tail_interval = time + 0.01;
      make_tail = 1;
   }
   
   vec worldWheelOffset;
   vec worldWheelSideVec;
   vec worldWheelForwardVec;

   //glsettex(background);
   //drawspr(xres/2,yres/2, yres/2, 0);

   for(i=0; i<4; i++)
   {
      relativeToWorld( r, r.wheels[i].pos, worldWheelOffset);
      vecadd( worldWheelOffset, worldWheelOffset, r.pos );
      
      relativeToWorld( r, r.wheels[i].sideAxis, worldWheelSideVec);
      relativeToWorld( r, r.wheels[i].forwardAxis, worldWheelForwardVec);
      
      vecscalar( worldWheelSideVec, worldWheelSideVec, r.wheels[i].wheelSpeed / 2 );
      

      if (numframes==0)
      {
        
         for(j=0; j<MAX_TRAILS; j++){
          r.wheels[i].xtrail[j] = worldWheelOffset.x;
          r.wheels[i].ytrail[j] = worldWheelOffset.y;
         }
        
      }


      if ( make_tail )
      {
         r.wheels[i].xtrail[0] = worldWheelOffset.x;
         r.wheels[i].ytrail[0] = worldWheelOffset.y;

         // Update body segments
         for(j=1; j<MAX_TRAILS; j++)
         {
          r.wheels[i].xtrail[MAX_TRAILS-j] = r.wheels[i].xtrail[MAX_TRAILS-j-1];
          r.wheels[i].ytrail[MAX_TRAILS-j] = r.wheels[i].ytrail[MAX_TRAILS-j-1];
         } 
      }  

      // Draw trails
      moveto( r.wheels[i].xtrail[0], r.wheels[i].ytrail[0] );
      for(j=0; j<MAX_TRAILS; j++)
      {
         t = 1 - j/MAX_TRAILS;
         setcol(192*t,192*t,192*t);
         x = r.wheels[i].xtrail[j];
         y = r.wheels[i].ytrail[j];
         lineto(x,y);
      }


      
      if ( debug_gfx )
      {
      
         if ( sgn( r.wheels[i].wheelSpeed ) == 1 )
         {
            setcol(0,255,0);
         }else{
            setcol(255,0,0);
         }

         if(i==1 || i==3)
         {
            moveto(  worldWheelOffset.x                       ,worldWheelOffset.y );
            lineto(  worldWheelOffset.x + worldWheelSideVec.x ,worldWheelOffset.y + worldWheelSideVec.y );
         }else{
            moveto(  worldWheelOffset.x                       ,worldWheelOffset.y );
            lineto(  worldWheelOffset.x - worldWheelSideVec.x ,worldWheelOffset.y - worldWheelSideVec.y );    
         }
  
         setcol(255,255,0);
         scale_fwd = r.wheels[i].wheelRadius * 25;
         moveto(  worldWheelOffset.x                       ,worldWheelOffset.y );
         lineto(  worldWheelOffset.x + worldWheelForwardVec.x*scale_fwd ,worldWheelOffset.y + worldWheelForwardVec.y*scale_fwd );
         moveto(  worldWheelOffset.x                       ,worldWheelOffset.y );
         lineto(  worldWheelOffset.x - worldWheelForwardVec.x*scale_fwd ,worldWheelOffset.y - worldWheelForwardVec.y*scale_fwd );
      }
      

   }

   setcol(255,255,255);
   glenable(GL_ALPHA_TEST); gldisable(GL_DEPTH_TEST); glcullface(GL_NONE);
   
   

   if ( !debug_gfx )
   {
      glsettex(cartex);
      drawspr(r.pos.x, r.pos.y, r.half_size.x * 2,r.half_size.y * 2, -PI+r.angle );
   }

   
   vec edges[4];
   vecset( edges[0], -r.half_size.x, r.half_size.y,0 );
   vecset( edges[1], r.half_size.x, r.half_size.y,0 );
   vecset( edges[2], r.half_size.x, -r.half_size.y,0 );   
   vecset( edges[3], -r.half_size.x, -r.half_size.y,0 ); 

   for(i=0; i<4; i++)
   {
      rotate2d( r.angle, edges[i] ); // Apply rotation
      vecadd( edges[i], edges[i], pos ); // Translate
   }

   //#define draw3d
   #ifdef draw3d
   setcam(r.pos.x, 600,r.pos.y,0, -PI/2);
   glsettex(0);
   glBegin(GL_COMPLEX);
   //glBegin(GL_QUADS);
   //glBegin(GL_LINE_LOOP);
   glTexCoord(0,0);   glVertex( -1000, 0, -1000 );
   glTexCoord(2,0);   glVertex( -1000, 0, 1000 );
   glTexCoord(2,2);   glVertex( 1000, 0, 1000 );
   glTexCoord(0,2);   glVertex( 1000, 0, -1000 );
   glEnd();   
 

   glsettex(cartex);
   glBegin(GL_COMPLEX);
   //glBegin(GL_QUADS);
   //glBegin(GL_LINE_LOOP);
   glTexCoord(0,0);   glVertex( edges[0].x, 0, edges[0].y );
   glTexCoord(1,0);   glVertex( edges[1].x, 0, edges[1].y );
   glTexCoord(1,1);   glVertex( edges[2].x, 0, edges[2].y );
   glTexCoord(0,1);   glVertex( edges[3].x, 0, edges[3].y );
   glEnd();  
   #endif

   if ( debug_gfx )
   {
      moveto( r.pos.x, r.pos.y );
      lineto( r.pos.x + r.vel.x, r.pos.y + r.vel.y );
      

      //moveto( r.pos.x, r.pos.y );
      //vec tull;
      //vecset(tull, cos(r.ang_vel), sin(r.ang_vel), 0);
      //rotate2d( r.angle, tull ); // Apply rotation
      //lineto( r.pos.x + tull.x*100, r.pos.y + tull.y*100 );
   
   //ang_vel;
   //torque;
   //inertia;
   }
   
   static slideval = 25;
   slider(0,slideval,xres-100, 15, 50 );
   new_mass = slideval / 50.0 * 10;
   constrain( new_mass, 1, 10 );
   mycar.mass = new_mass;
   mycar.inertia = (1.0 / 12.0) * (mycar.half_size.x^2 * mycar.half_size.y^2) * mycar.mass;
   moveto(xres-200, 10);
   printf("mass: %g", mycar.mass);
   
   static slideval2 = 25;
   slider(1,slideval2,xres-100, 10*4+5, 50 );
   new_radius = slideval2 / 50.0;
   constrain(new_radius, 0.1, 10 );
   for(i=0; i<4; i++){
      mycar.wheels[i].wheelRadius = new_radius;
      mycar.wheels[i].wheelInertia = new_radius^2; // fake value
   }
   moveto(xres-250, 10*4);
   printf("wheelRadius: %g", new_radius);
   
   static slideval3 = 50;
   slider(2,slideval3,xres-100, 10*7+5, 50 );
   friction_constant = slideval3 / 50.0 * 2;
   constrain(friction_constant, 0.01, 2 );
   
   moveto(xres-250, 10*7);
   printf("friction\nconstant: %g", friction_constant);    
}

constrain(&v, a,b )
{
   v = min( b, max(a,v) );
}

wheel_init( wheel_t w, x, y, radius )
{
   vecset(w.pos, x, y, 0);
   w.wheelSpeed = 0;
   wheel_setSteeringAngle( w, 0 );
   w.wheelRadius = radius;
   w.wheelInertia = radius^2; // fake value
}

wheel_setSteeringAngle( wheel_t w, angle )
{
   vec fwd;
   vecset( fwd, 0, 1, 0 );
   vec side;
   vecset( side, -1, 0, 0);
   
   rotate2D( angle, fwd );
   rotate2D( angle, side );
   
   vecset( w.forwardAxis, fwd );
   vecset( w.sideAxis, side );
}

rigid_init( Rigid_t rigid, vec half_size, mass )
{
   //rigid.inertia = 1500.0;
   
   rigid.half_size = half_size;
   rigid.mass = mass;
   rigid.inertia = (1.0 / 12.0) * (half_size.x^2 * half_size.y^2) * mass;

   // Front wheels
   wheelRadius = 0.5;
   vec wheel_offset;
   vecset(wheel_offset, half_size);
   wheel_offset.x -= 1;
   wheel_offset.y -= 1;
   wheel_init( rigid.wheels[0], wheel_offset.x, wheel_offset.y, wheelRadius );
   wheel_init( rigid.wheels[1], -wheel_offset.x, wheel_offset.y, wheelRadius );
   wheel_init( rigid.wheels[2], wheel_offset.x, -wheel_offset.y, wheelRadius );
   wheel_init( rigid.wheels[3], -wheel_offset.x, -wheel_offset.y, wheelRadius );
}


rigidUpdate( Rigid_t r, time_step )
{
   // Integrate physics linear
   vec accel;
   vecscalar( accel, r.forces, 1.0 / r.mass );
   r.vel.x += accel.x * time_step;
   r.vel.y += accel.y * time_step;
   r.vel.z = 0;

   r.pos.x += r.vel.x * time_step;
   r.pos.y += r.vel.y * time_step;
   r.pos.z = 0;

   vecset( r.forces, 0,0,0 ); // Clear forces
   
   
   // Angular
   double angAcc = r.torque / r.inertia;
   r.ang_vel += angAcc * time_step;
   r.angle += r.ang_vel * time_step;
   r.torque = 0; // clear torque
   
   // Drag
   friction_factor = exp( min(1,length(r.vel)) * time_step * -0.5 ); 
   vecscalar(r.vel, r.vel, friction_factor );
   
}

addForce( Rigid_t r, vec worldForce, vec worldOffset )
{
   vecadd( r.forces, r.forces, worldForce ); // f += worldForce
   r.torque += wedgeProduct( worldOffset, worldForce ); // torque += worldOffset x worldForce
}

wedgeProduct( vec a, vec b )
{
   return a.x * b.y - a.y * b.x;
}

doFrame(rigid_t r, time_step)
{
   steering = keystatus[203] - keystatus[205];
   throttle = keystatus[200] - keystatus[208];
   brakes = keystatus[57];

   setSteering(r, steering );
   setThrottle(r, throttle );
   setBrakes(r, brakes );
   vechicleUpdate( r, time_step * 10.0);
}

setSteering(Rigid_t r,steering)
{
   double steeringLock = 0.75;
   wheel_setSteeringAngle(r.wheels[0], -steering * steeringLock );
   wheel_setSteeringAngle(r.wheels[1], -steering * steeringLock );
   
   //wheel_setSteeringAngle(r.wheels[2], steering * steeringLock );
   //wheel_setSteeringAngle(r.wheels[3], steering * steeringLock );
}

setThrottle(Rigid_t r,throttle)
{
   double torque =10.0;
   // todo, make AddTransmission(amound) that acts like a gear box
   // not directly adding throttle to wheelTorque, but converting
   // engine RPM's ...
   
   if (awd)
   {
      for(i=0; i<4; i++)
      {
         r.wheels[i].wheelTorque += .5 * throttle * torque;  // half-engine pow pr wheel in AWD
      }
   }else if( rwd )
   {
      r.wheels[2].wheelTorque += throttle * torque; 
      r.wheels[3].wheelTorque += throttle * torque;
   }else if( fwd )
   {
      r.wheels[0].wheelTorque += throttle * torque; 
      r.wheels[1].wheelTorque += throttle * torque;
   }
}

setBrakes(Rigid_t r, brakes )
{
   // TODO make brake torque relative to wheelspeed
   double brakeTorque = 1.0;
   for(i=0; i<4; i++)
   {
      double wheelVel = r.wheels[i].wheelSpeed; // aka getWheelSpeed()
      r.wheels[i].wheelTorque += -wheelVel * braketorque * brakes; //aka AddTransmissionTorque(val);
      
   }
}

vechicleUpdate(Rigid_t r, timestep)
{
   for(i=0; i<4; i++)
   {
      vec worldWheelOffset;
      relativeToWorld( r, r.wheels[i].pos, worldWheelOffset);
      
      vec worldGroundVel;
      pointVel( r, worldWheelOffset, worldGroundVel );
      
      vec relativeGroundSpeed;
      worldToRelative(-r.angle, worldGroundVel, relativeGroundSpeed);
      
      vec relativeResponseForce;
      CalculateForce( r.wheels[i], relativeGroundSpeed, timestep, relativeResponseForce );
      
      vec worldResponseForce;
      relativeToWorld(r, relativeResponseForce, worldResponseForce);
      
      // Add force
      addForce( r, worldResponseForce, worldWheelOffset );
      
   }
   rigidUpdate( r, timestep );
}

calculateForce(wheel_t w, vec relativeGroundSpeed, timestep, vec responseForce )
{
   // calculate speed of tire patch at ground
   vec patchSpeed;
   vecscalar( patchSpeed, w.forwardAxis, -(w.wheelSpeed*w.wheelRadius) );
   
   // get vel difference between ground and patch
   vec velDiff;
   vecadd( velDiff, relativeGroundSpeed, patchSpeed );
   
   // project ground speed onto side axis
   double forwardMag = 0.0;
   vec sideVel;
   project( sideVel, velDiff, w.sideAxis );
   
   vec forwardVel;
   project( forwardVel, velDiff, w.forwardAxis, forwardMag );
   
   // Calc super fake dir forces
   // calc response force
   
   
   //speed_diff = min(.5, length( mycar.vel ) );
   //speed_diff = 2 - min( 1.9, max(0.5, speed_diff/20) );
   
   
   //vecscalar( responseForce, sideVel, -speed_diff ); // TODO make friction decrease with velocity
   vecscalar( responseForce, sideVel, -friction_constant ); 
   vecsub( responseforce, responseforce, forwardVel ); 
   
   // calc torque on wheel
   w.wheelTorque += forwardMag * w.wheelRadius;
   
   // integrate total torque
   w.wheelSpeed += w.wheelTorque / w.wheelInertia * timestep;
   
   // integrate wheel angle (rotational equivalent of position)
   w.wheelAngle += w.wheelSpeed * timestep;

   //clear our transmission torque accumulator
   w.wheelTorque = 0;
}

project( vec c, vec a, vec b )
{
   //projected vector = (a dot b) * b;
   //dpr = a.x * b.x + a.y * b.y;
   dpr = vecdot(a,b);
   vecscalar( c, b, dpr );
}

project( vec c, vec a, vec b, &mag )
{
   //projected vector = (a dot b) * b;
   dpr = a.x * b.x + a.y * b.y;
   mag = dpr;
   vecscalar( c, b, dpr );
}

// Velocity of a point on body
pointVel( Rigid_t r, vec worldOffset, vec tangent )
{
   vecset( tangent, -worldOffset.y * r.ang_vel, worldOffset.x * r.ang_vel, 0 );
   vecadd( tangent, tangent, r.vel );
}

worldToRelative( angle, vec world, vec out )
{
   vecset(out, world);
   rotate2d( angle, out );
}

relativeToWorld( Rigid_t r, vec relative, vec out )
{
   vecset(out, relative);
   rotate2d( r.angle, out );
}


drawrectfill(x0,y0,x1,y1) { for(y=y0;y<y1;y++) { moveto(x0,y); lineto(x1,y); } }
drawrectopen(x0,y0,x1,y1) { moveto(x0,y0); lineto(x1,y0); lineto(x1,y1); lineto(x0,y1); lineto(x0,y0); }


// Takes a 3x3 rotation matrix and a point xyz
tform(m[9], vec v)
{
   x = v.x; y = v.y; z = v.z;
   v.x = m[0] * x + m[1] * y +  m[2] * z; 
   v.y = m[3] * x + m[4] * y +  m[5] * z; 
   v.z = m[6] * x + m[7] * y +  m[8] * z; 
}

vecScalar( vec out, vec a, s )
{
   out.x = a.x * s;
   out.y = a.y * s;
   out.z = a.z * s;
}

vecAdd( vec out, vec a, vec b)
{
   out.x = a.x + b.x;
   out.y = a.y + b.y;
   out.z = a.z + b.z;   
}
vecSub( vec out, vec a, vec b)
{
   out.x = a.x - b.x;
   out.y = a.y - b.y;
   out.z = a.z - b.z;   
}

vecCross( vec out, vec a, vec b)
{
   out.x = a.y*b.z - a.z*b.y;
   out.y = a.z*b.x - a.x*b.z;
   out.z = a.x*b.y - a.y*b.x;
}

vecset(vec a, x,y,z){
   a.x = x; a.y = y; a.z = z;
}

vecset(vec a, vec other){
   a.x = other.x; a.y = other.y; a.z = other.z;
}

vecDot( vec a, vec b)
{
   return a.x*b.x + a.y*b.y + a.z*b.z;
}

veclerp( vec out, vec a, vec b, t )
{
      out.x = a.x + t*(b.x-a.x);
      out.y = a.y + t*(b.y-a.y);
      out.z = a.z + t*(b.z-a.z);
}

length( vec v )
{
   return sqrt( vecdot(v,v) );
}

normalize( vec v )
{
   len = length(v);
   if ( len )
   {
      v.x /= len; v.y /= len; v.z /= len;
   }
}

buildMatrix( mtx[9], vec side, vec up, vec fwd )
{
   mtx[0] = side.x; mtx[1] = side.y; mtx[2] = side.z;
   mtx[3] = up.x;   mtx[4] = up.y;   mtx[5] = up.z;
   mtx[6] = fwd.x;  mtx[7] = fwd.y;  mtx[8] = fwd.z;
}


rotate2d(angle, vec v)
{
   x1 = v.x;
   y1 = v.y;
   
   sa = sin(angle);
   ca = cos(angle);
   
   v.x = x1 * ca - y1 * sa;
   v.y = y1 * ca + x1 * sa;
}



slider(sliderNum,&value,x,y,length)
{
   enum{numSliders=10};
   static mouseLock[numSliders];

   // Constructor, set slider to mid position
   if(numframes==0)
   {
      mouseLock[sliderNum] = 0;
   }  
   // Draw slider
   setcol(255,255,255);
   moveto(x,y);
   lineto(x+length,y);
   drawsph(x+value,y,-10);
   
   // mouse input
   
   // Check if anyone else has lock, if so exit.
   if(mouseLock[sliderNum] == 0)
   for(i=0; i<numSliders; i++)
   {
      if(i==sliderNum) continue; // if we have lock no problem
      if(mouseLock[i]) return; // someone else has lock
   }   

   if(bstatus==1)
   {
      mx = mousx; my = mousy; 
      if(mouseLock[sliderNum]) // mouse has lock-on, move slider
      {
         setcol(255,0,0);
         drawsph(x+value, y,-5);
         if(mx <= (x+length) && mx >= x) // limit movement to slider line
         {
            intrinsicRatio = (length-0)/( (length+x)-x);
            value = ( mx-x)*intrinsicRatio + 0;
         }
         else if(mx > (x+length) )
         {
            value = length;
         }
         else if(mx < x)
         {
            value = 0;
         }
      }
      else // check for collision
      {
         if( isColliding(mx,my,x+value,y,10) ) mouseLock[sliderNum] = 1; 
      }
   }
   else // mouse released
   {
      mouseLock[sliderNum] = 0;
   }

}

isColliding(x1,y1,x2,y2,radius)
{
   if((x1-x2)^2 + (y1-y2)^2 < radius^2 ) return 1;
   return 0;
}