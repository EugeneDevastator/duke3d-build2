
static spheres[8];

(x,y,z,&r,&g,&b)
{
   nx=0; ny=0; nz=0;
   
   gradient(x,y,z,nx,ny,nz);
   normalize(nx,ny,nz);
   
   r=128+(nx)*127;
   g=128+(ny)*127;
   b=128+(nz)*127;
   
   return func(x,y,z);
}

func(x,y,z)
{

   //sphere1 = (x - .5)^2 + (y - .5)^2 + (z - .5)^2;
   
   
   count = 0;
   /*
   for(i=0; i<2; i++){
      for(j=0; j<2; j++){
      
         u = (i*2-1);
         v = (j*2-1);
         tz = .5;
         
         tx = u * .5;
         ty = v * .5;
         
         spheres[count+0] = (x + tx)^2 + (y + ty)^2 + (z - tz)^2;
         spheres[count+1] = (x + tx)^2 + (y + ty)^2 + (z + tz)^2;
         
         //spheres[count+0] = (x - .5)^2 + (y - .5)^2 + (z - .5)^2;
         //spheres[count+1] = (x + .5)^2 + (y - .5)^2 + (z - .5)^2;
         count += 2;
         
      }
   }
   
   */
   
   spheres[0] = (x - .5)^2 + (y - .5)^2 + (z - .5)^2;
   spheres[1] = (x - .5)^2 + (y - .5)^2 + (z + .5)^2;
   spheres[2] = (x - .5)^2 + (y + .5)^2 + (z - .5)^2;
   spheres[3] = (x - .5)^2 + (y + .5)^2 + (z + .5)^2;
   spheres[4] = (x + .5)^2 + (y - .5)^2 + (z - .5)^2;
   spheres[5] = (x + .5)^2 + (y - .5)^2 + (z + .5)^2;
   spheres[6] = (x + .5)^2 + (y + .5)^2 + (z - .5)^2;
   spheres[7] = (x + .5)^2 + (y + .5)^2 + (z + .5)^2;
   
   count = 8;
   
   
   // Combine
   /*
   all_spheres = spheres[0];
   for(i=1; i<count; i++){
      all_spheres = union( all_spheres, spheres[i] );   

   }
   */
   

   box = x^6 + y^6 + z^6;
   //v = union( all_spheres , 2 * box);

#if 1   
   v = union( (x - .5)^2 + (y - .5)^2 + (z - .5)^2, 
       union( (x - .5)^2 + (y - .5)^2 + (z + .5)^2,
       union( (x - .5)^2 + (y + .5)^2 + (z - .5)^2,
       union( (x - .5)^2 + (y + .5)^2 + (z + .5)^2,
       union( (x + .5)^2 + (y - .5)^2 + (z - .5)^2,
       union( (x + .5)^2 + (y - .5)^2 + (z + .5)^2,
       union( (x + .5)^2 + (y + .5)^2 + (z - .5)^2,
       union( (x + .5)^2 + (y + .5)^2 + (z + .5)^2,
               box
               
       ))) ))) ));
       
#else

   v = union( spheres[0], 
       union( spheres[1],
       union( spheres[2],
       union( spheres[3],
       union( spheres[4],
       union( spheres[5],
       union( spheres[6],
       union( spheres[7],
              box
       ))) ))) ));

#endif
   
   lim = 2/voxres;
   return abs(v-lim) < lim;
   
   
}

gradient(x,y,z,&nx,&ny,&nz)
{
   s = 2/voxres;
   nx = func(x-s,y,z) - func(x+s,y,z);
   ny = func(x,y-s,z) - func(x,y+s,z);
   nz = func(x,y,z-s) - func(x,y,z+s);  
}

normalize(&nx,&ny,&nz)
{
   rlen = 1/sqrt(nx^2 + ny^2 + nz^2);
   nx*=rlen; ny*=rlen; nz*=rlen;
}
union(a,b){
   min(a,b);
}

isect(a,b){
   max(a,b);
}

diff(a,b){
   max(a,-b);
}