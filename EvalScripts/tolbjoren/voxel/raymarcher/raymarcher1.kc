// first hit raymarching. How to do a proper raymarcher is
// described on Brandon Pelfreys blog. I use his code for creating a
// display plane and calculating ray direction
struct vec{x,y,z;}

()
{
   //cls(0);
   static vec cameraPosition, cameraFocus;
   if ( numframes == 0 ){
      vecset(cameraFocus, 0, 0, 0 );
   }
   
   static matrix[9];
   ang2mat( mousx/xres*2*PI, mousy/yres*2*PI, matrix );
   vecset(cameraPosition, 0, 0, 2.5 );

   radius = 3;
   vecset(cameraPosition, radius*matrix[6], radius*matrix[7], radius*matrix[8] );

   #if 1

   enum{BUF_SIZE = 128}
   static horiz_line_buf[BUF_SIZE];
   width = BUF_SIZE;
   height = BUF_SIZE;
   
   setcol(0xffffff); setpix(width,height);
   
   vec lookDirection, camRight, camUp;
   
   vecset(camRight, -matrix[0], -matrix[1], -matrix[2] );
   vecset(camUp, matrix[3], matrix[4], matrix[5] );
   vecset(lookDirection, -matrix[6], -matrix[7], -matrix[8] );

   double aspect = width / height;

   // compute distance to the camera plane from the field of view, and aspect ratio
   double fov = 45;
   double cameraPlaneDistance = 1.0 / (2.0 * tan(fov*PI/180*0.5));

   // Compute the step size for the ray marching.
   double marchingStepCount = 128;
   double marchDistance = length(cameraPosition)*2;
   double ds = marchDistance / marchingStepCount;

   for( py=0; py<height; ++py){
   for( px=0; px<width; ++px){
         horiz_line_buf[px] = rgb(0,0,0); 
         
         // Compute the ray direction for this pixel. Same as in standard ray tracing.
         double u = -.5 + (px+.5) / (width-1);
         u *= aspect; // Correction for square pixels on non-square image aspect ratio.
         double v =  .5 - (py+.5) / (height-1);

         vec rayDirection;
         rayDirection.x = lookDirection.x * cameraPlaneDistance + camRight.x*u + camUp.x*v;
         rayDirection.y = lookDirection.y * cameraPlaneDistance + camRight.y*u + camUp.y*v;
         rayDirection.z = lookDirection.z * cameraPlaneDistance + camRight.z*u + camUp.z*v;
         
         // Distance along the ray. All rays start at the camera.
         for(s=1; s<marchDistance; s += ds) {
            vec rayPosition;
            rayPoint( rayPosition, cameraPosition, rayDirection, s );

            // Sample the density from a grid. Later, we'll play with how to render
            // things other than just grids.
            double r,g,b;
            double density = volume(rayPosition, r, g, b);
            if ( density > 0 ) {
               //setpix(px,py);
               //setCol( r,g,b );
               horiz_line_buf[px] = rgb(r,g,b);
               
               
               break;
            }
         }
      } // for px
      sethlin( 0, py, horiz_line_buf, BUF_SIZE );
   } // for py

   #endif
}

//
// Vector
//
vecScalar( vec out, vec a, s )
{
   out.x = a.x * s;
   out.y = a.y * s;
   out.z = a.z * s;
}

vecAdd( vec out, vec a, vec b)
{
   out.x = a.x + b.x;
   out.y = a.y + b.y;
   out.z = a.z + b.z;   
}
vecSub( vec out, vec a, vec b)
{
   out.x = a.x - b.x;
   out.y = a.y - b.y;
   out.z = a.z - b.z;   
}

vecCross( vec out, vec a, vec b)
{
   out.x = a.y*b.z - a.z*b.y;
   out.y = a.z*b.x - a.x*b.z;
   out.z = a.x*b.y - a.y*b.x;
}

vecSet(vec a, x,y,z){
   a.x = x; a.y = y; a.z = z;
}

vecSet(vec a, vec other){
   a.x = other.x; a.y = other.y; a.z = other.z;
}

vecDot( vec a, vec b)
{
   return a.x*b.x + a.y*b.y + a.z*b.z;
}

length( vec v )
{
   return sqrt( vecdot(v,v) );
}

normalize( vec v )
{
   len = length(v);
   if ( len )
   {
      v.x /= len; v.y /= len; v.z /= len;
   }
}

rayPoint( vec out, vec pos, vec dir, t ){
   out.x = pos.x + t*dir.x;
   out.y = pos.y + t*dir.y;
   out.z = pos.z + t*dir.z;
}

volume( vec pos, &r, &g, &b )
{
   //return barrel(pos.x, pos.y, pos.z, r,g,b);
   return pipes(pos.x, pos.y, pos.z, r,g,b);
   //return terning(pos.x, pos.y, pos.z, r,g,b);
}

terning(x, y, z, &r, &g, &b ){
   ax = x^2; ax *= ax;
   ay = y^2; ay *= ay;
   az = z^2; az *= az;
   d8 = ax^2+ay^2+az^2;
   if (d8 > .95^8) return(0);
   
   o = 0.5; f = 0.99; r2 = .17^2;
   xmo = (x-o)^2; xpo = (x+o)^2; xx = x^2; xf = (abs(x)-f)^2;
   ymo = (y-o)^2; ypo = (y+o)^2; yy = y^2; yf = (abs(y)-f)^2;
   zmo = (z-o)^2; zpo = (z+o)^2; zz = z^2; zf = (abs(z)-f)^2;
   
   if (y > 0) { if (xx+zz                               +yf < r2) return(0); } //1
         else { if (min(min(xmo,xpo),xx)+min(zmo,zpo)   +yf < r2) return(0); } //6
   if (z > 0) { if (min(xmo+ypo,xpo+ymo)                +zf < r2) return(0); } //2
         else { if (min(min(xmo,xpo)+min(ymo,ypo),xx+yy)+zf < r2) return(0); } //5
   if (x > 0) { if (min(min(ypo+zmo,ymo+zpo),yy+zz)     +xf < r2) return(0); } //3
         else { if (min(ymo,ypo)+min(zmo,zpo)           +xf < r2) return(0); } //4
   
   i = 1-min(max((.90^8-d8)*4,0),1);
   r = 255 - i* 52 - (x-rnd)* 8;
   g = 255 - i*154 - (y-rnd)* 5;
   b = 255 - i*154 - (z-rnd)*13;
   return(1);
}

sphere(x, y, z, &r, &g, &b ){
   r = x*128+128;
   g = y*128+128;
   b = z*128+128;
   return x^2 + y^2 + z^2 < 1;
}

pipes(x, y, z, &r, &g, &b )
{
   if ((abs(x) > .99) || (abs(y) > .99) || (abs(z) > .99)) return(0);
   r = x*128+128;
   g = y*128+128;
   b = z*128+128;
   if (x^2+y^2+z^2 < .125) { r = rnd*12+130; g = rnd*12+100; b = rnd*12+80; return(1); }
   if (x^2+y^2 < .25) return(0);
   if (x^2+z^2 < .25) return(0);
   if (y^2+z^2 < .25) return(0);
   if (x^2+y^2 < .5) { r = rnd*12+100; g = rnd*12+150; b = rnd*12+ 80; return(1); }
   if (x^2+z^2 < .5) { r = rnd*12+150; g = rnd*12+130; b = rnd*12+100; return(1); }
   if (y^2+z^2 < .5) { r = rnd*12+130; g = rnd*12+100; b = rnd*12+120; return(1); }
   0
}


barrel(x, y, z, &r, &g, &b ){
   if (abs(z) > .96) return(0);
   r2 = (2.5-z*z)/4;
   
   xy2 = x^2 + y^2;
   if (xy2 < r2*.8) //caps
   {
      if (abs(z) > .93) return(0);
      f = cos(xy2*6)*32+144;
      n = -(noise(x*32,y*32,z*32)-0.7)^2;
      r = f*.6+n*10;
      g = f*.5+n*10;
      b = f*.3+n*10;
      return(1);
   }
   
      //side wood
   if (xy2 < r2)
   {
      ang = ((atan2(y,x)*12/(PI*2))%1);
      n = noise(x*24,y*24,z*3)*28;
      if (ang < .25)
      {
         r2sub = (.25/2-fabs(ang-.25/2))*.5;
         r2 -= r2sub;
         n -= r2sub*400;
      }
      r = 128*.8+n;
      g =  96*.8+n;
      b =  64*.8+n;
      return(xy2 < r2);
   }
   
      //metal bars
   if ((xy2 < r2+.12) && ((z+.92)%.55 < .16))
   {
      ang = ((atan2(y,x)*12/(PI*2))%1);
      dx = fabs(ang-.6);
      dy = fabs((z+.92)%.55-.08)*2.5;
      if (dx^2+dy^2 < .12^2)
      {
         r2 += (.12^2-(dx^2+dy^2))*32;
         n = noise(x*50,y*50,z*240)*20;
         r = 104+n;
         g = 104+n;
         b = 112+n;
      }
      else
      {
         n = noise(x*8,y*8,z*48)*20;
         r = 120+n;
         g = 112+n;
         b = 112+n;
      }
      return(xy2 < r2+.08);
   }
}

ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}

transformPoint(vec v, thisRot[9])
{
   NewX = v.x * thisRot[0] + v.y * thisRot[1] + v.z * thisRot[2];
   NewY = v.x * thisRot[3] + v.y * thisRot[4] + v.z * thisRot[5];
   NewZ = v.x * thisRot[6] + v.y * thisRot[7] + v.z * thisRot[8];
   v.x=newx; v.y=newy; v.z=newz;
}