struct vec{x,y,z;}

()
{
   cls(0); clz(1e32);
   if ( numframes==0 ) {
      glsettex("whitepix.tga");
   }   

   x = xres/2;
   y = yres/2;

   segs = 12;
   

    glBegin(GL_QUADS);
    
   for(i=0; i<segs; i++)
   {
      
      t = i/segs;
      inc = 2*PI * 1/segs;
      //c = 255*t;
      //setcol( c,c,c );
      
      //c = hsv_to_rgb(360*t,1,1);
      
      c = ryb2rgb( t*6 );
      setcol(c);
      
      ang = (-pi/2 + 2*PI*t);
      ca1 = cos(ang); sa1 = sin(ang);
      ca2 = cos(ang+inc); sa2 = sin(ang+inc);
         
         
      r1 = 120;
      r2 = 240;
      
      t1 = 0.5;
      t2 = 1.0;
         
      glTexcoord(ca2*t1,sa2*t1); glVertex(xres/2+ca2*r1, yres/2+sa2*r1);
      glTexcoord(ca1*t1,sa1*t1); glVertex(xres/2+ca1*r1, yres/2+sa1*r1);
      glTexcoord(ca1*t2,sa1*t2); glVertex(xres/2+ca1*r2, yres/2+sa1*r2);
      glTexcoord(ca2*t2,sa2*t2); glVertex(xres/2+ca2*r2, yres/2+sa2*r2);
         
         /*
      r1 = 5;
      r2 = 65; 
      x1 = x+cos(ang) * r1;
      y1 = y+sin(ang) * r1;
      x2 = x+cos(ang) * r2;
      y2 = y+sin(ang) * r2;
      drawcone(x1,y1,2,
               x2,y2,2);
      */
   }
    glEnd();
    

   for(i=0; i<25; i++){
    
      t = 6 * i/25;
      c1 = fmod(t,6);
      c2 = fmod(t+3,6);
      
      
      y = 10 + 20*i;   
      
      setcol( ryb2rgb(c1) );
      drawsph(10,y,10);
      
      setcol( ryb2rgb(c2) );
      drawsph(30,y,10);
   }
}

lerp3(vout[3], v1[3], v2[3], t)
{
   vout[0] = (1-t)*v1[0] + t*v2[0];
   vout[1] = (1-t)*v1[1] + t*v2[1];
   vout[2] = (1-t)*v1[2] + t*v2[2];
}

lerp3v(vec o, vec v1, vec v2, t)
{
   o.x = (1-t)*v1.x + t*v2.x;
   o.y = (1-t)*v1.y + t*v2.y;
   o.z = (1-t)*v1.z + t*v2.z;
}


ryb2rgb( t ) // optional intensity?
{
if ( t < 0 ) t = 0;
if ( t > 6 ) t = 6;
   static vout[3];

static red[3] = {255,   0, 0};
static orange[3] = {255, 127, 0};   
static yellow[3] = {255,   255, 0};
static green[3] = {0,   255, 0};
static blue[3] = {0,    0,255};
static violet[3] = {127, 0, 255};


/*
vec vout;

vec red = {255,   0, 0};
vec orange = {255, 127, 0};   
vec yellow = {255,   255, 0};
vec green = {0,   255, 0};
vec blue = {0,    0,255};
vec violet = {127, 0, 255};
*/
   
   col = floor(t);
   if ( col==0 ) {
      lerp3(vout,red,orange,t);
   } else if (col==1) {
     lerp3(vout,orange,yellow,t-1);
   } else if (col==2) {
      lerp3(vout,yellow,green,t-2);
   } else if (col==3) {
      lerp3(vout,green,blue,t-3);
   } else if (col==4) {
      lerp3(vout,blue,violet,t-4);
   } else if (col==5) {
      lerp3(vout,violet,red,t-5);
   } else {
      // bad t parameter
   }

   return rgb(vout[0], vout[1], vout[2]);
   //return rgb(yellow.x, yellow.y, yellow.z);
}

hsv_to_rgb(h,s,v){ 
   // expects 360deg and 1,1 hue sat max
   if( v == 0 ){r=0; g=0; b=0;} //no brightness(value) means black
   else if( s==0 ){r=v; g=v; b=v;} //grayscale, no colour saturation
   else
   {
      hf = h / 60.0;
      i  = floor( hf );
      f  = hf - i;
      pv  = v * ( 1 - s );
      qv  = v * ( 1 - s * f );
      tv  = v * ( 1 - s * ( 1 - f ) );
      if(i==0){r=v; g=tv; b=pv;} 
      if(i==1){r=qv; g=v; b=pv;} 
      if(i==2){r=pv; g=v; b=tv;} 
      if(i==3){r=pv; g=qv; b=v;} 
      if(i==4){r=tv; g=pv; b=v;} 
      if(i==5){r=v; g=pv; b=qv;}
      if(i==6){r=v; g=tv; b=pv;}
      if(i==-1){r=v; g=tv; b=qv;}    
   }
   return rgb( r*255, g*255, b*255); 
}