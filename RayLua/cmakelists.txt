cmake_minimum_required(VERSION 3.21)
cmake_policy(VERSION 3.5)
set(CMAKE_GENERATOR_PLATFORM Win32)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_SIZEOF_VOID_P 4)
project(raylib_lua_imgui C CXX)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include(FetchContent)

# Try to find raylib first, fallback to FetchContent
find_package(raylib QUIET)
if(NOT raylib_FOUND)
    message(STATUS "raylib not found, fetching...")
    FetchContent_Declare(
            raylib
            GIT_REPOSITORY https://github.com/raysan5/raylib.git
            GIT_TAG 5.5
    )
    FetchContent_MakeAvailable(raylib)
endif()

# ImGui - always use FetchContent since it doesn't have find_package support
FetchContent_Declare(
        imgui
        GIT_REPOSITORY https://github.com/ocornut/imgui.git
        GIT_TAG v1.92.1
)
FetchContent_MakeAvailable(imgui)

# Create imgui target
add_library(imgui STATIC
        ${imgui_SOURCE_DIR}/imgui.cpp
        ${imgui_SOURCE_DIR}/imgui_demo.cpp
        ${imgui_SOURCE_DIR}/imgui_draw.cpp
        ${imgui_SOURCE_DIR}/imgui_tables.cpp
        ${imgui_SOURCE_DIR}/imgui_widgets.cpp
        ${imgui_SOURCE_DIR}/backends/imgui_impl_opengl3.cpp
)
target_include_directories(imgui PUBLIC ${imgui_SOURCE_DIR} ${imgui_SOURCE_DIR}/backends)

# RlImGui
FetchContent_Declare(
        rlimgui
        GIT_REPOSITORY https://github.com/raylib-extras/rlImGui.git
        GIT_TAG 4d8a618
)
FetchContent_MakeAvailable(rlimgui)

add_library(rlimgui STATIC ${rlimgui_SOURCE_DIR}/rlImGui.cpp)
target_link_libraries(rlimgui PUBLIC raylib imgui)
target_include_directories(rlimgui PUBLIC ${rlimgui_SOURCE_DIR})

# LuaJIT
add_library(luajit_lib STATIC IMPORTED)
set_target_properties(luajit_lib PROPERTIES
        IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/External/LuaJIT/src/lua51.lib
)
target_include_directories(luajit_lib INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/External/LuaJIT/src)

# Core files
set(CORE_SOURCES
        core/mapcore.c
        core/kplib.c
)

set(CORE_HEADERS
        core/mapcore.h
        core/loaders.h
        core/kplib.h
)

# Main executable
add_executable(game
        main.cpp
        FileWatcher.h
        ${CORE_SOURCES}
        ${CORE_HEADERS}
)

target_compile_definitions(game PRIVATE
        USEHEIMAP=0
        NOSOUND=0
        OOS_CHECK=0
        _WIN32
        _WINDOWS
        _X86_
)

target_include_directories(game PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/core
        ${CMAKE_CURRENT_SOURCE_DIR}/External/LuaJIT/src
)

target_link_libraries(game
        raylib
        imgui
        rlimgui
        luajit_lib
)

add_custom_command(TARGET game POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        ${CMAKE_SOURCE_DIR}/script.lua
        $<TARGET_FILE_DIR:game>/script.lua)
