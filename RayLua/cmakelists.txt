cmake_minimum_required(VERSION 3.21)
cmake_policy(VERSION 3.5)
set(CMAKE_GENERATOR_PLATFORM Win32)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_SIZEOF_VOID_P 4)
project(raylib_lua_imgui C CXX)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include(FetchContent)

# Try to find raylib first, fallback to FetchContent
find_package(raylib QUIET)
if(NOT raylib_FOUND)
    message(STATUS "raylib not found, fetching...")
    FetchContent_Declare(
            raylib
            GIT_REPOSITORY https://github.com/raysan5/raylib.git
            GIT_TAG 5.5
    )
    FetchContent_MakeAvailable(raylib)
endif()

# ImGui - always use FetchContent since it doesn't have find_package support
FetchContent_Declare(
        imgui
        GIT_REPOSITORY https://github.com/ocornut/imgui.git
        GIT_TAG v1.92.1
)
FetchContent_MakeAvailable(imgui)

# Create imgui target
add_library(imgui STATIC
        ${imgui_SOURCE_DIR}/imgui.cpp
        ${imgui_SOURCE_DIR}/imgui_demo.cpp
        ${imgui_SOURCE_DIR}/imgui_draw.cpp
        ${imgui_SOURCE_DIR}/imgui_tables.cpp
        ${imgui_SOURCE_DIR}/imgui_widgets.cpp
        ${imgui_SOURCE_DIR}/backends/imgui_impl_opengl3.cpp
)
target_include_directories(imgui PUBLIC ${imgui_SOURCE_DIR} ${imgui_SOURCE_DIR}/backends)

# RlImGui
FetchContent_Declare(
        rlimgui
        GIT_REPOSITORY https://github.com/raylib-extras/rlImGui.git
        GIT_TAG 4d8a618
)
FetchContent_MakeAvailable(rlimgui)

add_library(rlimgui STATIC ${rlimgui_SOURCE_DIR}/rlImGui.cpp)
target_link_libraries(rlimgui PUBLIC raylib imgui)
target_include_directories(rlimgui PUBLIC ${rlimgui_SOURCE_DIR})

# LuaJIT compilation
set(LUAJIT_LIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/External/LuaJIT/src/lua51.lib)

if(NOT EXISTS ${LUAJIT_LIB_PATH})
    message(STATUS "LuaJIT library not found, compiling...")

    # Find Visual Studio installation
    find_program(VSWHERE_PATH "vswhere.exe"
            PATHS "$ENV{ProgramFiles\(x86\)}/Microsoft Visual Studio/Installer"
            NO_DEFAULT_PATH)

    if(VSWHERE_PATH)
        execute_process(
                COMMAND ${VSWHERE_PATH} -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                OUTPUT_VARIABLE VS_INSTALL_PATH
                OUTPUT_STRIP_TRAILING_WHITESPACE
        )

        if(VS_INSTALL_PATH)
            set(VCVARS_PATH "${VS_INSTALL_PATH}/VC/Auxiliary/Build/vcvars32.bat")

            execute_process(
                    COMMAND cmd /c "\"${VCVARS_PATH}\" && msvcbuild.bat static"
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/External/LuaJIT/src
                    RESULT_VARIABLE LUAJIT_BUILD_RESULT
            )
        else()
            message(FATAL_ERROR "Visual Studio installation not found")
        endif()
    else()
        # Fallback: try common VS paths
        set(COMMON_VS_PATHS
                "$ENV{ProgramFiles}/Microsoft Visual Studio/2022/Community/VC/Auxiliary/Build/vcvars32.bat"
                "$ENV{ProgramFiles}/Microsoft Visual Studio/2022/Professional/VC/Auxiliary/Build/vcvars32.bat"
                "$ENV{ProgramFiles}/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars32.bat"
                "$ENV{ProgramFiles\(x86\)}/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars32.bat"
        )

        set(VCVARS_FOUND FALSE)
        foreach(VCVARS_PATH ${COMMON_VS_PATHS})
            if(EXISTS "${VCVARS_PATH}")
                execute_process(
                        # '\"C:\Program Files\Microsoft Visual Studio\2022\Community/VC/Auxiliary/Build/vcvars32.bat\"' getting slahses issue here
                        COMMAND cmd /c "\"${VCVARS_PATH}\" && msvcbuild.bat static"
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/External/LuaJIT/src
                        RESULT_VARIABLE LUAJIT_BUILD_RESULT
                )
                set(VCVARS_FOUND TRUE)
                break()
            endif()
        endforeach()

        if(NOT VCVARS_FOUND)
            message(FATAL_ERROR "Visual Studio vcvars32.bat not found. Please run CMake from Visual Studio Command Prompt or install Visual Studio.")
        endif()
    endif()

    if(NOT LUAJIT_BUILD_RESULT EQUAL 0)
        message(FATAL_ERROR "Failed to build LuaJIT")
    endif()

    if(NOT EXISTS ${LUAJIT_LIB_PATH})
        message(FATAL_ERROR "LuaJIT build completed but library not found")
    endif()

    message(STATUS "LuaJIT compiled successfully")
else()
    message(STATUS "LuaJIT library found, skipping compilation")
endif()

# Core files
set(CORE_SOURCES
        core/mapcore.c
        core/artloader.c
        core/kplib.c
        Core/loaders.c
)

set(CORE_HEADERS
        core/mapcore.h
        core/artloader.h
        core/loaders.h
        core/kplib.h
        luabinder.hpp
)

# Main executable
add_executable(game
        main.cpp
        FileWatcher.h
        ${CORE_SOURCES}
        ${CORE_HEADERS}
)

target_compile_definitions(game PRIVATE
        USEHEIMAP=0
        NOSOUND=0
        OOS_CHECK=0
        _WIN32
        _WINDOWS
)

target_include_directories(game PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/core
        ${CMAKE_CURRENT_SOURCE_DIR}/External/LuaJIT/src
)

target_link_libraries(game
        raylib
        imgui
        rlimgui
        luajit_lib
)

add_custom_command(TARGET game POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        ${CMAKE_SOURCE_DIR}/script.lua
        $<TARGET_FILE_DIR:game>/script.lua)
